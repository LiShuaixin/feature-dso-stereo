!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	372;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	375;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	378;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	381;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	384;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	387;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	390;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	395;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	398;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	401;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	405;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	132;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	14;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	150;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	153;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	190;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	208;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	217;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	220;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	245;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	251;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	45;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	57;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	75;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	96;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	183;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	192;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	211;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	235;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	68;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	91;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	106;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	184;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	193;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	212;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	223;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	236;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	39;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	54;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	69;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	159;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	186;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	197;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	200;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	224;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	232;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	237;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	48;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	204;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
DEC	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	409;"	d	file:
HEX	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	420;"	d	file:
ID_VOID_MAIN	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	269;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	272;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	275;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	278;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	281;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	284;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	287;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	290;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	293;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	296;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	299;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	302;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	305;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	308;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	311;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	314;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	317;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	320;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	323;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	326;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	329;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	332;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	338;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	341;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	345;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	348;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	351;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	354;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	357;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	361;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	162;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
info_arch	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
main	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
qnxnto	build/CMakeFiles/3.2.2/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	367;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	373;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	376;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	379;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	382;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	385;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	390;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	393;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	396;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	400;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	192;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	210;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	219;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	222;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	240;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	246;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	213;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	225;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	230;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	186;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	195;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	214;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	226;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	231;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	188;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	199;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	202;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	206;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
DEC	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	404;"	d	file:
HEX	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	415;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	264;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	267;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	270;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	276;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	279;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	282;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	285;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	288;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	300;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	303;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	312;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	315;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	318;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	321;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	340;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	343;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	346;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	349;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	352;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	356;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
info_arch	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
main	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
qnxnto	build/CMakeFiles/3.2.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
features	build/CMakeFiles/feature_tests.c	/^  const char features[] = {""$/;"	v
main	build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {""$/;"	v
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/ren\/work\/fdso\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/ren\/work\/fdso$/;"	m
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
CoarseInitializer	src/FullSystem/CoarseInitializer.cpp	/^CoarseInitializer::CoarseInitializer(int ww, int hh) : thisToNext_aff(0,0), thisToNext(SE3())$/;"	f	class:fdso::CoarseInitializer
applyStep	src/FullSystem/CoarseInitializer.cpp	/^void CoarseInitializer::applyStep(int lvl)$/;"	f	class:fdso::CoarseInitializer
calcEC	src/FullSystem/CoarseInitializer.cpp	/^Vec3f CoarseInitializer::calcEC(int lvl)$/;"	f	class:fdso::CoarseInitializer
calcResAndGS	src/FullSystem/CoarseInitializer.cpp	/^Vec3f CoarseInitializer::calcResAndGS($/;"	f	class:fdso::CoarseInitializer
debugPlot	src/FullSystem/CoarseInitializer.cpp	/^void CoarseInitializer::debugPlot(int lvl, std::vector<IOWrap::Output3DWrapper*> &wraps)$/;"	f	class:fdso::CoarseInitializer
doStep	src/FullSystem/CoarseInitializer.cpp	/^void CoarseInitializer::doStep(int lvl, float lambda, Vec8f inc)$/;"	f	class:fdso::CoarseInitializer
fdso	src/FullSystem/CoarseInitializer.cpp	/^namespace fdso$/;"	n	file:
makeGradients	src/FullSystem/CoarseInitializer.cpp	/^void CoarseInitializer::makeGradients(Eigen::Vector3f** data)$/;"	f	class:fdso::CoarseInitializer
makeK	src/FullSystem/CoarseInitializer.cpp	/^void CoarseInitializer::makeK(CalibHessian* HCalib)$/;"	f	class:fdso::CoarseInitializer
makeNN	src/FullSystem/CoarseInitializer.cpp	/^void CoarseInitializer::makeNN()$/;"	f	class:fdso::CoarseInitializer
optReg	src/FullSystem/CoarseInitializer.cpp	/^void CoarseInitializer::optReg(int lvl)$/;"	f	class:fdso::CoarseInitializer
propagateDown	src/FullSystem/CoarseInitializer.cpp	/^void CoarseInitializer::propagateDown(int srcLvl)$/;"	f	class:fdso::CoarseInitializer
propagateUp	src/FullSystem/CoarseInitializer.cpp	/^void CoarseInitializer::propagateUp(int srcLvl)$/;"	f	class:fdso::CoarseInitializer
rescale	src/FullSystem/CoarseInitializer.cpp	/^float CoarseInitializer::rescale()$/;"	f	class:fdso::CoarseInitializer
resetPoints	src/FullSystem/CoarseInitializer.cpp	/^void CoarseInitializer::resetPoints(int lvl)$/;"	f	class:fdso::CoarseInitializer
setFirst	src/FullSystem/CoarseInitializer.cpp	/^void CoarseInitializer::setFirst(	CalibHessian* HCalib, FrameHessian* newFrameHessian)$/;"	f	class:fdso::CoarseInitializer
setFirstStereo	src/FullSystem/CoarseInitializer.cpp	/^void CoarseInitializer::setFirstStereo(CalibHessian* HCalib, FrameHessian* newFrameHessian, FrameHessian* newFrameHessian_Right)$/;"	f	class:fdso::CoarseInitializer
trackFrame	src/FullSystem/CoarseInitializer.cpp	/^bool CoarseInitializer::trackFrame(FrameHessian* newFrameHessian, FrameHessian* newFrameHessian_Right, std::vector<IOWrap::Output3DWrapper*> &wraps)$/;"	f	class:fdso::CoarseInitializer
~CoarseInitializer	src/FullSystem/CoarseInitializer.cpp	/^CoarseInitializer::~CoarseInitializer()$/;"	f	class:fdso::CoarseInitializer
CoarseInitializer	src/FullSystem/CoarseInitializer.h	/^class CoarseInitializer {$/;"	c	namespace:fdso
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/FullSystem/CoarseInitializer.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::CoarseInitializer
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/FullSystem/CoarseInitializer.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:fdso::Pnt
FLANNPointcloud	src/FullSystem/CoarseInitializer.h	/^    inline FLANNPointcloud() {num=0; points=0;}$/;"	f	struct:fdso::FLANNPointcloud
FLANNPointcloud	src/FullSystem/CoarseInitializer.h	/^    inline FLANNPointcloud(int n, Pnt* p) :  num(n), points(p) {}$/;"	f	struct:fdso::FLANNPointcloud
FLANNPointcloud	src/FullSystem/CoarseInitializer.h	/^struct FLANNPointcloud$/;"	s	namespace:fdso
JbBuffer	src/FullSystem/CoarseInitializer.h	/^	Vec10f* JbBuffer;			\/\/ 0-7: sum(dd * dp). 8: sum(res*dd). 9: 1\/(1+sum(dd*dd))=inverse hessian entry.$/;"	m	class:fdso::CoarseInitializer
JbBuffer_new	src/FullSystem/CoarseInitializer.h	/^	Vec10f* JbBuffer_new;$/;"	m	class:fdso::CoarseInitializer
K	src/FullSystem/CoarseInitializer.h	/^	Mat33 K[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
Ki	src/FullSystem/CoarseInitializer.h	/^	Mat33 Ki[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
Pnt	src/FullSystem/CoarseInitializer.h	/^struct Pnt$/;"	s	namespace:fdso
acc9	src/FullSystem/CoarseInitializer.h	/^	Accumulator9 acc9;$/;"	m	class:fdso::CoarseInitializer
acc9SC	src/FullSystem/CoarseInitializer.h	/^	Accumulator9 acc9SC;$/;"	m	class:fdso::CoarseInitializer
alphaK	src/FullSystem/CoarseInitializer.h	/^	float alphaK;$/;"	m	class:fdso::CoarseInitializer
alphaW	src/FullSystem/CoarseInitializer.h	/^	float alphaW;$/;"	m	class:fdso::CoarseInitializer
couplingWeight	src/FullSystem/CoarseInitializer.h	/^	float couplingWeight;$/;"	m	class:fdso::CoarseInitializer
cx	src/FullSystem/CoarseInitializer.h	/^	double cx[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
cxi	src/FullSystem/CoarseInitializer.h	/^	double cxi[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
cy	src/FullSystem/CoarseInitializer.h	/^	double cy[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
cyi	src/FullSystem/CoarseInitializer.h	/^	double cyi[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
dGrads	src/FullSystem/CoarseInitializer.h	/^	Vec3f dGrads[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
dIFist	src/FullSystem/CoarseInitializer.h	/^	Eigen::Vector3f* dIFist[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
dINew	src/FullSystem/CoarseInitializer.h	/^	Eigen::Vector3f* dINew[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
energy	src/FullSystem/CoarseInitializer.h	/^	Vec2f energy;		\/\/ (UenergyPhotometric, energyRegularizer)$/;"	m	struct:fdso::Pnt
energy_new	src/FullSystem/CoarseInitializer.h	/^	Vec2f energy_new;$/;"	m	struct:fdso::Pnt
fdso	src/FullSystem/CoarseInitializer.h	/^namespace fdso$/;"	n
firstFrame	src/FullSystem/CoarseInitializer.h	/^	FrameHessian* firstFrame;$/;"	m	class:fdso::CoarseInitializer
firstRightFrame	src/FullSystem/CoarseInitializer.h	/^	FrameHessian* firstRightFrame;$/;"	m	class:fdso::CoarseInitializer
fixAffine	src/FullSystem/CoarseInitializer.h	/^	bool fixAffine;$/;"	m	class:fdso::CoarseInitializer
frameID	src/FullSystem/CoarseInitializer.h	/^	int frameID;$/;"	m	class:fdso::CoarseInitializer
fx	src/FullSystem/CoarseInitializer.h	/^	double fx[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
fxi	src/FullSystem/CoarseInitializer.h	/^	double fxi[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
fy	src/FullSystem/CoarseInitializer.h	/^	double fy[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
fyi	src/FullSystem/CoarseInitializer.h	/^	double fyi[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
h	src/FullSystem/CoarseInitializer.h	/^	int h[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
iR	src/FullSystem/CoarseInitializer.h	/^	float iR;$/;"	m	struct:fdso::Pnt
iRSumNum	src/FullSystem/CoarseInitializer.h	/^	float iRSumNum;$/;"	m	struct:fdso::Pnt
idepth	src/FullSystem/CoarseInitializer.h	/^	float idepth;$/;"	m	struct:fdso::Pnt
idepth	src/FullSystem/CoarseInitializer.h	/^	float* idepth[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
idepth_new	src/FullSystem/CoarseInitializer.h	/^	float idepth_new;$/;"	m	struct:fdso::Pnt
isGood	src/FullSystem/CoarseInitializer.h	/^	bool isGood;$/;"	m	struct:fdso::Pnt
isGood_new	src/FullSystem/CoarseInitializer.h	/^	bool isGood_new;$/;"	m	struct:fdso::Pnt
kdtree_distance	src/FullSystem/CoarseInitializer.h	/^	inline float kdtree_distance(const float *p1, const size_t idx_p2,size_t \/*size*\/) const$/;"	f	struct:fdso::FLANNPointcloud
kdtree_get_bbox	src/FullSystem/CoarseInitializer.h	/^		bool kdtree_get_bbox(BBOX& \/* bb *\/) const { return false; }$/;"	f	struct:fdso::FLANNPointcloud
kdtree_get_point_count	src/FullSystem/CoarseInitializer.h	/^	inline size_t kdtree_get_point_count() const { return num; }$/;"	f	struct:fdso::FLANNPointcloud
kdtree_get_pt	src/FullSystem/CoarseInitializer.h	/^	inline float kdtree_get_pt(const size_t idx, int dim) const$/;"	f	struct:fdso::FLANNPointcloud
lastHessian	src/FullSystem/CoarseInitializer.h	/^	float lastHessian;$/;"	m	struct:fdso::Pnt
lastHessian_new	src/FullSystem/CoarseInitializer.h	/^	float lastHessian_new;$/;"	m	struct:fdso::Pnt
maxstep	src/FullSystem/CoarseInitializer.h	/^	float maxstep;$/;"	m	struct:fdso::Pnt
my_type	src/FullSystem/CoarseInitializer.h	/^	float my_type;$/;"	m	struct:fdso::Pnt
neighbours	src/FullSystem/CoarseInitializer.h	/^	int neighbours[10];$/;"	m	struct:fdso::Pnt
neighboursDist	src/FullSystem/CoarseInitializer.h	/^	float neighboursDist[10];$/;"	m	struct:fdso::Pnt
newFrame	src/FullSystem/CoarseInitializer.h	/^	FrameHessian* newFrame;$/;"	m	class:fdso::CoarseInitializer
num	src/FullSystem/CoarseInitializer.h	/^	int num;$/;"	m	struct:fdso::FLANNPointcloud
numPoints	src/FullSystem/CoarseInitializer.h	/^	int numPoints[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
outlierTH	src/FullSystem/CoarseInitializer.h	/^	float outlierTH;$/;"	m	struct:fdso::Pnt
parent	src/FullSystem/CoarseInitializer.h	/^	int parent;$/;"	m	struct:fdso::Pnt
parentDist	src/FullSystem/CoarseInitializer.h	/^	float parentDist;$/;"	m	struct:fdso::Pnt
points	src/FullSystem/CoarseInitializer.h	/^	Pnt* points;$/;"	m	struct:fdso::FLANNPointcloud
points	src/FullSystem/CoarseInitializer.h	/^	Pnt* points[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
printDebug	src/FullSystem/CoarseInitializer.h	/^	bool printDebug;$/;"	m	class:fdso::CoarseInitializer
regWeight	src/FullSystem/CoarseInitializer.h	/^	float regWeight;$/;"	m	class:fdso::CoarseInitializer
snapped	src/FullSystem/CoarseInitializer.h	/^	bool snapped;$/;"	m	class:fdso::CoarseInitializer
snappedAt	src/FullSystem/CoarseInitializer.h	/^	int snappedAt;$/;"	m	class:fdso::CoarseInitializer
thisToNext	src/FullSystem/CoarseInitializer.h	/^	SE3 thisToNext;$/;"	m	class:fdso::CoarseInitializer
thisToNext_aff	src/FullSystem/CoarseInitializer.h	/^	AffLight thisToNext_aff;$/;"	m	class:fdso::CoarseInitializer
u	src/FullSystem/CoarseInitializer.h	/^	float u,v;$/;"	m	struct:fdso::Pnt
v	src/FullSystem/CoarseInitializer.h	/^	float u,v;$/;"	m	struct:fdso::Pnt
w	src/FullSystem/CoarseInitializer.h	/^	int w[PYR_LEVELS];$/;"	m	class:fdso::CoarseInitializer
wM	src/FullSystem/CoarseInitializer.h	/^	Eigen::DiagonalMatrix<float, 8> wM;$/;"	m	class:fdso::CoarseInitializer
CoarseDistanceMap	src/FullSystem/CoarseTracker.cpp	/^CoarseDistanceMap::CoarseDistanceMap(int ww, int hh)$/;"	f	class:fdso::CoarseDistanceMap
CoarseTracker	src/FullSystem/CoarseTracker.cpp	/^CoarseTracker::CoarseTracker(int ww, int hh) : lastRef_aff_g2l(0,0)$/;"	f	class:fdso::CoarseTracker
addIntoDistFinal	src/FullSystem/CoarseTracker.cpp	/^void CoarseDistanceMap::addIntoDistFinal(int u, int v)$/;"	f	class:fdso::CoarseDistanceMap
calcGSSSE	src/FullSystem/CoarseTracker.cpp	/^void CoarseTracker::calcGSSSE(int lvl, Mat88 &H_out, Vec8 &b_out, SE3 refToNew, AffLight aff_g2l)$/;"	f	class:fdso::CoarseTracker
calcRes	src/FullSystem/CoarseTracker.cpp	/^Vec6 CoarseTracker::calcRes(int lvl, SE3 refToNew, AffLight aff_g2l, float cutoffTH)$/;"	f	class:fdso::CoarseTracker
debugPlotIDepthMap	src/FullSystem/CoarseTracker.cpp	/^void CoarseTracker::debugPlotIDepthMap(float* minID_pt, float* maxID_pt, std::vector<IOWrap::Output3DWrapper*> &wraps)$/;"	f	class:fdso::CoarseTracker
debugPlotIDepthMapFloat	src/FullSystem/CoarseTracker.cpp	/^void CoarseTracker::debugPlotIDepthMapFloat(std::vector<IOWrap::Output3DWrapper*> &wraps)$/;"	f	class:fdso::CoarseTracker
fdso	src/FullSystem/CoarseTracker.cpp	/^namespace fdso$/;"	n	file:
growDistBFS	src/FullSystem/CoarseTracker.cpp	/^void CoarseDistanceMap::growDistBFS(int bfsNum)$/;"	f	class:fdso::CoarseDistanceMap
makeCoarseDepthForFirstFrame	src/FullSystem/CoarseTracker.cpp	/^void CoarseTracker::makeCoarseDepthForFirstFrame(FrameHessian* fh)$/;"	f	class:fdso::CoarseTracker
makeCoarseDepthL0	src/FullSystem/CoarseTracker.cpp	/^void CoarseTracker::makeCoarseDepthL0(std::vector<FrameHessian*> frameHessians, FrameHessian* fh_right, CalibHessian Hcalib)$/;"	f	class:fdso::CoarseTracker
makeDistanceMap	src/FullSystem/CoarseTracker.cpp	/^void CoarseDistanceMap::makeDistanceMap($/;"	f	class:fdso::CoarseDistanceMap
makeInlierVotes	src/FullSystem/CoarseTracker.cpp	/^void CoarseDistanceMap::makeInlierVotes(std::vector<FrameHessian*> frameHessians)$/;"	f	class:fdso::CoarseDistanceMap
makeK	src/FullSystem/CoarseTracker.cpp	/^void CoarseDistanceMap::makeK(CalibHessian* HCalib)$/;"	f	class:fdso::CoarseDistanceMap
makeK	src/FullSystem/CoarseTracker.cpp	/^void CoarseTracker::makeK(CalibHessian* HCalib)$/;"	f	class:fdso::CoarseTracker
setCTRefForFirstFrame	src/FullSystem/CoarseTracker.cpp	/^void CoarseTracker::setCTRefForFirstFrame(std::vector<FrameHessian *> frameHessians)$/;"	f	class:fdso::CoarseTracker
setCoarseTrackingRef	src/FullSystem/CoarseTracker.cpp	/^void CoarseTracker::setCoarseTrackingRef($/;"	f	class:fdso::CoarseTracker
trackNewestCoarse	src/FullSystem/CoarseTracker.cpp	/^bool CoarseTracker::trackNewestCoarse($/;"	f	class:fdso::CoarseTracker
~CoarseDistanceMap	src/FullSystem/CoarseTracker.cpp	/^CoarseDistanceMap::~CoarseDistanceMap()$/;"	f	class:fdso::CoarseDistanceMap
~CoarseTracker	src/FullSystem/CoarseTracker.cpp	/^CoarseTracker::~CoarseTracker()$/;"	f	class:fdso::CoarseTracker
CoarseDistanceMap	src/FullSystem/CoarseTracker.h	/^class CoarseDistanceMap {$/;"	c	namespace:fdso
CoarseTracker	src/FullSystem/CoarseTracker.h	/^class CoarseTracker {$/;"	c	namespace:fdso
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/FullSystem/CoarseTracker.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::CoarseDistanceMap
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/FullSystem/CoarseTracker.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::CoarseTracker
K	src/FullSystem/CoarseTracker.h	/^	Mat33f K[PYR_LEVELS];$/;"	m	class:fdso::CoarseDistanceMap
K	src/FullSystem/CoarseTracker.h	/^	Mat33f K[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
Ki	src/FullSystem/CoarseTracker.h	/^	Mat33f Ki[PYR_LEVELS];$/;"	m	class:fdso::CoarseDistanceMap
Ki	src/FullSystem/CoarseTracker.h	/^	Mat33f Ki[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
acc	src/FullSystem/CoarseTracker.h	/^	Accumulator9 acc;$/;"	m	class:fdso::CoarseTracker
bfsList1	src/FullSystem/CoarseTracker.h	/^	Eigen::Vector2i* bfsList1;$/;"	m	class:fdso::CoarseDistanceMap
bfsList2	src/FullSystem/CoarseTracker.h	/^	Eigen::Vector2i* bfsList2;$/;"	m	class:fdso::CoarseDistanceMap
buf_warped_dx	src/FullSystem/CoarseTracker.h	/^	float* buf_warped_dx;$/;"	m	class:fdso::CoarseTracker
buf_warped_dy	src/FullSystem/CoarseTracker.h	/^	float* buf_warped_dy;$/;"	m	class:fdso::CoarseTracker
buf_warped_idepth	src/FullSystem/CoarseTracker.h	/^	float* buf_warped_idepth;$/;"	m	class:fdso::CoarseTracker
buf_warped_n	src/FullSystem/CoarseTracker.h	/^	int buf_warped_n;$/;"	m	class:fdso::CoarseTracker
buf_warped_refColor	src/FullSystem/CoarseTracker.h	/^	float* buf_warped_refColor;$/;"	m	class:fdso::CoarseTracker
buf_warped_residual	src/FullSystem/CoarseTracker.h	/^	float* buf_warped_residual;$/;"	m	class:fdso::CoarseTracker
buf_warped_u	src/FullSystem/CoarseTracker.h	/^	float* buf_warped_u;$/;"	m	class:fdso::CoarseTracker
buf_warped_v	src/FullSystem/CoarseTracker.h	/^	float* buf_warped_v;$/;"	m	class:fdso::CoarseTracker
buf_warped_weight	src/FullSystem/CoarseTracker.h	/^	float* buf_warped_weight;$/;"	m	class:fdso::CoarseTracker
coarseProjectionGrid	src/FullSystem/CoarseTracker.h	/^	PointFrameResidual** coarseProjectionGrid;$/;"	m	class:fdso::CoarseDistanceMap
coarseProjectionGridNum	src/FullSystem/CoarseTracker.h	/^	int* coarseProjectionGridNum;$/;"	m	class:fdso::CoarseDistanceMap
cx	src/FullSystem/CoarseTracker.h	/^	float cx[PYR_LEVELS];$/;"	m	class:fdso::CoarseDistanceMap
cx	src/FullSystem/CoarseTracker.h	/^	float cx[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
cxi	src/FullSystem/CoarseTracker.h	/^	float cxi[PYR_LEVELS];$/;"	m	class:fdso::CoarseDistanceMap
cxi	src/FullSystem/CoarseTracker.h	/^	float cxi[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
cy	src/FullSystem/CoarseTracker.h	/^	float cy[PYR_LEVELS];$/;"	m	class:fdso::CoarseDistanceMap
cy	src/FullSystem/CoarseTracker.h	/^	float cy[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
cyi	src/FullSystem/CoarseTracker.h	/^	float cyi[PYR_LEVELS];$/;"	m	class:fdso::CoarseDistanceMap
cyi	src/FullSystem/CoarseTracker.h	/^	float cyi[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
debugPlot	src/FullSystem/CoarseTracker.h	/^	bool debugPrint, debugPlot;$/;"	m	class:fdso::CoarseTracker
debugPrint	src/FullSystem/CoarseTracker.h	/^	bool debugPrint, debugPlot;$/;"	m	class:fdso::CoarseTracker
fdso	src/FullSystem/CoarseTracker.h	/^namespace fdso$/;"	n
firstCoarseRMSE	src/FullSystem/CoarseTracker.h	/^	double firstCoarseRMSE;$/;"	m	class:fdso::CoarseTracker
fwdWarpedIDDistFinal	src/FullSystem/CoarseTracker.h	/^	float* fwdWarpedIDDistFinal;$/;"	m	class:fdso::CoarseDistanceMap
fx	src/FullSystem/CoarseTracker.h	/^	float fx[PYR_LEVELS];$/;"	m	class:fdso::CoarseDistanceMap
fx	src/FullSystem/CoarseTracker.h	/^	float fx[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
fxi	src/FullSystem/CoarseTracker.h	/^	float fxi[PYR_LEVELS];$/;"	m	class:fdso::CoarseDistanceMap
fxi	src/FullSystem/CoarseTracker.h	/^	float fxi[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
fy	src/FullSystem/CoarseTracker.h	/^	float fy[PYR_LEVELS];$/;"	m	class:fdso::CoarseDistanceMap
fy	src/FullSystem/CoarseTracker.h	/^	float fy[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
fyi	src/FullSystem/CoarseTracker.h	/^	float fyi[PYR_LEVELS];$/;"	m	class:fdso::CoarseDistanceMap
fyi	src/FullSystem/CoarseTracker.h	/^	float fyi[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
h	src/FullSystem/CoarseTracker.h	/^	int h[PYR_LEVELS];$/;"	m	class:fdso::CoarseDistanceMap
h	src/FullSystem/CoarseTracker.h	/^	int h[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
idepth	src/FullSystem/CoarseTracker.h	/^	float* idepth[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
lastFlowIndicators	src/FullSystem/CoarseTracker.h	/^	Vec3 lastFlowIndicators;$/;"	m	class:fdso::CoarseTracker
lastRef	src/FullSystem/CoarseTracker.h	/^	FrameHessian* lastRef;$/;"	m	class:fdso::CoarseTracker
lastRef_aff_g2l	src/FullSystem/CoarseTracker.h	/^	AffLight lastRef_aff_g2l;$/;"	m	class:fdso::CoarseTracker
lastResiduals	src/FullSystem/CoarseTracker.h	/^	Vec5 lastResiduals;$/;"	m	class:fdso::CoarseTracker
newFrame	src/FullSystem/CoarseTracker.h	/^	FrameHessian* newFrame;$/;"	m	class:fdso::CoarseTracker
pc_color	src/FullSystem/CoarseTracker.h	/^	float* pc_color[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
pc_idepth	src/FullSystem/CoarseTracker.h	/^	float* pc_idepth[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
pc_n	src/FullSystem/CoarseTracker.h	/^	int pc_n[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
pc_u	src/FullSystem/CoarseTracker.h	/^	float* pc_u[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
pc_v	src/FullSystem/CoarseTracker.h	/^	float* pc_v[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
refFrameID	src/FullSystem/CoarseTracker.h	/^	int refFrameID;$/;"	m	class:fdso::CoarseTracker
w	src/FullSystem/CoarseTracker.h	/^	int w[PYR_LEVELS];$/;"	m	class:fdso::CoarseDistanceMap
w	src/FullSystem/CoarseTracker.h	/^	int w[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
weightSums	src/FullSystem/CoarseTracker.h	/^	float* weightSums[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
weightSums_bak	src/FullSystem/CoarseTracker.h	/^	float* weightSums_bak[PYR_LEVELS];$/;"	m	class:fdso::CoarseTracker
ExtractORB	src/FullSystem/FullSystem.cpp	/^void FullSystem::ExtractORB(int flag, const cv::Mat &im)$/;"	f	class:fdso::FullSystem
FullSystem	src/FullSystem/FullSystem.cpp	/^FullSystem::FullSystem():matcher_flann_(new cv::flann::LshIndexParams(5,10,2))$/;"	f	class:fdso::FullSystem
activatePointsMT	src/FullSystem/FullSystem.cpp	/^void FullSystem::activatePointsMT()$/;"	f	class:fdso::FullSystem
activatePointsMT_Reductor	src/FullSystem/FullSystem.cpp	/^void FullSystem::activatePointsMT_Reductor($/;"	f	class:fdso::FullSystem
activatePointsOldFirst	src/FullSystem/FullSystem.cpp	/^void FullSystem::activatePointsOldFirst()$/;"	f	class:fdso::FullSystem
addActiveFrame	src/FullSystem/FullSystem.cpp	/^void FullSystem::addActiveFrame( ImageAndExposure* image, ImageAndExposure* image_right, int id )$/;"	f	class:fdso::FullSystem
blockUntilMappingIsFinished	src/FullSystem/FullSystem.cpp	/^void FullSystem::blockUntilMappingIsFinished()$/;"	f	class:fdso::FullSystem
deliverTrackedFrame	src/FullSystem/FullSystem.cpp	/^void FullSystem::deliverTrackedFrame(FrameHessian* fh, FrameHessian* fh_right, bool needKF)$/;"	f	class:fdso::FullSystem
fdso	src/FullSystem/FullSystem.cpp	/^namespace fdso$/;"	n	file:
find_feature_matches	src/FullSystem/FullSystem.cpp	/^void FullSystem::find_feature_matches (const cv::Mat& descriptorsLast,const cv::Mat& descriptorsCur,std::vector<cv::DMatch>& feature_matches_)$/;"	f	class:fdso::FullSystem
flagPointsForRemoval	src/FullSystem/FullSystem.cpp	/^void FullSystem::flagPointsForRemoval()$/;"	f	class:fdso::FullSystem
initializeFromInitializer	src/FullSystem/FullSystem.cpp	/^void FullSystem::initializeFromInitializer(FrameHessian* newFrame)$/;"	f	class:fdso::FullSystem
instanceCounter	src/FullSystem/FullSystem.cpp	/^int CalibHessian::instanceCounter=0;$/;"	m	class:fdso::CalibHessian	file:
instanceCounter	src/FullSystem/FullSystem.cpp	/^int FrameHessian::instanceCounter=0;$/;"	m	class:fdso::FrameHessian	file:
instanceCounter	src/FullSystem/FullSystem.cpp	/^int PointHessian::instanceCounter=0;$/;"	m	class:fdso::PointHessian	file:
makeKeyFrame	src/FullSystem/FullSystem.cpp	/^void FullSystem::makeKeyFrame( FrameHessian* fh, FrameHessian* fh_right)$/;"	f	class:fdso::FullSystem
makeNewTraces	src/FullSystem/FullSystem.cpp	/^void FullSystem::makeNewTraces(FrameHessian* newFrame, FrameHessian* newFrameRight, float* gtDepth)$/;"	f	class:fdso::FullSystem
makeNonKeyFrame	src/FullSystem/FullSystem.cpp	/^void FullSystem::makeNonKeyFrame( FrameHessian* fh, FrameHessian* fh_right)$/;"	f	class:fdso::FullSystem
mappingLoop	src/FullSystem/FullSystem.cpp	/^void FullSystem::mappingLoop()$/;"	f	class:fdso::FullSystem
printEigenValLine	src/FullSystem/FullSystem.cpp	/^void FullSystem::printEigenValLine()$/;"	f	class:fdso::FullSystem
printEvalLine	src/FullSystem/FullSystem.cpp	/^void FullSystem::printEvalLine()$/;"	f	class:fdso::FullSystem
printFrameLifetimes	src/FullSystem/FullSystem.cpp	/^void FullSystem::printFrameLifetimes()$/;"	f	class:fdso::FullSystem
printLogLine	src/FullSystem/FullSystem.cpp	/^void FullSystem::printLogLine()$/;"	f	class:fdso::FullSystem
printResult	src/FullSystem/FullSystem.cpp	/^void FullSystem::printResult(std::string file)$/;"	f	class:fdso::FullSystem
setGammaFunction	src/FullSystem/FullSystem.cpp	/^void FullSystem::setGammaFunction(float* BInv)$/;"	f	class:fdso::FullSystem
setOriginalCalib	src/FullSystem/FullSystem.cpp	/^void FullSystem::setOriginalCalib(VecXf originalCalib, int originalW, int originalH)$/;"	f	class:fdso::FullSystem
setPrecalcValues	src/FullSystem/FullSystem.cpp	/^void FullSystem::setPrecalcValues()$/;"	f	class:fdso::FullSystem
stereoMatch	src/FullSystem/FullSystem.cpp	/^void FullSystem::stereoMatch( ImageAndExposure* image, ImageAndExposure* image_right, int id, cv::Mat &idepthMap)$/;"	f	class:fdso::FullSystem
traceNewCoarseKey	src/FullSystem/FullSystem.cpp	/^void FullSystem::traceNewCoarseKey(FrameHessian* fh, FrameHessian* fh_right)$/;"	f	class:fdso::FullSystem
traceNewCoarseNonKey	src/FullSystem/FullSystem.cpp	/^void FullSystem::traceNewCoarseNonKey(FrameHessian *fh, FrameHessian *fh_right)$/;"	f	class:fdso::FullSystem
trackNewCoarse	src/FullSystem/FullSystem.cpp	/^Vec4 FullSystem::trackNewCoarse(FrameHessian* fh, FrameHessian* fh_right,)$/;"	f	class:fdso::FullSystem
~FullSystem	src/FullSystem/FullSystem.cpp	/^FullSystem::~FullSystem()$/;"	f	class:fdso::FullSystem
DiagonalLog	src/FullSystem/FullSystem.h	/^	std::ofstream* DiagonalLog;$/;"	m	class:fdso::FullSystem
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/FullSystem/FullSystem.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::FullSystem
FullSystem	src/FullSystem/FullSystem.h	/^class FullSystem {$/;"	c	namespace:fdso
Hcalib	src/FullSystem/FullSystem.h	/^	CalibHessian Hcalib;$/;"	m	class:fdso::FullSystem
IOWrap	src/FullSystem/FullSystem.h	/^namespace IOWrap$/;"	n	namespace:fdso
MAX_ACTIVE_FRAMES	src/FullSystem/FullSystem.h	26;"	d
activeResiduals	src/FullSystem/FullSystem.h	/^	std::vector<PointFrameResidual*> activeResiduals;$/;"	m	class:fdso::FullSystem
allFrameHistory	src/FullSystem/FullSystem.h	/^	std::vector<FrameShell*> allFrameHistory;$/;"	m	class:fdso::FullSystem
allKeyFramesHistory	src/FullSystem/FullSystem.h	/^	std::vector<FrameShell*> allKeyFramesHistory;$/;"	m	class:fdso::FullSystem
allResVec	src/FullSystem/FullSystem.h	/^	std::vector<float> allResVec;$/;"	m	class:fdso::FullSystem
calibLog	src/FullSystem/FullSystem.h	/^	std::ofstream* calibLog;$/;"	m	class:fdso::FullSystem
coarseDistanceMap	src/FullSystem/FullSystem.h	/^	CoarseDistanceMap* coarseDistanceMap;$/;"	m	class:fdso::FullSystem
coarseInitializer	src/FullSystem/FullSystem.h	/^	CoarseInitializer* coarseInitializer;$/;"	m	class:fdso::FullSystem
coarseTracker	src/FullSystem/FullSystem.h	/^	CoarseTracker* coarseTracker;					\/\/ always used to track new frames. protected by [trackMutex].$/;"	m	class:fdso::FullSystem
coarseTrackerSwapMutex	src/FullSystem/FullSystem.h	/^	boost::mutex coarseTrackerSwapMutex;			\/\/ if tracker sees that there is a new reference, tracker locks [coarseTrackerSwapMutex] and swaps the two.$/;"	m	class:fdso::FullSystem
coarseTracker_forNewKF	src/FullSystem/FullSystem.h	/^	CoarseTracker* coarseTracker_forNewKF;			\/\/ set as as reference. protected by [coarseTrackerSwapMutex].$/;"	m	class:fdso::FullSystem
coarseTrackingLog	src/FullSystem/FullSystem.h	/^	std::ofstream* coarseTrackingLog;$/;"	m	class:fdso::FullSystem
currentMinActDist	src/FullSystem/FullSystem.h	/^	float currentMinActDist;$/;"	m	class:fdso::FullSystem
deleteOut	src/FullSystem/FullSystem.h	/^template<typename T> inline void deleteOut(std::vector<T*> &v, const int i)$/;"	f	namespace:fdso
deleteOutOrder	src/FullSystem/FullSystem.h	/^template<typename T> inline void deleteOutOrder(std::vector<T*> &v, const T* element)$/;"	f	namespace:fdso
deleteOutOrder	src/FullSystem/FullSystem.h	/^template<typename T> inline void deleteOutOrder(std::vector<T*> &v, const int i)$/;"	f	namespace:fdso
deleteOutPt	src/FullSystem/FullSystem.h	/^template<typename T> inline void deleteOutPt(std::vector<T*> &v, const T* i)$/;"	f	namespace:fdso
ef	src/FullSystem/FullSystem.h	/^	EnergyFunctional* ef;$/;"	m	class:fdso::FullSystem
eigenALog	src/FullSystem/FullSystem.h	/^	std::ofstream* eigenALog;$/;"	m	class:fdso::FullSystem
eigenAllLog	src/FullSystem/FullSystem.h	/^	std::ofstream* eigenAllLog;$/;"	m	class:fdso::FullSystem
eigenPLog	src/FullSystem/FullSystem.h	/^	std::ofstream* eigenPLog;$/;"	m	class:fdso::FullSystem
eigenTestNan	src/FullSystem/FullSystem.h	/^inline bool eigenTestNan(MatXX m, std::string msg)$/;"	f	namespace:fdso
errorsLog	src/FullSystem/FullSystem.h	/^	std::ofstream* errorsLog;$/;"	m	class:fdso::FullSystem
fdso	src/FullSystem/FullSystem.h	/^namespace fdso$/;"	n
frameHessians	src/FullSystem/FullSystem.h	/^	std::vector<FrameHessian*> frameHessians;	\/\/ ONLY changed in marginalizeFrame and addFrame.$/;"	m	class:fdso::FullSystem
frameHessiansRight	src/FullSystem/FullSystem.h	/^	std::vector<FrameHessian*> frameHessiansRight;$/;"	m	class:fdso::FullSystem
initFailed	src/FullSystem/FullSystem.h	/^	bool initFailed;$/;"	m	class:fdso::FullSystem
initialized	src/FullSystem/FullSystem.h	/^	bool initialized;$/;"	m	class:fdso::FullSystem
isLost	src/FullSystem/FullSystem.h	/^	bool isLost;$/;"	m	class:fdso::FullSystem
lastCoarseRMSE	src/FullSystem/FullSystem.h	/^	Vec5 lastCoarseRMSE;$/;"	m	class:fdso::FullSystem
lastRefStopID	src/FullSystem/FullSystem.h	/^	int lastRefStopID;$/;"	m	class:fdso::FullSystem
linearizeOperation	src/FullSystem/FullSystem.h	/^	bool linearizeOperation;$/;"	m	class:fdso::FullSystem
mDescriptors	src/FullSystem/FullSystem.h	/^	cv::Mat mDescriptors, mDescriptorsRight;$/;"	m	class:fdso::FullSystem
mDescriptorsRight	src/FullSystem/FullSystem.h	/^	cv::Mat mDescriptors, mDescriptorsRight;$/;"	m	class:fdso::FullSystem
mapMutex	src/FullSystem/FullSystem.h	/^	boost::mutex mapMutex;$/;"	m	class:fdso::FullSystem
mappedFrameSignal	src/FullSystem/FullSystem.h	/^	boost::condition_variable mappedFrameSignal;$/;"	m	class:fdso::FullSystem
mappingThread	src/FullSystem/FullSystem.h	/^	boost::thread mappingThread;$/;"	m	class:fdso::FullSystem
matcher_flann_	src/FullSystem/FullSystem.h	/^	cv::FlannBasedMatcher matcher_flann_;$/;"	m	class:fdso::FullSystem
maxIdJetVisDebug	src/FullSystem/FullSystem.h	/^	float minIdJetVisDebug, maxIdJetVisDebug;$/;"	m	class:fdso::FullSystem
maxIdJetVisTracker	src/FullSystem/FullSystem.h	/^	float minIdJetVisTracker, maxIdJetVisTracker;$/;"	m	class:fdso::FullSystem
minIdJetVisDebug	src/FullSystem/FullSystem.h	/^	float minIdJetVisDebug, maxIdJetVisDebug;$/;"	m	class:fdso::FullSystem
minIdJetVisTracker	src/FullSystem/FullSystem.h	/^	float minIdJetVisTracker, maxIdJetVisTracker;$/;"	m	class:fdso::FullSystem
mpORBextractorLeft	src/FullSystem/FullSystem.h	/^	ORBextractor* mpORBextractorLeft, *mpORBextractorRight;$/;"	m	class:fdso::FullSystem
mpORBextractorRight	src/FullSystem/FullSystem.h	/^	ORBextractor* mpORBextractorLeft, *mpORBextractorRight;$/;"	m	class:fdso::FullSystem
mvKeys	src/FullSystem/FullSystem.h	/^	std::vector<cv::KeyPoint> mvKeys, mvKeysRight;$/;"	m	class:fdso::FullSystem
mvKeysRight	src/FullSystem/FullSystem.h	/^	std::vector<cv::KeyPoint> mvKeys, mvKeysRight;$/;"	m	class:fdso::FullSystem
needNewKFAfter	src/FullSystem/FullSystem.h	/^	int needNewKFAfter;	\/\/ Otherwise, a new KF is *needed that has ID bigger than [needNewKFAfter]*.$/;"	m	class:fdso::FullSystem
needToKetchupMapping	src/FullSystem/FullSystem.h	/^	bool needToKetchupMapping;$/;"	m	class:fdso::FullSystem
nullspacesLog	src/FullSystem/FullSystem.h	/^	std::ofstream* nullspacesLog;$/;"	m	class:fdso::FullSystem
numsLog	src/FullSystem/FullSystem.h	/^	std::ofstream* numsLog;$/;"	m	class:fdso::FullSystem
outputWrapper	src/FullSystem/FullSystem.h	/^    std::vector<IOWrap::Output3DWrapper*> outputWrapper;$/;"	m	class:fdso::FullSystem
pixelSelector	src/FullSystem/FullSystem.h	/^	PixelSelector* pixelSelector;$/;"	m	class:fdso::FullSystem
runMapping	src/FullSystem/FullSystem.h	/^	bool runMapping;$/;"	m	class:fdso::FullSystem
selectionMap	src/FullSystem/FullSystem.h	/^	float* selectionMap;$/;"	m	class:fdso::FullSystem
shellPoseMutex	src/FullSystem/FullSystem.h	/^	boost::mutex shellPoseMutex;$/;"	m	class:fdso::FullSystem
statistics_lastFineTrackRMSE	src/FullSystem/FullSystem.h	/^	float statistics_lastFineTrackRMSE;$/;"	m	class:fdso::FullSystem
statistics_lastNumOptIts	src/FullSystem/FullSystem.h	/^	long int statistics_lastNumOptIts;$/;"	m	class:fdso::FullSystem
statistics_numActivatedPoints	src/FullSystem/FullSystem.h	/^	long int statistics_numActivatedPoints;$/;"	m	class:fdso::FullSystem
statistics_numCreatedPoints	src/FullSystem/FullSystem.h	/^	long int statistics_numCreatedPoints;$/;"	m	class:fdso::FullSystem
statistics_numDroppedPoints	src/FullSystem/FullSystem.h	/^	long int statistics_numDroppedPoints;$/;"	m	class:fdso::FullSystem
statistics_numForceDroppedResBwd	src/FullSystem/FullSystem.h	/^	long int statistics_numForceDroppedResBwd;$/;"	m	class:fdso::FullSystem
statistics_numForceDroppedResFwd	src/FullSystem/FullSystem.h	/^	long int statistics_numForceDroppedResFwd;$/;"	m	class:fdso::FullSystem
statistics_numMargResBwd	src/FullSystem/FullSystem.h	/^	long int statistics_numMargResBwd;$/;"	m	class:fdso::FullSystem
statistics_numMargResFwd	src/FullSystem/FullSystem.h	/^	long int statistics_numMargResFwd;$/;"	m	class:fdso::FullSystem
threadLeft	src/FullSystem/FullSystem.h	/^	boost::thread threadLeft,threadRight;$/;"	m	class:fdso::FullSystem
threadRight	src/FullSystem/FullSystem.h	/^	boost::thread threadLeft,threadRight;$/;"	m	class:fdso::FullSystem
trackMapSyncMutex	src/FullSystem/FullSystem.h	/^	boost::mutex trackMapSyncMutex;$/;"	m	class:fdso::FullSystem
trackMutex	src/FullSystem/FullSystem.h	/^	boost::mutex trackMutex;$/;"	m	class:fdso::FullSystem
trackedFrameSignal	src/FullSystem/FullSystem.h	/^	boost::condition_variable trackedFrameSignal;$/;"	m	class:fdso::FullSystem
treadReduce	src/FullSystem/FullSystem.h	/^	IndexThreadReduce<Vec10> treadReduce;$/;"	m	class:fdso::FullSystem
unmappedTrackedFrames	src/FullSystem/FullSystem.h	/^	std::deque<FrameHessian*> unmappedTrackedFrames;$/;"	m	class:fdso::FullSystem
unmappedTrackedFrames_right	src/FullSystem/FullSystem.h	/^	std::deque<FrameHessian*> unmappedTrackedFrames_right;$/;"	m	class:fdso::FullSystem
variancesLog	src/FullSystem/FullSystem.h	/^	std::ofstream* variancesLog;$/;"	m	class:fdso::FullSystem
debugPlot	src/FullSystem/FullSystemDebugStuff.cpp	/^	void FullSystem::debugPlot(std::string name)$/;"	f	class:fdso::FullSystem
debugPlotTracking	src/FullSystem/FullSystemDebugStuff.cpp	/^	void FullSystem::debugPlotTracking()$/;"	f	class:fdso::FullSystem
fdso	src/FullSystem/FullSystemDebugStuff.cpp	/^namespace fdso$/;"	n	file:
fdso	src/FullSystem/FullSystemMarginalize.cpp	/^namespace fdso$/;"	n	file:
flagFramesForMarginalization	src/FullSystem/FullSystemMarginalize.cpp	/^void FullSystem::flagFramesForMarginalization(FrameHessian* newFH)$/;"	f	class:fdso::FullSystem
marginalizeFrame	src/FullSystem/FullSystemMarginalize.cpp	/^void FullSystem::marginalizeFrame(FrameHessian* frame)$/;"	f	class:fdso::FullSystem
fdso	src/FullSystem/FullSystemOptPoint.cpp	/^namespace fdso$/;"	n	file:
optimizeImmaturePoint	src/FullSystem/FullSystemOptPoint.cpp	/^PointHessian* FullSystem::optimizeImmaturePoint($/;"	f	class:fdso::FullSystem
applyRes_Reductor	src/FullSystem/FullSystemOptimize.cpp	/^void FullSystem::applyRes_Reductor(bool copyJacobians, int min, int max, Vec10* stats, int tid)$/;"	f	class:fdso::FullSystem
backupState	src/FullSystem/FullSystemOptimize.cpp	/^void FullSystem::backupState(bool backupLastStep)$/;"	f	class:fdso::FullSystem
calcLEnergy	src/FullSystem/FullSystemOptimize.cpp	/^double FullSystem::calcLEnergy()$/;"	f	class:fdso::FullSystem
calcMEnergy	src/FullSystem/FullSystemOptimize.cpp	/^double FullSystem::calcMEnergy()$/;"	f	class:fdso::FullSystem
doStepFromBackup	src/FullSystem/FullSystemOptimize.cpp	/^bool FullSystem::doStepFromBackup(float stepfacC,float stepfacT,float stepfacR,float stepfacA,float stepfacD)$/;"	f	class:fdso::FullSystem
fdso	src/FullSystem/FullSystemOptimize.cpp	/^namespace fdso$/;"	n	file:
getNullspaces	src/FullSystem/FullSystemOptimize.cpp	/^std::vector<VecX> FullSystem::getNullspaces($/;"	f	class:fdso::FullSystem
linearizeAll	src/FullSystem/FullSystemOptimize.cpp	/^Vec3 FullSystem::linearizeAll(bool fixLinearization)$/;"	f	class:fdso::FullSystem
linearizeAll_Reductor	src/FullSystem/FullSystemOptimize.cpp	/^void FullSystem::linearizeAll_Reductor(bool fixLinearization, std::vector<PointFrameResidual*>* toRemove, int min, int max, Vec10* stats, int tid)$/;"	f	class:fdso::FullSystem
loadSateBackup	src/FullSystem/FullSystemOptimize.cpp	/^void FullSystem::loadSateBackup()$/;"	f	class:fdso::FullSystem
optimize	src/FullSystem/FullSystemOptimize.cpp	/^float FullSystem::optimize(int mnumOptIts)$/;"	f	class:fdso::FullSystem
printOptRes	src/FullSystem/FullSystemOptimize.cpp	/^void FullSystem::printOptRes(Vec3 res, double resL, double resM, double resPrior, double LExact, float a, float b)$/;"	f	class:fdso::FullSystem
removeOutliers	src/FullSystem/FullSystemOptimize.cpp	/^void FullSystem::removeOutliers()$/;"	f	class:fdso::FullSystem
setNewFrameEnergyTH	src/FullSystem/FullSystemOptimize.cpp	/^void FullSystem::setNewFrameEnergyTH()$/;"	f	class:fdso::FullSystem
solveSystem	src/FullSystem/FullSystemOptimize.cpp	/^void FullSystem::solveSystem(int iteration, double lambda)$/;"	f	class:fdso::FullSystem
PointHessian	src/FullSystem/HessianBlocks.cpp	/^PointHessian::PointHessian(const ImmaturePoint* const rawPoint, CalibHessian* Hcalib)$/;"	f	class:fdso::PointHessian
fdso	src/FullSystem/HessianBlocks.cpp	/^namespace fdso$/;"	n	file:
makeImages	src/FullSystem/HessianBlocks.cpp	/^void FrameHessian::makeImages(float* color, CalibHessian* HCalib)$/;"	f	class:fdso::FrameHessian
release	src/FullSystem/HessianBlocks.cpp	/^void FrameHessian::release()$/;"	f	class:fdso::FrameHessian
release	src/FullSystem/HessianBlocks.cpp	/^void PointHessian::release()$/;"	f	class:fdso::PointHessian
set	src/FullSystem/HessianBlocks.cpp	/^void FrameFramePrecalc::set(FrameHessian* host, FrameHessian* target, CalibHessian* HCalib )$/;"	f	class:fdso::FrameFramePrecalc
setStateZero	src/FullSystem/HessianBlocks.cpp	/^void FrameHessian::setStateZero(Vec10 state_zero)$/;"	f	class:fdso::FrameHessian
ACTIVE	src/FullSystem/HessianBlocks.h	/^	enum PtStatus {ACTIVE=0, INACTIVE, OUTLIER, OOB, MARGINALIZED};$/;"	e	enum:fdso::PointHessian::PtStatus
B	src/FullSystem/HessianBlocks.h	/^	float B[256];$/;"	m	struct:fdso::CalibHessian
Binv	src/FullSystem/HessianBlocks.h	/^	float Binv[256];$/;"	m	struct:fdso::CalibHessian
CalibHessian	src/FullSystem/HessianBlocks.h	/^	inline CalibHessian()$/;"	f	struct:fdso::CalibHessian
CalibHessian	src/FullSystem/HessianBlocks.h	/^struct CalibHessian$/;"	s	namespace:fdso
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/FullSystem/HessianBlocks.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:fdso::CalibHessian
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/FullSystem/HessianBlocks.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:fdso::FrameFramePrecalc
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/FullSystem/HessianBlocks.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:fdso::FrameHessian
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/FullSystem/HessianBlocks.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:fdso::PointHessian
FrameFramePrecalc	src/FullSystem/HessianBlocks.h	/^    inline FrameFramePrecalc() {host=target=0;}$/;"	f	struct:fdso::FrameFramePrecalc
FrameFramePrecalc	src/FullSystem/HessianBlocks.h	/^struct FrameFramePrecalc$/;"	s	namespace:fdso
FrameHessian	src/FullSystem/HessianBlocks.h	/^	inline FrameHessian()$/;"	f	struct:fdso::FrameHessian
FrameHessian	src/FullSystem/HessianBlocks.h	/^struct FrameHessian$/;"	s	namespace:fdso
INACTIVE	src/FullSystem/HessianBlocks.h	/^	enum PtStatus {ACTIVE=0, INACTIVE, OUTLIER, OOB, MARGINALIZED};$/;"	e	enum:fdso::PointHessian::PtStatus
MARGINALIZED	src/FullSystem/HessianBlocks.h	/^	enum PtStatus {ACTIVE=0, INACTIVE, OUTLIER, OOB, MARGINALIZED};$/;"	e	enum:fdso::PointHessian::PtStatus
MAX_ACTIVE_FRAMES	src/FullSystem/HessianBlocks.h	26;"	d
OOB	src/FullSystem/HessianBlocks.h	/^	enum PtStatus {ACTIVE=0, INACTIVE, OUTLIER, OOB, MARGINALIZED};$/;"	e	enum:fdso::PointHessian::PtStatus
OUTLIER	src/FullSystem/HessianBlocks.h	/^	enum PtStatus {ACTIVE=0, INACTIVE, OUTLIER, OOB, MARGINALIZED};$/;"	e	enum:fdso::PointHessian::PtStatus
PRE_KRKiTll	src/FullSystem/HessianBlocks.h	/^	Mat33f PRE_KRKiTll;$/;"	m	struct:fdso::FrameFramePrecalc
PRE_KtTll	src/FullSystem/HessianBlocks.h	/^	Vec3f PRE_KtTll;$/;"	m	struct:fdso::FrameFramePrecalc
PRE_RKiTll	src/FullSystem/HessianBlocks.h	/^	Mat33f PRE_RKiTll;$/;"	m	struct:fdso::FrameFramePrecalc
PRE_RTll	src/FullSystem/HessianBlocks.h	/^	Mat33f PRE_RTll;$/;"	m	struct:fdso::FrameFramePrecalc
PRE_RTll_0	src/FullSystem/HessianBlocks.h	/^	Mat33f PRE_RTll_0;$/;"	m	struct:fdso::FrameFramePrecalc
PRE_aff_mode	src/FullSystem/HessianBlocks.h	/^	Vec2f PRE_aff_mode;$/;"	m	struct:fdso::FrameFramePrecalc
PRE_b0_mode	src/FullSystem/HessianBlocks.h	/^	float PRE_b0_mode;$/;"	m	struct:fdso::FrameFramePrecalc
PRE_camToWorld	src/FullSystem/HessianBlocks.h	/^	SE3 PRE_camToWorld;$/;"	m	struct:fdso::FrameHessian
PRE_tTll	src/FullSystem/HessianBlocks.h	/^	Vec3f PRE_tTll;$/;"	m	struct:fdso::FrameFramePrecalc
PRE_tTll_0	src/FullSystem/HessianBlocks.h	/^	Vec3f PRE_tTll_0;$/;"	m	struct:fdso::FrameFramePrecalc
PRE_worldToCam	src/FullSystem/HessianBlocks.h	/^	SE3 PRE_worldToCam;$/;"	m	struct:fdso::FrameHessian
PointHessian	src/FullSystem/HessianBlocks.h	/^struct PointHessian$/;"	s	namespace:fdso
PtStatus	src/FullSystem/HessianBlocks.h	/^	enum PtStatus {ACTIVE=0, INACTIVE, OUTLIER, OOB, MARGINALIZED};$/;"	g	struct:fdso::PointHessian
SCALE_A	src/FullSystem/HessianBlocks.h	64;"	d
SCALE_A_INVERSE	src/FullSystem/HessianBlocks.h	73;"	d
SCALE_B	src/FullSystem/HessianBlocks.h	65;"	d
SCALE_B_INVERSE	src/FullSystem/HessianBlocks.h	74;"	d
SCALE_C	src/FullSystem/HessianBlocks.h	62;"	d
SCALE_C_INVERSE	src/FullSystem/HessianBlocks.h	71;"	d
SCALE_F	src/FullSystem/HessianBlocks.h	61;"	d
SCALE_F_INVERSE	src/FullSystem/HessianBlocks.h	70;"	d
SCALE_IDEPTH	src/FullSystem/HessianBlocks.h	58;"	d
SCALE_IDEPTH_INVERSE	src/FullSystem/HessianBlocks.h	67;"	d
SCALE_W	src/FullSystem/HessianBlocks.h	63;"	d
SCALE_W_INVERSE	src/FullSystem/HessianBlocks.h	72;"	d
SCALE_XI_ROT	src/FullSystem/HessianBlocks.h	59;"	d
SCALE_XI_ROT_INVERSE	src/FullSystem/HessianBlocks.h	68;"	d
SCALE_XI_TRANS	src/FullSystem/HessianBlocks.h	60;"	d
SCALE_XI_TRANS_INVERSE	src/FullSystem/HessianBlocks.h	69;"	d
ab_exposure	src/FullSystem/HessianBlocks.h	/^	float ab_exposure;$/;"	m	struct:fdso::FrameHessian
absSquaredGrad	src/FullSystem/HessianBlocks.h	/^	float* absSquaredGrad[PYR_LEVELS];  \/\/ only used for pixel select (histograms etc.). no NAN.$/;"	m	struct:fdso::FrameHessian
affFromTo	src/FullSystem/HessianBlocks.h	/^inline Vec2 affFromTo(Vec2 from, Vec2 to)	\/\/ contains affine parameters as XtoWorld.$/;"	f	namespace:fdso
aff_g2l	src/FullSystem/HessianBlocks.h	/^    	inline AffLight aff_g2l() const {return AffLight(get_state_scaled()[6], get_state_scaled()[7]);}$/;"	f	struct:fdso::FrameHessian
aff_g2l_0	src/FullSystem/HessianBlocks.h	/^    	inline AffLight aff_g2l_0() const {return AffLight(get_state_zero()[6]*SCALE_A, get_state_zero()[7]*SCALE_B);}$/;"	f	struct:fdso::FrameHessian
color	src/FullSystem/HessianBlocks.h	/^	float color[MAX_RES_PER_POINT];			\/\/ colors in host frame$/;"	m	struct:fdso::PointHessian
cxl	src/FullSystem/HessianBlocks.h	/^    inline float& cxl() {return value_scaledf[2];}$/;"	f	struct:fdso::CalibHessian
cxli	src/FullSystem/HessianBlocks.h	/^    inline float& cxli() {return value_scaledi[2];}$/;"	f	struct:fdso::CalibHessian
cyl	src/FullSystem/HessianBlocks.h	/^    inline float& cyl() {return value_scaledf[3];}$/;"	f	struct:fdso::CalibHessian
cyli	src/FullSystem/HessianBlocks.h	/^    inline float& cyli() {return value_scaledi[3];}$/;"	f	struct:fdso::CalibHessian
dI	src/FullSystem/HessianBlocks.h	/^	Eigen::Vector3f* dI;				 \/\/ trace, fine tracking. Used for direction select (not for gradient histograms etc.)$/;"	m	struct:fdso::FrameHessian
dIp	src/FullSystem/HessianBlocks.h	/^	Eigen::Vector3f* dIp[PYR_LEVELS];	 \/\/ coarse tracking \/ coarse initializer. NAN in [0] only.$/;"	m	struct:fdso::FrameHessian
debugImage	src/FullSystem/HessianBlocks.h	/^	MinimalImageB3* debugImage;$/;"	m	struct:fdso::FrameHessian
distanceLL	src/FullSystem/HessianBlocks.h	/^	float distanceLL;$/;"	m	struct:fdso::FrameFramePrecalc
efFrame	src/FullSystem/HessianBlocks.h	/^	EFFrame* efFrame;$/;"	m	struct:fdso::FrameHessian
efPoint	src/FullSystem/HessianBlocks.h	/^	EFPoint* efPoint;$/;"	m	struct:fdso::PointHessian
energyTH	src/FullSystem/HessianBlocks.h	/^	float energyTH;$/;"	m	struct:fdso::PointHessian
fdso	src/FullSystem/HessianBlocks.h	/^namespace fdso$/;"	n
flaggedForMarginalization	src/FullSystem/HessianBlocks.h	/^	bool flaggedForMarginalization;$/;"	m	struct:fdso::FrameHessian
frameEnergyTH	src/FullSystem/HessianBlocks.h	/^	float frameEnergyTH;	\/\/ set dynamically depending on tracking residual$/;"	m	struct:fdso::FrameHessian
frameID	src/FullSystem/HessianBlocks.h	/^	int frameID;						\/\/ incremental ID for keyframes only!$/;"	m	struct:fdso::FrameHessian
fxl	src/FullSystem/HessianBlocks.h	/^    inline float& fxl() {return value_scaledf[0];}$/;"	f	struct:fdso::CalibHessian
fxli	src/FullSystem/HessianBlocks.h	/^    inline float& fxli() {return value_scaledi[0];}$/;"	f	struct:fdso::CalibHessian
fyl	src/FullSystem/HessianBlocks.h	/^    inline float& fyl() {return value_scaledf[1];}$/;"	f	struct:fdso::CalibHessian
fyli	src/FullSystem/HessianBlocks.h	/^    inline float& fyli() {return value_scaledi[1];}$/;"	f	struct:fdso::CalibHessian
getBGradOnly	src/FullSystem/HessianBlocks.h	/^	EIGEN_STRONG_INLINE float getBGradOnly(float color)$/;"	f	struct:fdso::CalibHessian
getBInvGradOnly	src/FullSystem/HessianBlocks.h	/^	EIGEN_STRONG_INLINE float getBInvGradOnly(float color)$/;"	f	struct:fdso::CalibHessian
getPrior	src/FullSystem/HessianBlocks.h	/^	inline Vec10 getPrior()$/;"	f	struct:fdso::FrameHessian
getPriorZero	src/FullSystem/HessianBlocks.h	/^	inline Vec10 getPriorZero()$/;"	f	struct:fdso::FrameHessian
get_state	src/FullSystem/HessianBlocks.h	/^    EIGEN_STRONG_INLINE const Vec10 &get_state() const {return state;}$/;"	f	struct:fdso::FrameHessian
get_state_minus_stateZero	src/FullSystem/HessianBlocks.h	/^    EIGEN_STRONG_INLINE const Vec10 get_state_minus_stateZero() const {return get_state() - get_state_zero();}$/;"	f	struct:fdso::FrameHessian
get_state_scaled	src/FullSystem/HessianBlocks.h	/^    EIGEN_STRONG_INLINE const Vec10 &get_state_scaled() const {return state_scaled;}$/;"	f	struct:fdso::FrameHessian
get_state_zero	src/FullSystem/HessianBlocks.h	/^    EIGEN_STRONG_INLINE const Vec10 &get_state_zero() const {return state_zero;}$/;"	f	struct:fdso::FrameHessian
get_worldToCam_evalPT	src/FullSystem/HessianBlocks.h	/^    EIGEN_STRONG_INLINE const SE3 &get_worldToCam_evalPT() const {return worldToCam_evalPT;}$/;"	f	struct:fdso::FrameHessian
hasDepthPrior	src/FullSystem/HessianBlocks.h	/^	bool hasDepthPrior;$/;"	m	struct:fdso::PointHessian
host	src/FullSystem/HessianBlocks.h	/^	FrameHessian* host;	\/\/ defines row$/;"	m	struct:fdso::FrameFramePrecalc
host	src/FullSystem/HessianBlocks.h	/^	FrameHessian* host;$/;"	m	struct:fdso::PointHessian
idepth	src/FullSystem/HessianBlocks.h	/^	float idepth;$/;"	m	struct:fdso::PointHessian
idepth_backup	src/FullSystem/HessianBlocks.h	/^	float idepth_backup;$/;"	m	struct:fdso::PointHessian
idepth_hessian	src/FullSystem/HessianBlocks.h	/^	float idepth_hessian;$/;"	m	struct:fdso::PointHessian
idepth_scaled	src/FullSystem/HessianBlocks.h	/^	float idepth_scaled;$/;"	m	struct:fdso::PointHessian
idepth_zero	src/FullSystem/HessianBlocks.h	/^	float idepth_zero;$/;"	m	struct:fdso::PointHessian
idepth_zero_scaled	src/FullSystem/HessianBlocks.h	/^	float idepth_zero_scaled;$/;"	m	struct:fdso::PointHessian
idx	src/FullSystem/HessianBlocks.h	/^	int idx;$/;"	m	struct:fdso::FrameHessian
idx	src/FullSystem/HessianBlocks.h	/^	int idx;$/;"	m	struct:fdso::PointHessian
immaturePoints	src/FullSystem/HessianBlocks.h	/^	std::vector<ImmaturePoint*> immaturePoints;		\/\/ contains all OUTLIER points (= discarded.).$/;"	m	struct:fdso::FrameHessian
instanceCounter	src/FullSystem/HessianBlocks.h	/^	static int instanceCounter;$/;"	m	struct:fdso::CalibHessian
instanceCounter	src/FullSystem/HessianBlocks.h	/^	static int instanceCounter;$/;"	m	struct:fdso::FrameFramePrecalc
instanceCounter	src/FullSystem/HessianBlocks.h	/^	static int instanceCounter;$/;"	m	struct:fdso::FrameHessian
instanceCounter	src/FullSystem/HessianBlocks.h	/^	static int instanceCounter;$/;"	m	struct:fdso::PointHessian
isInlierNew	src/FullSystem/HessianBlocks.h	/^	inline bool isInlierNew()$/;"	f	struct:fdso::PointHessian
isOOB	src/FullSystem/HessianBlocks.h	/^	inline bool isOOB(const std::vector<FrameHessian*>& toKeep, const std::vector<FrameHessian*>& toMarg) const$/;"	f	struct:fdso::PointHessian
lastResiduals	src/FullSystem/HessianBlocks.h	/^	std::pair<PointFrameResidual*, ResState> lastResiduals[2]; 	\/\/ contains information about residuals to the last two (!) frames. ([0] = latest, [1] = the one before).$/;"	m	struct:fdso::PointHessian
maxRelBaseline	src/FullSystem/HessianBlocks.h	/^	float maxRelBaseline;$/;"	m	struct:fdso::PointHessian
my_type	src/FullSystem/HessianBlocks.h	/^	float my_type;$/;"	m	struct:fdso::PointHessian
nullspaces_affine	src/FullSystem/HessianBlocks.h	/^	Mat42 nullspaces_affine;$/;"	m	struct:fdso::FrameHessian
nullspaces_pose	src/FullSystem/HessianBlocks.h	/^	Mat66 nullspaces_pose;$/;"	m	struct:fdso::FrameHessian
nullspaces_scale	src/FullSystem/HessianBlocks.h	/^	Vec6 nullspaces_scale;$/;"	m	struct:fdso::FrameHessian
nullspaces_scale	src/FullSystem/HessianBlocks.h	/^	float nullspaces_scale;$/;"	m	struct:fdso::PointHessian
numGoodResiduals	src/FullSystem/HessianBlocks.h	/^	int numGoodResiduals;$/;"	m	struct:fdso::PointHessian
pointHessians	src/FullSystem/HessianBlocks.h	/^	std::vector<PointHessian*> pointHessians;				\/\/ contains all ACTIVE points.$/;"	m	struct:fdso::FrameHessian
pointHessiansMarginalized	src/FullSystem/HessianBlocks.h	/^	std::vector<PointHessian*> pointHessiansMarginalized;	\/\/ contains all MARGINALIZED points (= fully marginalized, usually because point went OOB.)$/;"	m	struct:fdso::FrameHessian
pointHessiansOut	src/FullSystem/HessianBlocks.h	/^	std::vector<PointHessian*> pointHessiansOut;		\/\/ contains all OUTLIER points (= discarded.).$/;"	m	struct:fdso::FrameHessian
potentialPointHessians	src/FullSystem/HessianBlocks.h	/^	std::vector<PointHessian*> potentialPointHessians;$/;"	m	struct:fdso::FrameHessian
residuals	src/FullSystem/HessianBlocks.h	/^	std::vector<PointFrameResidual*> residuals;					\/\/ only contains good residuals (not OOB and not OUTLIER). Arbitrary order.$/;"	m	struct:fdso::PointHessian
setEvalPT	src/FullSystem/HessianBlocks.h	/^	inline void setEvalPT(SE3 worldToCam_evalPT, Vec10 state)$/;"	f	struct:fdso::FrameHessian
setEvalPT_scaled	src/FullSystem/HessianBlocks.h	/^	inline void setEvalPT_scaled(SE3 worldToCam_evalPT, AffLight aff_g2l)$/;"	f	struct:fdso::FrameHessian
setIdepth	src/FullSystem/HessianBlocks.h	/^	inline void setIdepth(float idepth) {$/;"	f	struct:fdso::PointHessian
setIdepthScaled	src/FullSystem/HessianBlocks.h	/^	inline void setIdepthScaled(float idepth_scaled) {$/;"	f	struct:fdso::PointHessian
setIdepthZero	src/FullSystem/HessianBlocks.h	/^	inline void setIdepthZero(float idepth) {$/;"	f	struct:fdso::PointHessian
setPointStatus	src/FullSystem/HessianBlocks.h	/^    inline void setPointStatus(PtStatus s) {status=s;}$/;"	f	struct:fdso::PointHessian
setState	src/FullSystem/HessianBlocks.h	/^	inline void setState(Vec10 state)$/;"	f	struct:fdso::FrameHessian
setStateScaled	src/FullSystem/HessianBlocks.h	/^	inline void setStateScaled(Vec10 state_scaled)$/;"	f	struct:fdso::FrameHessian
setValue	src/FullSystem/HessianBlocks.h	/^	inline void setValue(VecC value)$/;"	f	struct:fdso::CalibHessian
setValueScaled	src/FullSystem/HessianBlocks.h	/^	inline void setValueScaled(VecC value_scaled)$/;"	f	struct:fdso::CalibHessian
shell	src/FullSystem/HessianBlocks.h	/^	FrameShell* shell;$/;"	m	struct:fdso::FrameHessian
state	src/FullSystem/HessianBlocks.h	/^	Vec10 state;	\/\/ [0-5: worldToCam-leftEps. 6-7: a,b]$/;"	m	struct:fdso::FrameHessian
state_backup	src/FullSystem/HessianBlocks.h	/^	Vec10 state_backup;$/;"	m	struct:fdso::FrameHessian
state_scaled	src/FullSystem/HessianBlocks.h	/^	Vec10 state_scaled;$/;"	m	struct:fdso::FrameHessian
state_zero	src/FullSystem/HessianBlocks.h	/^	Vec10 state_zero;$/;"	m	struct:fdso::FrameHessian
status	src/FullSystem/HessianBlocks.h	/^	PtStatus status;$/;"	m	struct:fdso::PointHessian
step	src/FullSystem/HessianBlocks.h	/^	Vec10 step;$/;"	m	struct:fdso::FrameHessian
step	src/FullSystem/HessianBlocks.h	/^	VecC step;$/;"	m	struct:fdso::CalibHessian
step	src/FullSystem/HessianBlocks.h	/^	float step;$/;"	m	struct:fdso::PointHessian
step_backup	src/FullSystem/HessianBlocks.h	/^	Vec10 step_backup;$/;"	m	struct:fdso::FrameHessian
step_backup	src/FullSystem/HessianBlocks.h	/^	VecC step_backup;$/;"	m	struct:fdso::CalibHessian
step_backup	src/FullSystem/HessianBlocks.h	/^	float step_backup;$/;"	m	struct:fdso::PointHessian
target	src/FullSystem/HessianBlocks.h	/^	FrameHessian* target;	\/\/ defines column$/;"	m	struct:fdso::FrameFramePrecalc
targetPrecalc	src/FullSystem/HessianBlocks.h	/^	std::vector<FrameFramePrecalc,Eigen::aligned_allocator<FrameFramePrecalc>> targetPrecalc;$/;"	m	struct:fdso::FrameHessian
u	src/FullSystem/HessianBlocks.h	/^	float u,v;$/;"	m	struct:fdso::PointHessian
v	src/FullSystem/HessianBlocks.h	/^	float u,v;$/;"	m	struct:fdso::PointHessian
value	src/FullSystem/HessianBlocks.h	/^	VecC value;$/;"	m	struct:fdso::CalibHessian
value_backup	src/FullSystem/HessianBlocks.h	/^	VecC value_backup;$/;"	m	struct:fdso::CalibHessian
value_minus_value_zero	src/FullSystem/HessianBlocks.h	/^	VecC value_minus_value_zero;$/;"	m	struct:fdso::CalibHessian
value_scaled	src/FullSystem/HessianBlocks.h	/^	VecC value_scaled;$/;"	m	struct:fdso::CalibHessian
value_scaledf	src/FullSystem/HessianBlocks.h	/^	VecCf value_scaledf;$/;"	m	struct:fdso::CalibHessian
value_scaledi	src/FullSystem/HessianBlocks.h	/^	VecCf value_scaledi;$/;"	m	struct:fdso::CalibHessian
value_zero	src/FullSystem/HessianBlocks.h	/^	VecC value_zero;$/;"	m	struct:fdso::CalibHessian
w2c_leftEps	src/FullSystem/HessianBlocks.h	/^    	inline Vec6 w2c_leftEps() const {return get_state_scaled().head<6>();}$/;"	f	struct:fdso::FrameHessian
weights	src/FullSystem/HessianBlocks.h	/^	float weights[MAX_RES_PER_POINT];		\/\/ host-weights for respective residuals.$/;"	m	struct:fdso::PointHessian
worldToCam_evalPT	src/FullSystem/HessianBlocks.h	/^	SE3 worldToCam_evalPT;$/;"	m	struct:fdso::FrameHessian
~CalibHessian	src/FullSystem/HessianBlocks.h	/^    	inline ~CalibHessian() {instanceCounter--;}$/;"	f	struct:fdso::CalibHessian
~FrameFramePrecalc	src/FullSystem/HessianBlocks.h	/^    inline ~FrameFramePrecalc() {}$/;"	f	struct:fdso::FrameFramePrecalc
~FrameHessian	src/FullSystem/HessianBlocks.h	/^	inline ~FrameHessian()$/;"	f	struct:fdso::FrameHessian
~PointHessian	src/FullSystem/HessianBlocks.h	/^    inline ~PointHessian() {assert(efPoint==0); release(); instanceCounter--;}$/;"	f	struct:fdso::PointHessian
ImmaturePoint	src/FullSystem/ImmaturePoint.cpp	/^ImmaturePoint::ImmaturePoint(float u_, float v_, FrameHessian* host_, CalibHessian* HCalib)$/;"	f	class:fdso::ImmaturePoint
ImmaturePoint	src/FullSystem/ImmaturePoint.cpp	/^ImmaturePoint::ImmaturePoint(int u_, int v_, FrameHessian* host_, float type, CalibHessian* HCalib)$/;"	f	class:fdso::ImmaturePoint
calcResidual	src/FullSystem/ImmaturePoint.cpp	/^float ImmaturePoint::calcResidual($/;"	f	class:fdso::ImmaturePoint
fdso	src/FullSystem/ImmaturePoint.cpp	/^namespace fdso$/;"	n	file:
getdPixdd	src/FullSystem/ImmaturePoint.cpp	/^float ImmaturePoint::getdPixdd($/;"	f	class:fdso::ImmaturePoint
linearizeResidual	src/FullSystem/ImmaturePoint.cpp	/^double ImmaturePoint::linearizeResidual($/;"	f	class:fdso::ImmaturePoint
traceOn	src/FullSystem/ImmaturePoint.cpp	/^ImmaturePointStatus ImmaturePoint::traceOn(FrameHessian* frame, Mat33f hostToFrame_KRKi, Vec3f hostToFrame_Kt, Vec2f hostToFrame_affine, CalibHessian* HCalib, bool debugPrint)$/;"	f	class:fdso::ImmaturePoint
traceStereo	src/FullSystem/ImmaturePoint.cpp	/^ImmaturePointStatus ImmaturePoint::traceStereo(FrameHessian* frame, Mat33f K, bool mode_right)$/;"	f	class:fdso::ImmaturePoint
~ImmaturePoint	src/FullSystem/ImmaturePoint.cpp	/^ImmaturePoint::~ImmaturePoint()$/;"	f	class:fdso::ImmaturePoint
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/FullSystem/ImmaturePoint.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::ImmaturePoint
IPS_BADCONDITION	src/FullSystem/ImmaturePoint.h	/^	IPS_BADCONDITION,			\/\/ not traced because of bad condition.$/;"	e	enum:fdso::ImmaturePointStatus
IPS_GOOD	src/FullSystem/ImmaturePoint.h	/^	IPS_GOOD=0,					\/\/ traced well and good$/;"	e	enum:fdso::ImmaturePointStatus
IPS_OOB	src/FullSystem/ImmaturePoint.h	/^	IPS_OOB,					\/\/ OOB: end tracking & marginalize!$/;"	e	enum:fdso::ImmaturePointStatus
IPS_OUTLIER	src/FullSystem/ImmaturePoint.h	/^	IPS_OUTLIER,				\/\/ energy too high: if happens again: outlier!$/;"	e	enum:fdso::ImmaturePointStatus
IPS_SKIPPED	src/FullSystem/ImmaturePoint.h	/^	IPS_SKIPPED,				\/\/ traced well and good (but not actually traced).$/;"	e	enum:fdso::ImmaturePointStatus
IPS_UNINITIALIZED	src/FullSystem/ImmaturePoint.h	/^	IPS_UNINITIALIZED};			\/\/ not even traced once.$/;"	e	enum:fdso::ImmaturePointStatus
ImmaturePoint	src/FullSystem/ImmaturePoint.h	/^class ImmaturePoint$/;"	c	namespace:fdso
ImmaturePointStatus	src/FullSystem/ImmaturePoint.h	/^enum ImmaturePointStatus {$/;"	g	namespace:fdso
ImmaturePointTemporaryResidual	src/FullSystem/ImmaturePoint.h	/^struct ImmaturePointTemporaryResidual$/;"	s	namespace:fdso
color	src/FullSystem/ImmaturePoint.h	/^	float color[MAX_RES_PER_POINT];$/;"	m	class:fdso::ImmaturePoint
energyTH	src/FullSystem/ImmaturePoint.h	/^	float energyTH;$/;"	m	class:fdso::ImmaturePoint
fdso	src/FullSystem/ImmaturePoint.h	/^namespace fdso$/;"	n
gradH	src/FullSystem/ImmaturePoint.h	/^	Mat22f gradH;$/;"	m	class:fdso::ImmaturePoint
gradH_eig	src/FullSystem/ImmaturePoint.h	/^	Mat22f gradH_eig;$/;"	m	class:fdso::ImmaturePoint
gradH_ev	src/FullSystem/ImmaturePoint.h	/^	Vec2f gradH_ev;$/;"	m	class:fdso::ImmaturePoint
host	src/FullSystem/ImmaturePoint.h	/^	FrameHessian* host;$/;"	m	class:fdso::ImmaturePoint
idepth_max	src/FullSystem/ImmaturePoint.h	/^	float idepth_max;$/;"	m	class:fdso::ImmaturePoint
idepth_max_stereo	src/FullSystem/ImmaturePoint.h	/^	float idepth_max_stereo;  \/\/ idepth_max used to do static matching$/;"	m	class:fdso::ImmaturePoint
idepth_min	src/FullSystem/ImmaturePoint.h	/^	float idepth_min;$/;"	m	class:fdso::ImmaturePoint
idepth_min_stereo	src/FullSystem/ImmaturePoint.h	/^	float idepth_min_stereo;  \/\/ idepth_min used to do static matching$/;"	m	class:fdso::ImmaturePoint
idepth_stereo	src/FullSystem/ImmaturePoint.h	/^	float idepth_stereo;$/;"	m	class:fdso::ImmaturePoint
idxInImmaturePoints	src/FullSystem/ImmaturePoint.h	/^	int idxInImmaturePoints;$/;"	m	class:fdso::ImmaturePoint
lastTracePixelInterval	src/FullSystem/ImmaturePoint.h	/^	float lastTracePixelInterval;$/;"	m	class:fdso::ImmaturePoint
lastTraceStatus	src/FullSystem/ImmaturePoint.h	/^	ImmaturePointStatus lastTraceStatus;$/;"	m	class:fdso::ImmaturePoint
lastTraceUV	src/FullSystem/ImmaturePoint.h	/^	Vec2f lastTraceUV;$/;"	m	class:fdso::ImmaturePoint
my_type	src/FullSystem/ImmaturePoint.h	/^	float my_type;$/;"	m	class:fdso::ImmaturePoint
quality	src/FullSystem/ImmaturePoint.h	/^	float quality;$/;"	m	class:fdso::ImmaturePoint
state_NewEnergy	src/FullSystem/ImmaturePoint.h	/^	double state_NewEnergy;$/;"	m	struct:fdso::ImmaturePointTemporaryResidual
state_NewState	src/FullSystem/ImmaturePoint.h	/^	ResState state_NewState;$/;"	m	struct:fdso::ImmaturePointTemporaryResidual
state_energy	src/FullSystem/ImmaturePoint.h	/^	double state_energy;$/;"	m	struct:fdso::ImmaturePointTemporaryResidual
state_state	src/FullSystem/ImmaturePoint.h	/^	ResState state_state;$/;"	m	struct:fdso::ImmaturePointTemporaryResidual
target	src/FullSystem/ImmaturePoint.h	/^	FrameHessian* target;$/;"	m	struct:fdso::ImmaturePointTemporaryResidual
u	src/FullSystem/ImmaturePoint.h	/^	float u,v;$/;"	m	class:fdso::ImmaturePoint
u_stereo	src/FullSystem/ImmaturePoint.h	/^	float u_stereo, v_stereo;  \/\/ u, v used to do static stereo matching$/;"	m	class:fdso::ImmaturePoint
v	src/FullSystem/ImmaturePoint.h	/^	float u,v;$/;"	m	class:fdso::ImmaturePoint
v_stereo	src/FullSystem/ImmaturePoint.h	/^	float u_stereo, v_stereo;  \/\/ u, v used to do static stereo matching$/;"	m	class:fdso::ImmaturePoint
weights	src/FullSystem/ImmaturePoint.h	/^	float weights[MAX_RES_PER_POINT];$/;"	m	class:fdso::ImmaturePoint
toCvMat	src/FullSystem/ORB/Converter.cpp	/^cv::Mat Converter::toCvMat(const Eigen::Matrix3d &m)$/;"	f	class:Converter
toCvMat	src/FullSystem/ORB/Converter.cpp	/^cv::Mat Converter::toCvMat(const Eigen::Matrix<double,3,1> &m)$/;"	f	class:Converter
toCvMat	src/FullSystem/ORB/Converter.cpp	/^cv::Mat Converter::toCvMat(const Eigen::Matrix<double,4,4> &m)$/;"	f	class:Converter
toCvMat	src/FullSystem/ORB/Converter.cpp	/^cv::Mat Converter::toCvMat(const g2o::SE3Quat &SE3)$/;"	f	class:Converter
toCvMat	src/FullSystem/ORB/Converter.cpp	/^cv::Mat Converter::toCvMat(const g2o::Sim3 &Sim3)$/;"	f	class:Converter
toCvSE3	src/FullSystem/ORB/Converter.cpp	/^cv::Mat Converter::toCvSE3(const Eigen::Matrix<double,3,3> &R, const Eigen::Matrix<double,3,1> &t)$/;"	f	class:Converter
toDescriptorVector	src/FullSystem/ORB/Converter.cpp	/^std::vector<cv::Mat> Converter::toDescriptorVector(const cv::Mat &Descriptors)$/;"	f	class:Converter
toMatrix3d	src/FullSystem/ORB/Converter.cpp	/^Eigen::Matrix<double,3,3> Converter::toMatrix3d(const cv::Mat &cvMat3)$/;"	f	class:Converter
toQuaternion	src/FullSystem/ORB/Converter.cpp	/^std::vector<float> Converter::toQuaternion(const cv::Mat &M)$/;"	f	class:Converter
toSE3Quat	src/FullSystem/ORB/Converter.cpp	/^g2o::SE3Quat Converter::toSE3Quat(const cv::Mat &cvT)$/;"	f	class:Converter
toVector3d	src/FullSystem/ORB/Converter.cpp	/^Eigen::Matrix<double,3,1> Converter::toVector3d(const cv::Mat &cvVector)$/;"	f	class:Converter
toVector3d	src/FullSystem/ORB/Converter.cpp	/^Eigen::Matrix<double,3,1> Converter::toVector3d(const cv::Point3f &cvPoint)$/;"	f	class:Converter
CONVERTER_H	src/FullSystem/ORB/Converter.h	2;"	d
Converter	src/FullSystem/ORB/Converter.h	/^class Converter$/;"	c
ComputeKeyPointsOctTree	src/FullSystem/ORB/ORBextractor.cpp	/^void ORBextractor::ComputeKeyPointsOctTree(vector<vector<KeyPoint> >& allKeypoints)$/;"	f	class:ORBextractor
ComputeKeyPointsOld	src/FullSystem/ORB/ORBextractor.cpp	/^void ORBextractor::ComputeKeyPointsOld(std::vector<std::vector<KeyPoint> > &allKeypoints)$/;"	f	class:ORBextractor
ComputePyramid	src/FullSystem/ORB/ORBextractor.cpp	/^void ORBextractor::ComputePyramid(cv::Mat image)$/;"	f	class:ORBextractor
DistributeOctTree	src/FullSystem/ORB/ORBextractor.cpp	/^vector<cv::KeyPoint> ORBextractor::DistributeOctTree(const vector<cv::KeyPoint>& vToDistributeKeys, const int &minX,$/;"	f	class:ORBextractor
DivideNode	src/FullSystem/ORB/ORBextractor.cpp	/^void ExtractorNode::DivideNode(ExtractorNode &n1, ExtractorNode &n2, ExtractorNode &n3, ExtractorNode &n4)$/;"	f	class:ExtractorNode
EDGE_THRESHOLD	src/FullSystem/ORB/ORBextractor.cpp	/^const int EDGE_THRESHOLD = 19;$/;"	v
GET_VALUE	src/FullSystem/ORB/ORBextractor.cpp	118;"	d	file:
GET_VALUE	src/FullSystem/ORB/ORBextractor.cpp	146;"	d	file:
HALF_PATCH_SIZE	src/FullSystem/ORB/ORBextractor.cpp	/^const int HALF_PATCH_SIZE = 15;$/;"	v
IC_Angle	src/FullSystem/ORB/ORBextractor.cpp	/^static float IC_Angle(const Mat& image, Point2f pt,  const vector<int> & u_max)$/;"	f	file:
ORBextractor	src/FullSystem/ORB/ORBextractor.cpp	/^ORBextractor::ORBextractor(int _nfeatures, float _scaleFactor, int _nlevels,$/;"	f	class:ORBextractor
PATCH_SIZE	src/FullSystem/ORB/ORBextractor.cpp	/^const int PATCH_SIZE = 31;$/;"	v
bit_pattern_31_	src/FullSystem/ORB/ORBextractor.cpp	/^static int bit_pattern_31_[256*4] =$/;"	v	file:
computeDescriptors	src/FullSystem/ORB/ORBextractor.cpp	/^static void computeDescriptors(const Mat& image, vector<KeyPoint>& keypoints, Mat& descriptors,$/;"	f	file:
computeOrbDescriptor	src/FullSystem/ORB/ORBextractor.cpp	/^static void computeOrbDescriptor(const KeyPoint& kpt,$/;"	f	file:
computeOrientation	src/FullSystem/ORB/ORBextractor.cpp	/^static void computeOrientation(const Mat& image, vector<KeyPoint>& keypoints, const vector<int>& umax)$/;"	f	file:
factorPI	src/FullSystem/ORB/ORBextractor.cpp	/^const float factorPI = (float)(CV_PI\/180.f);$/;"	v
operator ()	src/FullSystem/ORB/ORBextractor.cpp	/^void ORBextractor::operator()( InputArray _image, InputArray _mask, vector<KeyPoint>& _keypoints,$/;"	f	class:ORBextractor
BL	src/FullSystem/ORB/ORBextractor.h	/^    cv::Point2i UL, UR, BL, BR;$/;"	m	class:ExtractorNode
BR	src/FullSystem/ORB/ORBextractor.h	/^    cv::Point2i UL, UR, BL, BR;$/;"	m	class:ExtractorNode
ExtractorNode	src/FullSystem/ORB/ORBextractor.h	/^    ExtractorNode():bNoMore(false){}$/;"	f	class:ExtractorNode
ExtractorNode	src/FullSystem/ORB/ORBextractor.h	/^class ExtractorNode$/;"	c
FAST_SCORE	src/FullSystem/ORB/ORBextractor.h	/^    enum {HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:ORBextractor::__anon5
GetInverseScaleFactors	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<float> inline GetInverseScaleFactors(){$/;"	f	class:ORBextractor::std
GetInverseScaleSigmaSquares	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<float> inline GetInverseScaleSigmaSquares(){$/;"	f	class:ORBextractor::std
GetLevels	src/FullSystem/ORB/ORBextractor.h	/^    int inline GetLevels(){$/;"	f	class:ORBextractor
GetScaleFactor	src/FullSystem/ORB/ORBextractor.h	/^    float inline GetScaleFactor(){$/;"	f	class:ORBextractor
GetScaleFactors	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<float> inline GetScaleFactors(){$/;"	f	class:ORBextractor::std
GetScaleSigmaSquares	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<float> inline GetScaleSigmaSquares(){$/;"	f	class:ORBextractor::std
HARRIS_SCORE	src/FullSystem/ORB/ORBextractor.h	/^    enum {HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:ORBextractor::__anon5
ORBEXTRACTOR_H	src/FullSystem/ORB/ORBextractor.h	22;"	d
ORBextractor	src/FullSystem/ORB/ORBextractor.h	/^class ORBextractor$/;"	c
UL	src/FullSystem/ORB/ORBextractor.h	/^    cv::Point2i UL, UR, BL, BR;$/;"	m	class:ExtractorNode
UR	src/FullSystem/ORB/ORBextractor.h	/^    cv::Point2i UL, UR, BL, BR;$/;"	m	class:ExtractorNode
bNoMore	src/FullSystem/ORB/ORBextractor.h	/^    bool bNoMore;$/;"	m	class:ExtractorNode
iniThFAST	src/FullSystem/ORB/ORBextractor.h	/^    int iniThFAST;$/;"	m	class:ORBextractor
lit	src/FullSystem/ORB/ORBextractor.h	/^    std::list<ExtractorNode>::iterator lit;$/;"	m	class:ExtractorNode
minThFAST	src/FullSystem/ORB/ORBextractor.h	/^    int minThFAST;$/;"	m	class:ORBextractor
mnFeaturesPerLevel	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<int> mnFeaturesPerLevel;$/;"	m	class:ORBextractor
mvImagePyramid	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<cv::Mat> mvImagePyramid;$/;"	m	class:ORBextractor
mvInvLevelSigma2	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<float> mvInvLevelSigma2;$/;"	m	class:ORBextractor
mvInvScaleFactor	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<float> mvInvScaleFactor;    $/;"	m	class:ORBextractor
mvLevelSigma2	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<float> mvLevelSigma2;$/;"	m	class:ORBextractor
mvScaleFactor	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<float> mvScaleFactor;$/;"	m	class:ORBextractor
nfeatures	src/FullSystem/ORB/ORBextractor.h	/^    int nfeatures;$/;"	m	class:ORBextractor
nlevels	src/FullSystem/ORB/ORBextractor.h	/^    int nlevels;$/;"	m	class:ORBextractor
pattern	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<cv::Point> pattern;$/;"	m	class:ORBextractor
scaleFactor	src/FullSystem/ORB/ORBextractor.h	/^    double scaleFactor;$/;"	m	class:ORBextractor
umax	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<int> umax;$/;"	m	class:ORBextractor
vKeys	src/FullSystem/ORB/ORBextractor.h	/^    std::vector<cv::KeyPoint> vKeys;$/;"	m	class:ExtractorNode
~ORBextractor	src/FullSystem/ORB/ORBextractor.h	/^    ~ORBextractor(){}$/;"	f	class:ORBextractor
ORBMATCHER_H	src/FullSystem/ORB/ORBmatcher.h	2;"	d
PoseOptimization	src/FullSystem/ORB/OptimizerPnP.cpp	/^int PoseOptimization(const cv::Mat& mTcw, const std::vector<cv::KeyPoint>& mvKeys,$/;"	f
OPTIMIZERPNP_H	src/FullSystem/ORB/OptimizerPnP.h	2;"	d
CheckInliers	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::CheckInliers()$/;"	f	class:PnPsolver
PnPsolver	src/FullSystem/ORB/PnPsolver.cpp	/^PnPsolver::PnPsolver(const Frame &F, const vector<MapPoint*> &vpMapPointMatches):$/;"	f	class:PnPsolver
Refine	src/FullSystem/ORB/PnPsolver.cpp	/^bool PnPsolver::Refine()$/;"	f	class:PnPsolver
SetRansacParameters	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::SetRansacParameters(double probability, int minInliers, int maxIterations, int minSet, float epsilon, float th2)$/;"	f	class:PnPsolver
add_correspondence	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::add_correspondence(double X, double Y, double Z, double u, double v)$/;"	f	class:PnPsolver
choose_control_points	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::choose_control_points(void)$/;"	f	class:PnPsolver
compute_A_and_b_gauss_newton	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::compute_A_and_b_gauss_newton(const double * l_6x10, const double * rho,$/;"	f	class:PnPsolver
compute_L_6x10	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::compute_L_6x10(const double * ut, double * l_6x10)$/;"	f	class:PnPsolver
compute_R_and_t	src/FullSystem/ORB/PnPsolver.cpp	/^double PnPsolver::compute_R_and_t(const double * ut, const double * betas,$/;"	f	class:PnPsolver
compute_barycentric_coordinates	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::compute_barycentric_coordinates(void)$/;"	f	class:PnPsolver
compute_ccs	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::compute_ccs(const double * betas, const double * ut)$/;"	f	class:PnPsolver
compute_pcs	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::compute_pcs(void)$/;"	f	class:PnPsolver
compute_pose	src/FullSystem/ORB/PnPsolver.cpp	/^double PnPsolver::compute_pose(double R[3][3], double t[3])$/;"	f	class:PnPsolver
compute_rho	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::compute_rho(double * rho)$/;"	f	class:PnPsolver
copy_R_and_t	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::copy_R_and_t(const double R_src[3][3], const double t_src[3],$/;"	f	class:PnPsolver
dist2	src/FullSystem/ORB/PnPsolver.cpp	/^double PnPsolver::dist2(const double * p1, const double * p2)$/;"	f	class:PnPsolver
dot	src/FullSystem/ORB/PnPsolver.cpp	/^double PnPsolver::dot(const double * v1, const double * v2)$/;"	f	class:PnPsolver
estimate_R_and_t	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::estimate_R_and_t(double R[3][3], double t[3])$/;"	f	class:PnPsolver
fill_M	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::fill_M(CvMat * M,$/;"	f	class:PnPsolver
find	src/FullSystem/ORB/PnPsolver.cpp	/^cv::Mat PnPsolver::find(vector<bool> &vbInliers, int &nInliers)$/;"	f	class:PnPsolver
find_betas_approx_1	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::find_betas_approx_1(const CvMat * L_6x10, const CvMat * Rho,$/;"	f	class:PnPsolver
find_betas_approx_2	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::find_betas_approx_2(const CvMat * L_6x10, const CvMat * Rho,$/;"	f	class:PnPsolver
find_betas_approx_3	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::find_betas_approx_3(const CvMat * L_6x10, const CvMat * Rho,$/;"	f	class:PnPsolver
gauss_newton	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::gauss_newton(const CvMat * L_6x10, const CvMat * Rho,$/;"	f	class:PnPsolver
iterate	src/FullSystem/ORB/PnPsolver.cpp	/^cv::Mat PnPsolver::iterate(int nIterations, bool &bNoMore, vector<bool> &vbInliers, int &nInliers)$/;"	f	class:PnPsolver
mat_to_quat	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::mat_to_quat(const double R[3][3], double q[4])$/;"	f	class:PnPsolver
print_pose	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::print_pose(const double R[3][3], const double t[3])$/;"	f	class:PnPsolver
qr_solve	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::qr_solve(CvMat * A, CvMat * b, CvMat * X)$/;"	f	class:PnPsolver
relative_error	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::relative_error(double & rot_err, double & transl_err,$/;"	f	class:PnPsolver
reprojection_error	src/FullSystem/ORB/PnPsolver.cpp	/^double PnPsolver::reprojection_error(const double R[3][3], const double t[3])$/;"	f	class:PnPsolver
reset_correspondences	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::reset_correspondences(void)$/;"	f	class:PnPsolver
set_maximum_number_of_correspondences	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::set_maximum_number_of_correspondences(int n)$/;"	f	class:PnPsolver
solve_for_sign	src/FullSystem/ORB/PnPsolver.cpp	/^void PnPsolver::solve_for_sign(void)$/;"	f	class:PnPsolver
~PnPsolver	src/FullSystem/ORB/PnPsolver.cpp	/^PnPsolver::~PnPsolver()$/;"	f	class:PnPsolver
N	src/FullSystem/ORB/PnPsolver.h	/^  int N;$/;"	m	class:PnPsolver
PNPSOLVER_H	src/FullSystem/ORB/PnPsolver.h	2;"	d
PnPsolver	src/FullSystem/ORB/PnPsolver.h	/^class PnPsolver {$/;"	c
alphas	src/FullSystem/ORB/PnPsolver.h	/^  double * pws, * us, * alphas, * pcs;$/;"	m	class:PnPsolver
ccs	src/FullSystem/ORB/PnPsolver.h	/^  double cws[4][3], ccs[4][3];$/;"	m	class:PnPsolver
cws	src/FullSystem/ORB/PnPsolver.h	/^  double cws[4][3], ccs[4][3];$/;"	m	class:PnPsolver
cws_determinant	src/FullSystem/ORB/PnPsolver.h	/^  double cws_determinant;$/;"	m	class:PnPsolver
fu	src/FullSystem/ORB/PnPsolver.h	/^  double uc, vc, fu, fv;$/;"	m	class:PnPsolver
fv	src/FullSystem/ORB/PnPsolver.h	/^  double uc, vc, fu, fv;$/;"	m	class:PnPsolver
mBestTcw	src/FullSystem/ORB/PnPsolver.h	/^  cv::Mat mBestTcw;$/;"	m	class:PnPsolver
mRansacEpsilon	src/FullSystem/ORB/PnPsolver.h	/^  float mRansacEpsilon;$/;"	m	class:PnPsolver
mRansacMaxIts	src/FullSystem/ORB/PnPsolver.h	/^  int mRansacMaxIts;$/;"	m	class:PnPsolver
mRansacMinInliers	src/FullSystem/ORB/PnPsolver.h	/^  int mRansacMinInliers;$/;"	m	class:PnPsolver
mRansacMinSet	src/FullSystem/ORB/PnPsolver.h	/^  int mRansacMinSet;$/;"	m	class:PnPsolver
mRansacProb	src/FullSystem/ORB/PnPsolver.h	/^  double mRansacProb;$/;"	m	class:PnPsolver
mRansacTh	src/FullSystem/ORB/PnPsolver.h	/^  float mRansacTh;$/;"	m	class:PnPsolver
mRefinedTcw	src/FullSystem/ORB/PnPsolver.h	/^  cv::Mat mRefinedTcw;$/;"	m	class:PnPsolver
mRi	src/FullSystem/ORB/PnPsolver.h	/^  double mRi[3][3];$/;"	m	class:PnPsolver
mTcwi	src/FullSystem/ORB/PnPsolver.h	/^  cv::Mat mTcwi;$/;"	m	class:PnPsolver
maximum_number_of_correspondences	src/FullSystem/ORB/PnPsolver.h	/^  int maximum_number_of_correspondences;$/;"	m	class:PnPsolver
mnBestInliers	src/FullSystem/ORB/PnPsolver.h	/^  int mnBestInliers;$/;"	m	class:PnPsolver
mnInliersi	src/FullSystem/ORB/PnPsolver.h	/^  int mnInliersi;$/;"	m	class:PnPsolver
mnIterations	src/FullSystem/ORB/PnPsolver.h	/^  int mnIterations;$/;"	m	class:PnPsolver
mnRefinedInliers	src/FullSystem/ORB/PnPsolver.h	/^  int mnRefinedInliers;$/;"	m	class:PnPsolver
mti	src/FullSystem/ORB/PnPsolver.h	/^  double mti[3];$/;"	m	class:PnPsolver
mvAllIndices	src/FullSystem/ORB/PnPsolver.h	/^  vector<size_t> mvAllIndices;$/;"	m	class:PnPsolver
mvKeyPointIndices	src/FullSystem/ORB/PnPsolver.h	/^  vector<size_t> mvKeyPointIndices;$/;"	m	class:PnPsolver
mvMaxError	src/FullSystem/ORB/PnPsolver.h	/^  vector<float> mvMaxError;$/;"	m	class:PnPsolver
mvP2D	src/FullSystem/ORB/PnPsolver.h	/^  vector<cv::Point2f> mvP2D;$/;"	m	class:PnPsolver
mvP3Dw	src/FullSystem/ORB/PnPsolver.h	/^  vector<cv::Point3f> mvP3Dw;$/;"	m	class:PnPsolver
mvSigma2	src/FullSystem/ORB/PnPsolver.h	/^  vector<float> mvSigma2;$/;"	m	class:PnPsolver
mvbBestInliers	src/FullSystem/ORB/PnPsolver.h	/^  vector<bool> mvbBestInliers;$/;"	m	class:PnPsolver
mvbInliersi	src/FullSystem/ORB/PnPsolver.h	/^  vector<bool> mvbInliersi;$/;"	m	class:PnPsolver
mvbRefinedInliers	src/FullSystem/ORB/PnPsolver.h	/^  vector<bool> mvbRefinedInliers;$/;"	m	class:PnPsolver
mvpMapPointMatches	src/FullSystem/ORB/PnPsolver.h	/^  vector<MapPoint*> mvpMapPointMatches;$/;"	m	class:PnPsolver
number_of_correspondences	src/FullSystem/ORB/PnPsolver.h	/^  int number_of_correspondences;$/;"	m	class:PnPsolver
pcs	src/FullSystem/ORB/PnPsolver.h	/^  double * pws, * us, * alphas, * pcs;$/;"	m	class:PnPsolver
pws	src/FullSystem/ORB/PnPsolver.h	/^  double * pws, * us, * alphas, * pcs;$/;"	m	class:PnPsolver
uc	src/FullSystem/ORB/PnPsolver.h	/^  double uc, vc, fu, fv;$/;"	m	class:PnPsolver
us	src/FullSystem/ORB/PnPsolver.h	/^  double * pws, * us, * alphas, * pcs;$/;"	m	class:PnPsolver
vc	src/FullSystem/ORB/PnPsolver.h	/^  double uc, vc, fu, fv;$/;"	m	class:PnPsolver
fdso	src/FullSystem/PixelSelector.h	/^namespace fdso$/;"	n
gridMaxSelection	src/FullSystem/PixelSelector.h	/^inline int gridMaxSelection(Eigen::Vector3f* grads, bool* map_out, int w, int h, float THFac)$/;"	f	namespace:fdso
gridMaxSelection	src/FullSystem/PixelSelector.h	/^inline int gridMaxSelection(Eigen::Vector3f* grads, bool* map_out, int w, int h, int pot, float THFac)$/;"	f	namespace:fdso
makePixelStatus	src/FullSystem/PixelSelector.h	/^inline int makePixelStatus(Eigen::Vector3f* grads, bool* map, int w, int h, float desiredDensity, int recsLeft=5, float THFac = 1)$/;"	f	namespace:fdso
minUseGrad_pixsel	src/FullSystem/PixelSelector.h	/^const float minUseGrad_pixsel = 10;$/;"	m	namespace:fdso
PixelSelector	src/FullSystem/PixelSelector2.cpp	/^PixelSelector::PixelSelector(int w, int h)$/;"	f	class:fdso::PixelSelector
computeHistQuantil	src/FullSystem/PixelSelector2.cpp	/^int computeHistQuantil(int* hist, float below)$/;"	f	namespace:fdso
fdso	src/FullSystem/PixelSelector2.cpp	/^namespace fdso$/;"	n	file:
makeHists	src/FullSystem/PixelSelector2.cpp	/^void PixelSelector::makeHists(const FrameHessian* const fh)$/;"	f	class:fdso::PixelSelector
makeMaps	src/FullSystem/PixelSelector2.cpp	/^int PixelSelector::makeMaps($/;"	f	class:fdso::PixelSelector
select	src/FullSystem/PixelSelector2.cpp	/^Eigen::Vector3i PixelSelector::select(const FrameHessian* const fh,$/;"	f	class:fdso::PixelSelector
~PixelSelector	src/FullSystem/PixelSelector2.cpp	/^PixelSelector::~PixelSelector()$/;"	f	class:fdso::PixelSelector
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/FullSystem/PixelSelector2.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::PixelSelector
PIXSEL_1	src/FullSystem/PixelSelector2.h	/^enum PixelSelectorStatus {PIXSEL_VOID=0, PIXSEL_1, PIXSEL_2, PIXSEL_3};$/;"	e	enum:fdso::PixelSelectorStatus
PIXSEL_2	src/FullSystem/PixelSelector2.h	/^enum PixelSelectorStatus {PIXSEL_VOID=0, PIXSEL_1, PIXSEL_2, PIXSEL_3};$/;"	e	enum:fdso::PixelSelectorStatus
PIXSEL_3	src/FullSystem/PixelSelector2.h	/^enum PixelSelectorStatus {PIXSEL_VOID=0, PIXSEL_1, PIXSEL_2, PIXSEL_3};$/;"	e	enum:fdso::PixelSelectorStatus
PIXSEL_VOID	src/FullSystem/PixelSelector2.h	/^enum PixelSelectorStatus {PIXSEL_VOID=0, PIXSEL_1, PIXSEL_2, PIXSEL_3};$/;"	e	enum:fdso::PixelSelectorStatus
PixelSelector	src/FullSystem/PixelSelector2.h	/^class PixelSelector$/;"	c	namespace:fdso
PixelSelectorStatus	src/FullSystem/PixelSelector2.h	/^enum PixelSelectorStatus {PIXSEL_VOID=0, PIXSEL_1, PIXSEL_2, PIXSEL_3};$/;"	g	namespace:fdso
allowFast	src/FullSystem/PixelSelector2.h	/^	bool allowFast;$/;"	m	class:fdso::PixelSelector
currentPotential	src/FullSystem/PixelSelector2.h	/^	int currentPotential;$/;"	m	class:fdso::PixelSelector
fdso	src/FullSystem/PixelSelector2.h	/^namespace fdso$/;"	n
gradHist	src/FullSystem/PixelSelector2.h	/^	int* gradHist;$/;"	m	class:fdso::PixelSelector
gradHistFrame	src/FullSystem/PixelSelector2.h	/^	const FrameHessian* gradHistFrame;$/;"	m	class:fdso::PixelSelector
randomPattern	src/FullSystem/PixelSelector2.h	/^	unsigned char* randomPattern;$/;"	m	class:fdso::PixelSelector
ths	src/FullSystem/PixelSelector2.h	/^	float* ths;$/;"	m	class:fdso::PixelSelector
thsSmoothed	src/FullSystem/PixelSelector2.h	/^	float* thsSmoothed;$/;"	m	class:fdso::PixelSelector
thsStep	src/FullSystem/PixelSelector2.h	/^	int thsStep;$/;"	m	class:fdso::PixelSelector
derive_idepth	src/FullSystem/ResidualProjections.h	/^EIGEN_STRONG_INLINE float derive_idepth($/;"	f	namespace:fdso
fdso	src/FullSystem/ResidualProjections.h	/^namespace fdso$/;"	n
projectPoint	src/FullSystem/ResidualProjections.h	/^EIGEN_STRONG_INLINE bool projectPoint($/;"	f	namespace:fdso
PointFrameResidual	src/FullSystem/Residuals.cpp	/^PointFrameResidual::PointFrameResidual(){assert(false); instanceCounter++;}$/;"	f	class:fdso::PointFrameResidual
PointFrameResidual	src/FullSystem/Residuals.cpp	/^PointFrameResidual::PointFrameResidual(PointHessian* point_, FrameHessian* host_, FrameHessian* target_) :$/;"	f	class:fdso::PointFrameResidual
applyRes	src/FullSystem/Residuals.cpp	/^void PointFrameResidual::applyRes(bool copyJacobians)$/;"	f	class:fdso::PointFrameResidual
debugPlot	src/FullSystem/Residuals.cpp	/^void PointFrameResidual::debugPlot()$/;"	f	class:fdso::PointFrameResidual
fdso	src/FullSystem/Residuals.cpp	/^namespace fdso$/;"	n	file:
instanceCounter	src/FullSystem/Residuals.cpp	/^int PointFrameResidual::instanceCounter = 0;$/;"	m	class:fdso::PointFrameResidual	file:
linearize	src/FullSystem/Residuals.cpp	/^double PointFrameResidual::linearize(CalibHessian* HCalib)$/;"	f	class:fdso::PointFrameResidual
runningResID	src/FullSystem/Residuals.cpp	/^long runningResID=0;$/;"	m	namespace:fdso	file:
~PointFrameResidual	src/FullSystem/Residuals.cpp	/^PointFrameResidual::~PointFrameResidual(){assert(efResidual==0); instanceCounter--; delete J;}$/;"	f	class:fdso::PointFrameResidual
ACTIVE	src/FullSystem/Residuals.h	/^enum ResLocation {ACTIVE=0, LINEARIZED, MARGINALIZED, NONE};$/;"	e	enum:fdso::ResLocation
FullJacRowT	src/FullSystem/Residuals.h	/^struct FullJacRowT$/;"	s	namespace:fdso
IN	src/FullSystem/Residuals.h	/^enum ResState {IN=0, OOB, OUTLIER};$/;"	e	enum:fdso::ResState
J	src/FullSystem/Residuals.h	/^	RawResidualJacobian* J;$/;"	m	class:fdso::PointFrameResidual
LINEARIZED	src/FullSystem/Residuals.h	/^enum ResLocation {ACTIVE=0, LINEARIZED, MARGINALIZED, NONE};$/;"	e	enum:fdso::ResLocation
MARGINALIZED	src/FullSystem/Residuals.h	/^enum ResLocation {ACTIVE=0, LINEARIZED, MARGINALIZED, NONE};$/;"	e	enum:fdso::ResLocation
NONE	src/FullSystem/Residuals.h	/^enum ResLocation {ACTIVE=0, LINEARIZED, MARGINALIZED, NONE};$/;"	e	enum:fdso::ResLocation
OOB	src/FullSystem/Residuals.h	/^enum ResState {IN=0, OOB, OUTLIER};$/;"	e	enum:fdso::ResState
OUTLIER	src/FullSystem/Residuals.h	/^enum ResState {IN=0, OOB, OUTLIER};$/;"	e	enum:fdso::ResState
PointFrameResidual	src/FullSystem/Residuals.h	/^class PointFrameResidual$/;"	c	namespace:fdso
ResLocation	src/FullSystem/Residuals.h	/^enum ResLocation {ACTIVE=0, LINEARIZED, MARGINALIZED, NONE};$/;"	g	namespace:fdso
ResState	src/FullSystem/Residuals.h	/^enum ResState {IN=0, OOB, OUTLIER};$/;"	g	namespace:fdso
centerProjectedTo	src/FullSystem/Residuals.h	/^	Vec3f centerProjectedTo;$/;"	m	class:fdso::PointFrameResidual
efResidual	src/FullSystem/Residuals.h	/^	EFResidual* efResidual;$/;"	m	class:fdso::PointFrameResidual
fdso	src/FullSystem/Residuals.h	/^namespace fdso$/;"	n
host	src/FullSystem/Residuals.h	/^	FrameHessian* host;$/;"	m	class:fdso::PointFrameResidual
instanceCounter	src/FullSystem/Residuals.h	/^	static int instanceCounter;$/;"	m	class:fdso::PointFrameResidual
isNew	src/FullSystem/Residuals.h	/^	bool isNew;$/;"	m	class:fdso::PointFrameResidual
point	src/FullSystem/Residuals.h	/^	PointHessian* point;$/;"	m	class:fdso::PointFrameResidual
projectedTo	src/FullSystem/Residuals.h	/^	Eigen::Vector2f projectedTo[MAX_RES_PER_POINT];$/;"	m	class:fdso::PointFrameResidual
projectedTo	src/FullSystem/Residuals.h	/^	Eigen::Vector2f projectedTo[MAX_RES_PER_POINT];$/;"	m	struct:fdso::FullJacRowT
resetOOB	src/FullSystem/Residuals.h	/^	void resetOOB()$/;"	f	class:fdso::PointFrameResidual
setState	src/FullSystem/Residuals.h	/^	void setState(ResState s) {state_state = s;}$/;"	f	class:fdso::PointFrameResidual
state_NewEnergy	src/FullSystem/Residuals.h	/^	double state_NewEnergy;$/;"	m	class:fdso::PointFrameResidual
state_NewEnergyWithOutlier	src/FullSystem/Residuals.h	/^	double state_NewEnergyWithOutlier;$/;"	m	class:fdso::PointFrameResidual
state_NewState	src/FullSystem/Residuals.h	/^	ResState state_NewState;$/;"	m	class:fdso::PointFrameResidual
state_energy	src/FullSystem/Residuals.h	/^	double state_energy;$/;"	m	class:fdso::PointFrameResidual
state_state	src/FullSystem/Residuals.h	/^	ResState state_state;$/;"	m	class:fdso::PointFrameResidual
target	src/FullSystem/Residuals.h	/^	FrameHessian* target;$/;"	m	class:fdso::PointFrameResidual
Camera	src/FullSystem/camera.cc	/^Camera::Camera()$/;"	f	class:fdso::Camera
camera2pixel	src/FullSystem/camera.cc	/^Vector2d Camera::camera2pixel ( const Vector3d& p_c )$/;"	f	class:fdso::Camera
camera2world	src/FullSystem/camera.cc	/^Vector3d Camera::camera2world ( const Vector3d& p_c, const SE3& T_c_w )$/;"	f	class:fdso::Camera
fdso	src/FullSystem/camera.cc	/^namespace fdso$/;"	n	file:
pixel2camera	src/FullSystem/camera.cc	/^Vector3d Camera::pixel2camera ( const Vector2d& p_p, double depth )$/;"	f	class:fdso::Camera
pixel2world	src/FullSystem/camera.cc	/^Vector3d Camera::pixel2world ( const Vector2d& p_p, const SE3& T_c_w, double depth )$/;"	f	class:fdso::Camera
world2camera	src/FullSystem/camera.cc	/^Vector3d Camera::world2camera ( const Vector3d& p_w, const SE3& T_c_w )$/;"	f	class:fdso::Camera
world2pixel	src/FullSystem/camera.cc	/^Vector2d Camera::world2pixel ( const Vector3d& p_w, const SE3& T_c_w )$/;"	f	class:fdso::Camera
CAMERA_H	src/FullSystem/camera.h	21;"	d
Camera	src/FullSystem/camera.h	/^    Camera ( float fx, float fy, float cx, float cy, float depth_scale=0 ) :$/;"	f	class:fdso::Camera
Camera	src/FullSystem/camera.h	/^class Camera$/;"	c	namespace:fdso
Ptr	src/FullSystem/camera.h	/^    typedef std::shared_ptr<Camera> Ptr;$/;"	t	class:fdso::Camera
cx_	src/FullSystem/camera.h	/^    float   fx_, fy_, cx_, cy_, depth_scale_;$/;"	m	class:fdso::Camera
cy_	src/FullSystem/camera.h	/^    float   fx_, fy_, cx_, cy_, depth_scale_;$/;"	m	class:fdso::Camera
depth_scale_	src/FullSystem/camera.h	/^    float   fx_, fy_, cx_, cy_, depth_scale_;$/;"	m	class:fdso::Camera
fdso	src/FullSystem/camera.h	/^namespace fdso$/;"	n
fx_	src/FullSystem/camera.h	/^    float   fx_, fy_, cx_, cy_, depth_scale_;$/;"	m	class:fdso::Camera
fy_	src/FullSystem/camera.h	/^    float   fx_, fy_, cx_, cy_, depth_scale_;$/;"	m	class:fdso::Camera
COMMON_INCLUDE_H	src/FullSystem/common_include.h	2;"	d
Evaluate	src/FullSystem/factor/imu_factor.h	/^    virtual bool Evaluate(double const *const *parameters, double *residuals, double **jacobians) const$/;"	f	class:IMUFactor
IMUFactor	src/FullSystem/factor/imu_factor.h	/^    IMUFactor(IntegrationBase* _pre_integration):pre_integration(_pre_integration)$/;"	f	class:IMUFactor
IMUFactor	src/FullSystem/factor/imu_factor.h	/^class IMUFactor : public ceres::SizedCostFunction<15, 7, 9, 7, 9>$/;"	c
pre_integration	src/FullSystem/factor/imu_factor.h	/^    IntegrationBase* pre_integration;$/;"	m	class:IMUFactor
IntegrationBase	src/FullSystem/factor/integration_base.h	/^    IntegrationBase(const Eigen::Vector3d &_acc_0, const Eigen::Vector3d &_gyr_0,$/;"	f	class:IntegrationBase
IntegrationBase	src/FullSystem/factor/integration_base.h	/^class IntegrationBase$/;"	c
acc_0	src/FullSystem/factor/integration_base.h	/^    Eigen::Vector3d acc_0, gyr_0;$/;"	m	class:IntegrationBase
acc_1	src/FullSystem/factor/integration_base.h	/^    Eigen::Vector3d acc_1, gyr_1;$/;"	m	class:IntegrationBase
acc_buf	src/FullSystem/factor/integration_base.h	/^    std::vector<Eigen::Vector3d> acc_buf;$/;"	m	class:IntegrationBase
covariance	src/FullSystem/factor/integration_base.h	/^    Eigen::Matrix<double, 15, 15> jacobian, covariance;$/;"	m	class:IntegrationBase
delta_p	src/FullSystem/factor/integration_base.h	/^    Eigen::Vector3d delta_p;$/;"	m	class:IntegrationBase
delta_q	src/FullSystem/factor/integration_base.h	/^    Eigen::Quaterniond delta_q;$/;"	m	class:IntegrationBase
delta_v	src/FullSystem/factor/integration_base.h	/^    Eigen::Vector3d delta_v;$/;"	m	class:IntegrationBase
dt	src/FullSystem/factor/integration_base.h	/^    double dt;$/;"	m	class:IntegrationBase
dt_buf	src/FullSystem/factor/integration_base.h	/^    std::vector<double> dt_buf;$/;"	m	class:IntegrationBase
evaluate	src/FullSystem/factor/integration_base.h	/^    Eigen::Matrix<double, 15, 1> evaluate(const Eigen::Vector3d &Pi, const Eigen::Quaterniond &Qi, const Eigen::Vector3d &Vi, const Eigen::Vector3d &Bai, const Eigen::Vector3d &Bgi,$/;"	f	class:IntegrationBase
gyr_0	src/FullSystem/factor/integration_base.h	/^    Eigen::Vector3d acc_0, gyr_0;$/;"	m	class:IntegrationBase
gyr_1	src/FullSystem/factor/integration_base.h	/^    Eigen::Vector3d acc_1, gyr_1;$/;"	m	class:IntegrationBase
gyr_buf	src/FullSystem/factor/integration_base.h	/^    std::vector<Eigen::Vector3d> gyr_buf;$/;"	m	class:IntegrationBase
jacobian	src/FullSystem/factor/integration_base.h	/^    Eigen::Matrix<double, 15, 15> jacobian, covariance;$/;"	m	class:IntegrationBase
linearized_acc	src/FullSystem/factor/integration_base.h	/^    const Eigen::Vector3d linearized_acc, linearized_gyr;$/;"	m	class:IntegrationBase
linearized_ba	src/FullSystem/factor/integration_base.h	/^    Eigen::Vector3d linearized_ba, linearized_bg;$/;"	m	class:IntegrationBase
linearized_bg	src/FullSystem/factor/integration_base.h	/^    Eigen::Vector3d linearized_ba, linearized_bg;$/;"	m	class:IntegrationBase
linearized_gyr	src/FullSystem/factor/integration_base.h	/^    const Eigen::Vector3d linearized_acc, linearized_gyr;$/;"	m	class:IntegrationBase
midPointIntegration	src/FullSystem/factor/integration_base.h	/^    void midPointIntegration(double _dt, $/;"	f	class:IntegrationBase
noise	src/FullSystem/factor/integration_base.h	/^    Eigen::Matrix<double, 18, 18> noise;$/;"	m	class:IntegrationBase
propagate	src/FullSystem/factor/integration_base.h	/^    void propagate(double _dt, const Eigen::Vector3d &_acc_1, const Eigen::Vector3d &_gyr_1)$/;"	f	class:IntegrationBase
push_back	src/FullSystem/factor/integration_base.h	/^    void push_back(double dt, const Eigen::Vector3d &acc, const Eigen::Vector3d &gyr)$/;"	f	class:IntegrationBase
repropagate	src/FullSystem/factor/integration_base.h	/^    void repropagate(const Eigen::Vector3d &_linearized_ba, const Eigen::Vector3d &_linearized_bg)$/;"	f	class:IntegrationBase
step_V	src/FullSystem/factor/integration_base.h	/^    Eigen::Matrix<double, 15, 18> step_V;$/;"	m	class:IntegrationBase
step_jacobian	src/FullSystem/factor/integration_base.h	/^    Eigen::Matrix<double, 15, 15> step_jacobian;$/;"	m	class:IntegrationBase
sum_dt	src/FullSystem/factor/integration_base.h	/^    double sum_dt;$/;"	m	class:IntegrationBase
Evaluate	src/FullSystem/factor/marginalization_factor.cpp	/^bool MarginalizationFactor::Evaluate(double const *const *parameters, double *residuals, double **jacobians) const$/;"	f	class:MarginalizationFactor
Evaluate	src/FullSystem/factor/marginalization_factor.cpp	/^void ResidualBlockInfo::Evaluate()$/;"	f	class:ResidualBlockInfo
MarginalizationFactor	src/FullSystem/factor/marginalization_factor.cpp	/^MarginalizationFactor::MarginalizationFactor(MarginalizationInfo* _marginalization_info):marginalization_info(_marginalization_info)$/;"	f	class:MarginalizationFactor
ThreadsConstructA	src/FullSystem/factor/marginalization_factor.cpp	/^void* ThreadsConstructA(void* threadsstruct)$/;"	f
addResidualBlockInfo	src/FullSystem/factor/marginalization_factor.cpp	/^void MarginalizationInfo::addResidualBlockInfo(ResidualBlockInfo *residual_block_info)$/;"	f	class:MarginalizationInfo
getParameterBlocks	src/FullSystem/factor/marginalization_factor.cpp	/^std::vector<double *> MarginalizationInfo::getParameterBlocks(std::unordered_map<long, double *> &addr_shift)$/;"	f	class:MarginalizationInfo
globalSize	src/FullSystem/factor/marginalization_factor.cpp	/^int MarginalizationInfo::globalSize(int size) const$/;"	f	class:MarginalizationInfo
localSize	src/FullSystem/factor/marginalization_factor.cpp	/^int MarginalizationInfo::localSize(int size) const$/;"	f	class:MarginalizationInfo
marginalize	src/FullSystem/factor/marginalization_factor.cpp	/^void MarginalizationInfo::marginalize()$/;"	f	class:MarginalizationInfo
preMarginalize	src/FullSystem/factor/marginalization_factor.cpp	/^void MarginalizationInfo::preMarginalize()$/;"	f	class:MarginalizationInfo
~MarginalizationInfo	src/FullSystem/factor/marginalization_factor.cpp	/^MarginalizationInfo::~MarginalizationInfo()$/;"	f	class:MarginalizationInfo
A	src/FullSystem/factor/marginalization_factor.h	/^    Eigen::MatrixXd A;$/;"	m	struct:ThreadsStruct
MarginalizationFactor	src/FullSystem/factor/marginalization_factor.h	/^class MarginalizationFactor : public ceres::CostFunction$/;"	c
MarginalizationInfo	src/FullSystem/factor/marginalization_factor.h	/^class MarginalizationInfo$/;"	c
NUM_THREADS	src/FullSystem/factor/marginalization_factor.h	/^const int NUM_THREADS = 4;$/;"	v
ResidualBlockInfo	src/FullSystem/factor/marginalization_factor.h	/^    ResidualBlockInfo(ceres::CostFunction *_cost_function, ceres::LossFunction *_loss_function, std::vector<double *> _parameter_blocks, std::vector<int> _drop_set)$/;"	f	struct:ResidualBlockInfo
ResidualBlockInfo	src/FullSystem/factor/marginalization_factor.h	/^struct ResidualBlockInfo$/;"	s
ThreadsStruct	src/FullSystem/factor/marginalization_factor.h	/^struct ThreadsStruct$/;"	s
b	src/FullSystem/factor/marginalization_factor.h	/^    Eigen::VectorXd b;$/;"	m	struct:ThreadsStruct
cost_function	src/FullSystem/factor/marginalization_factor.h	/^    ceres::CostFunction *cost_function;$/;"	m	struct:ResidualBlockInfo
drop_set	src/FullSystem/factor/marginalization_factor.h	/^    std::vector<int> drop_set;$/;"	m	struct:ResidualBlockInfo
eps	src/FullSystem/factor/marginalization_factor.h	/^    const double eps = 1e-8;$/;"	m	class:MarginalizationInfo
factors	src/FullSystem/factor/marginalization_factor.h	/^    std::vector<ResidualBlockInfo *> factors;$/;"	m	class:MarginalizationInfo
jacobians	src/FullSystem/factor/marginalization_factor.h	/^    std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>> jacobians;$/;"	m	struct:ResidualBlockInfo
keep_block_data	src/FullSystem/factor/marginalization_factor.h	/^    std::vector<double *> keep_block_data;$/;"	m	class:MarginalizationInfo
keep_block_idx	src/FullSystem/factor/marginalization_factor.h	/^    std::vector<int> keep_block_idx;  \/\/local size$/;"	m	class:MarginalizationInfo
keep_block_size	src/FullSystem/factor/marginalization_factor.h	/^    std::vector<int> keep_block_size; \/\/global size$/;"	m	class:MarginalizationInfo
linearized_jacobians	src/FullSystem/factor/marginalization_factor.h	/^    Eigen::MatrixXd linearized_jacobians;$/;"	m	class:MarginalizationInfo
linearized_residuals	src/FullSystem/factor/marginalization_factor.h	/^    Eigen::VectorXd linearized_residuals;$/;"	m	class:MarginalizationInfo
localSize	src/FullSystem/factor/marginalization_factor.h	/^    int localSize(int size)$/;"	f	struct:ResidualBlockInfo
loss_function	src/FullSystem/factor/marginalization_factor.h	/^    ceres::LossFunction *loss_function;$/;"	m	struct:ResidualBlockInfo
m	src/FullSystem/factor/marginalization_factor.h	/^    int m, n;$/;"	m	class:MarginalizationInfo
marginalization_info	src/FullSystem/factor/marginalization_factor.h	/^    MarginalizationInfo* marginalization_info;$/;"	m	class:MarginalizationFactor
n	src/FullSystem/factor/marginalization_factor.h	/^    int m, n;$/;"	m	class:MarginalizationInfo
parameter_block_data	src/FullSystem/factor/marginalization_factor.h	/^    std::unordered_map<long, double *> parameter_block_data;$/;"	m	class:MarginalizationInfo
parameter_block_idx	src/FullSystem/factor/marginalization_factor.h	/^    std::unordered_map<long, int> parameter_block_idx; \/\/local size$/;"	m	class:MarginalizationInfo
parameter_block_idx	src/FullSystem/factor/marginalization_factor.h	/^    std::unordered_map<long, int> parameter_block_idx; \/\/local size$/;"	m	struct:ThreadsStruct
parameter_block_size	src/FullSystem/factor/marginalization_factor.h	/^    std::unordered_map<long, int> parameter_block_size; \/\/global size$/;"	m	class:MarginalizationInfo
parameter_block_size	src/FullSystem/factor/marginalization_factor.h	/^    std::unordered_map<long, int> parameter_block_size; \/\/global size$/;"	m	struct:ThreadsStruct
parameter_blocks	src/FullSystem/factor/marginalization_factor.h	/^    std::vector<double *> parameter_blocks;$/;"	m	struct:ResidualBlockInfo
raw_jacobians	src/FullSystem/factor/marginalization_factor.h	/^    double **raw_jacobians;$/;"	m	struct:ResidualBlockInfo
residuals	src/FullSystem/factor/marginalization_factor.h	/^    Eigen::VectorXd residuals;$/;"	m	struct:ResidualBlockInfo
sub_factors	src/FullSystem/factor/marginalization_factor.h	/^    std::vector<ResidualBlockInfo *> sub_factors;$/;"	m	struct:ThreadsStruct
sum_block_size	src/FullSystem/factor/marginalization_factor.h	/^    int sum_block_size;$/;"	m	class:MarginalizationInfo
ComputeJacobian	src/FullSystem/factor/pose_local_parameterization.cpp	/^bool PoseLocalParameterization::ComputeJacobian(const double *x, double *jacobian) const$/;"	f	class:PoseLocalParameterization
Plus	src/FullSystem/factor/pose_local_parameterization.cpp	/^bool PoseLocalParameterization::Plus(const double *x, const double *delta, double *x_plus_delta) const$/;"	f	class:PoseLocalParameterization
GlobalSize	src/FullSystem/factor/pose_local_parameterization.h	/^    virtual int GlobalSize() const { return 7; };$/;"	f	class:PoseLocalParameterization
LocalSize	src/FullSystem/factor/pose_local_parameterization.h	/^    virtual int LocalSize() const { return 6; };$/;"	f	class:PoseLocalParameterization
PoseLocalParameterization	src/FullSystem/factor/pose_local_parameterization.h	/^class PoseLocalParameterization : public ceres::LocalParameterization$/;"	c
Evaluate	src/FullSystem/factor/projection_factor.cpp	/^bool ProjectionFactor::Evaluate(double const *const *parameters, double *residuals, double **jacobians) const$/;"	f	class:ProjectionFactor
ProjectionFactor	src/FullSystem/factor/projection_factor.cpp	/^ProjectionFactor::ProjectionFactor(const Eigen::Vector3d &_pts_i, const Eigen::Vector3d &_pts_j) : pts_i(_pts_i), pts_j(_pts_j)$/;"	f	class:ProjectionFactor
UNIT_SPHERE_ERROR	src/FullSystem/factor/projection_factor.cpp	3;"	d	file:
check	src/FullSystem/factor/projection_factor.cpp	/^void ProjectionFactor::check(double **parameters)$/;"	f	class:ProjectionFactor
sqrt_info	src/FullSystem/factor/projection_factor.cpp	/^Eigen::Matrix2d ProjectionFactor::sqrt_info;$/;"	m	class:ProjectionFactor	file:
sum_t	src/FullSystem/factor/projection_factor.cpp	/^double ProjectionFactor::sum_t;$/;"	m	class:ProjectionFactor	file:
PROJECTION_FACTOR_H	src/FullSystem/factor/projection_factor.h	2;"	d
ProjectionFactor	src/FullSystem/factor/projection_factor.h	/^class ProjectionFactor : public ceres::SizedCostFunction<2, 7, 7, 7, 1>$/;"	c
pts_i	src/FullSystem/factor/projection_factor.h	/^    Eigen::Vector3d pts_i, pts_j;$/;"	m	class:ProjectionFactor
pts_j	src/FullSystem/factor/projection_factor.h	/^    Eigen::Vector3d pts_i, pts_j;$/;"	m	class:ProjectionFactor
sqrt_info	src/FullSystem/factor/projection_factor.h	/^    static Eigen::Matrix2d sqrt_info;$/;"	m	class:ProjectionFactor
sum_t	src/FullSystem/factor/projection_factor.h	/^    static double sum_t;$/;"	m	class:ProjectionFactor
tangent_base	src/FullSystem/factor/projection_factor.h	/^    Eigen::Matrix<double, 2, 3> tangent_base;$/;"	m	class:ProjectionFactor
TicToc	src/FullSystem/utility/tic_toc.h	/^    TicToc()$/;"	f	class:TicToc
TicToc	src/FullSystem/utility/tic_toc.h	/^class TicToc$/;"	c
end	src/FullSystem/utility/tic_toc.h	/^    std::chrono::time_point<std::chrono::system_clock> start, end;$/;"	m	class:TicToc
start	src/FullSystem/utility/tic_toc.h	/^    std::chrono::time_point<std::chrono::system_clock> start, end;$/;"	m	class:TicToc
tic	src/FullSystem/utility/tic_toc.h	/^    void tic()$/;"	f	class:TicToc
toc	src/FullSystem/utility/tic_toc.h	/^    double toc()$/;"	f	class:TicToc
g2R	src/FullSystem/utility/utility.cpp	/^Eigen::Matrix3d Utility::g2R(const Eigen::Vector3d &g)$/;"	f	class:Utility
Qleft	src/FullSystem/utility/utility.h	/^    static Eigen::Matrix<typename Derived::Scalar, 4, 4> Qleft(const Eigen::QuaternionBase<Derived> &q)$/;"	f	class:Utility
Qright	src/FullSystem/utility/utility.h	/^    static Eigen::Matrix<typename Derived::Scalar, 4, 4> Qright(const Eigen::QuaternionBase<Derived> &p)$/;"	f	class:Utility
R2ypr	src/FullSystem/utility/utility.h	/^    static Eigen::Vector3d R2ypr(const Eigen::Matrix3d &R)$/;"	f	class:Utility
Utility	src/FullSystem/utility/utility.h	/^class Utility$/;"	c
deltaQ	src/FullSystem/utility/utility.h	/^    static Eigen::Quaternion<typename Derived::Scalar> deltaQ(const Eigen::MatrixBase<Derived> &theta)$/;"	f	class:Utility
normalizeAngle	src/FullSystem/utility/utility.h	/^    static T normalizeAngle(const T& angle_degrees) {$/;"	f	class:Utility
positify	src/FullSystem/utility/utility.h	/^    static Eigen::Quaternion<typename Derived::Scalar> positify(const Eigen::QuaternionBase<Derived> &q)$/;"	f	class:Utility
skewSymmetric	src/FullSystem/utility/utility.h	/^    static Eigen::Matrix<typename Derived::Scalar, 3, 3> skewSymmetric(const Eigen::MatrixBase<Derived> &q)$/;"	f	class:Utility
uint_	src/FullSystem/utility/utility.h	/^    struct uint_$/;"	s	class:Utility
unroller	src/FullSystem/utility/utility.h	/^    void unroller(const Lambda &f, const IterT &iter, uint_<0>)$/;"	f	class:Utility
unroller	src/FullSystem/utility/utility.h	/^    void unroller(const Lambda &f, const IterT &iter, uint_<N>)$/;"	f	class:Utility
ypr2R	src/FullSystem/utility/utility.h	/^    static Eigen::Matrix<typename Derived::Scalar, 3, 3> ypr2R(const Eigen::MatrixBase<Derived> &ypr)$/;"	f	class:Utility
IOWrap	src/IOWrapper/ImageDisplay.h	/^namespace IOWrap$/;"	n	namespace:fdso
fdso	src/IOWrapper/ImageDisplay.h	/^namespace fdso$/;"	n
IOWrap	src/IOWrapper/ImageDisplay_dummy.cpp	/^namespace IOWrap$/;"	n	namespace:fdso	file:
closeAllWindows	src/IOWrapper/ImageDisplay_dummy.cpp	/^void closeAllWindows() {};$/;"	f	namespace:fdso::IOWrap
displayImage	src/IOWrapper/ImageDisplay_dummy.cpp	/^void displayImage(const char* windowName, const MinimalImageB* img, bool autoSize) {};$/;"	f	namespace:fdso::IOWrap
displayImage	src/IOWrapper/ImageDisplay_dummy.cpp	/^void displayImage(const char* windowName, const MinimalImageB16* img, bool autoSize) {};$/;"	f	namespace:fdso::IOWrap
displayImage	src/IOWrapper/ImageDisplay_dummy.cpp	/^void displayImage(const char* windowName, const MinimalImageB3* img, bool autoSize) {};$/;"	f	namespace:fdso::IOWrap
displayImage	src/IOWrapper/ImageDisplay_dummy.cpp	/^void displayImage(const char* windowName, const MinimalImageF* img, bool autoSize) {};$/;"	f	namespace:fdso::IOWrap
displayImage	src/IOWrapper/ImageDisplay_dummy.cpp	/^void displayImage(const char* windowName, const MinimalImageF3* img, bool autoSize) {};$/;"	f	namespace:fdso::IOWrap
displayImageStitch	src/IOWrapper/ImageDisplay_dummy.cpp	/^void displayImageStitch(const char* windowName, const std::vector<MinimalImageB*> images, int cc, int rc) {};$/;"	f	namespace:fdso::IOWrap
displayImageStitch	src/IOWrapper/ImageDisplay_dummy.cpp	/^void displayImageStitch(const char* windowName, const std::vector<MinimalImageB3*> images, int cc, int rc) {};$/;"	f	namespace:fdso::IOWrap
displayImageStitch	src/IOWrapper/ImageDisplay_dummy.cpp	/^void displayImageStitch(const char* windowName, const std::vector<MinimalImageF*> images, int cc, int rc) {};$/;"	f	namespace:fdso::IOWrap
displayImageStitch	src/IOWrapper/ImageDisplay_dummy.cpp	/^void displayImageStitch(const char* windowName, const std::vector<MinimalImageF3*> images, int cc, int rc) {};$/;"	f	namespace:fdso::IOWrap
fdso	src/IOWrapper/ImageDisplay_dummy.cpp	/^namespace fdso$/;"	n	file:
waitKey	src/IOWrapper/ImageDisplay_dummy.cpp	/^int waitKey(int milliseconds) {return 0;};$/;"	f	namespace:fdso::IOWrap
IOWrap	src/IOWrapper/ImageRW.h	/^namespace IOWrap$/;"	n	namespace:fdso
fdso	src/IOWrapper/ImageRW.h	/^namespace fdso$/;"	n
IOWrap	src/IOWrapper/ImageRW_dummy.cpp	/^namespace IOWrap$/;"	n	namespace:fdso	file:
fdso	src/IOWrapper/ImageRW_dummy.cpp	/^namespace fdso$/;"	n	file:
readImageBW_16U	src/IOWrapper/ImageRW_dummy.cpp	/^MinimalImage<unsigned short>* readImageBW_16U(std::string filename) {printf("not implemented. bye!\\n"); return 0;};$/;"	f	namespace:fdso::IOWrap
readImageBW_8U	src/IOWrapper/ImageRW_dummy.cpp	/^MinimalImageB* readImageBW_8U(std::string filename) {printf("not implemented. bye!\\n"); return 0;};$/;"	f	namespace:fdso::IOWrap
readImageRGB_8U	src/IOWrapper/ImageRW_dummy.cpp	/^MinimalImageB3* readImageRGB_8U(std::string filename) {printf("not implemented. bye!\\n"); return 0;};$/;"	f	namespace:fdso::IOWrap
readStreamBW_8U	src/IOWrapper/ImageRW_dummy.cpp	/^MinimalImageB* readStreamBW_8U(char* data, int numBytes) {printf("not implemented. bye!\\n"); return 0;};$/;"	f	namespace:fdso::IOWrap
writeImage	src/IOWrapper/ImageRW_dummy.cpp	/^void writeImage(std::string filename, MinimalImageB* img) {};$/;"	f	namespace:fdso::IOWrap
writeImage	src/IOWrapper/ImageRW_dummy.cpp	/^void writeImage(std::string filename, MinimalImageB3* img) {};$/;"	f	namespace:fdso::IOWrap
writeImage	src/IOWrapper/ImageRW_dummy.cpp	/^void writeImage(std::string filename, MinimalImageF* img) {};$/;"	f	namespace:fdso::IOWrap
writeImage	src/IOWrapper/ImageRW_dummy.cpp	/^void writeImage(std::string filename, MinimalImageF3* img) {};$/;"	f	namespace:fdso::IOWrap
IOWrap	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^namespace IOWrap$/;"	n	namespace:fdso	file:
closeAllWindows	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^void closeAllWindows()$/;"	f	namespace:fdso::IOWrap
displayImage	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^void displayImage(const char* windowName, const MinimalImageB* img, bool autoSize)$/;"	f	namespace:fdso::IOWrap
displayImage	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^void displayImage(const char* windowName, const MinimalImageB16* img, bool autoSize)$/;"	f	namespace:fdso::IOWrap
displayImage	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^void displayImage(const char* windowName, const MinimalImageB3* img, bool autoSize)$/;"	f	namespace:fdso::IOWrap
displayImage	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^void displayImage(const char* windowName, const MinimalImageF* img, bool autoSize)$/;"	f	namespace:fdso::IOWrap
displayImage	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^void displayImage(const char* windowName, const MinimalImageF3* img, bool autoSize)$/;"	f	namespace:fdso::IOWrap
displayImage	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^void displayImage(const char* windowName, const cv::Mat& image, bool autoSize)$/;"	f	namespace:fdso::IOWrap
displayImageStitch	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^void displayImageStitch(const char* windowName, const std::vector<MinimalImageB*> images, int cc, int rc)$/;"	f	namespace:fdso::IOWrap
displayImageStitch	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^void displayImageStitch(const char* windowName, const std::vector<MinimalImageB3*> images, int cc, int rc)$/;"	f	namespace:fdso::IOWrap
displayImageStitch	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^void displayImageStitch(const char* windowName, const std::vector<MinimalImageF*> images, int cc, int rc)$/;"	f	namespace:fdso::IOWrap
displayImageStitch	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^void displayImageStitch(const char* windowName, const std::vector<MinimalImageF3*> images, int cc, int rc)$/;"	f	namespace:fdso::IOWrap
displayImageStitch	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^void displayImageStitch(const char* windowName, const std::vector<cv::Mat*> images, int cc, int rc)$/;"	f	namespace:fdso::IOWrap
fdso	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^namespace fdso$/;"	n	file:
openCVdisplayMutex	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^boost::mutex openCVdisplayMutex;$/;"	m	namespace:fdso::IOWrap	file:
openWindows	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^std::unordered_set<std::string> openWindows;$/;"	m	namespace:fdso::IOWrap	file:
waitKey	src/IOWrapper/OpenCV/ImageDisplay_OpenCV.cpp	/^int waitKey(int milliseconds)$/;"	f	namespace:fdso::IOWrap
IOWrap	src/IOWrapper/OpenCV/ImageRW_OpenCV.cpp	/^namespace IOWrap$/;"	n	namespace:fdso	file:
fdso	src/IOWrapper/OpenCV/ImageRW_OpenCV.cpp	/^namespace fdso$/;"	n	file:
readImageBW_16U	src/IOWrapper/OpenCV/ImageRW_OpenCV.cpp	/^MinimalImage<unsigned short>* readImageBW_16U(std::string filename)$/;"	f	namespace:fdso::IOWrap
readImageBW_8U	src/IOWrapper/OpenCV/ImageRW_OpenCV.cpp	/^MinimalImageB* readImageBW_8U(std::string filename)$/;"	f	namespace:fdso::IOWrap
readImageRGB_8U	src/IOWrapper/OpenCV/ImageRW_OpenCV.cpp	/^MinimalImageB3* readImageRGB_8U(std::string filename)$/;"	f	namespace:fdso::IOWrap
readStreamBW_8U	src/IOWrapper/OpenCV/ImageRW_OpenCV.cpp	/^MinimalImageB* readStreamBW_8U(char* data, int numBytes)$/;"	f	namespace:fdso::IOWrap
writeImage	src/IOWrapper/OpenCV/ImageRW_OpenCV.cpp	/^void writeImage(std::string filename, MinimalImageB* img)$/;"	f	namespace:fdso::IOWrap
writeImage	src/IOWrapper/OpenCV/ImageRW_OpenCV.cpp	/^void writeImage(std::string filename, MinimalImageB3* img)$/;"	f	namespace:fdso::IOWrap
writeImage	src/IOWrapper/OpenCV/ImageRW_OpenCV.cpp	/^void writeImage(std::string filename, MinimalImageF* img)$/;"	f	namespace:fdso::IOWrap
writeImage	src/IOWrapper/OpenCV/ImageRW_OpenCV.cpp	/^void writeImage(std::string filename, MinimalImageF3* img)$/;"	f	namespace:fdso::IOWrap
IOWrap	src/IOWrapper/Output3DWrapper.h	/^namespace IOWrap$/;"	n	namespace:fdso
Output3DWrapper	src/IOWrapper/Output3DWrapper.h	/^        Output3DWrapper() {}$/;"	f	class:fdso::IOWrap::Output3DWrapper
Output3DWrapper	src/IOWrapper/Output3DWrapper.h	/^class Output3DWrapper$/;"	c	namespace:fdso::IOWrap
cv	src/IOWrapper/Output3DWrapper.h	/^namespace cv {$/;"	n
fdso	src/IOWrapper/Output3DWrapper.h	/^namespace fdso$/;"	n
join	src/IOWrapper/Output3DWrapper.h	/^        virtual void join() {}$/;"	f	class:fdso::IOWrap::Output3DWrapper
needPushDepthImage	src/IOWrapper/Output3DWrapper.h	/^        virtual bool needPushDepthImage() {return false;}$/;"	f	class:fdso::IOWrap::Output3DWrapper
publishCamPose	src/IOWrapper/Output3DWrapper.h	/^        virtual void publishCamPose(FrameShell* frame, CalibHessian* HCalib) {}$/;"	f	class:fdso::IOWrap::Output3DWrapper
publishGraph	src/IOWrapper/Output3DWrapper.h	/^        virtual void publishGraph(const std::map<long,Eigen::Vector2i> &connectivity) {}$/;"	f	class:fdso::IOWrap::Output3DWrapper
publishKeyframes	src/IOWrapper/Output3DWrapper.h	/^        virtual void publishKeyframes(std::vector<FrameHessian*> &frames, bool final, CalibHessian* HCalib) {}$/;"	f	class:fdso::IOWrap::Output3DWrapper
pushDepthImage	src/IOWrapper/Output3DWrapper.h	/^        virtual void pushDepthImage(MinimalImageB3* image) {}$/;"	f	class:fdso::IOWrap::Output3DWrapper
pushDepthImageFloat	src/IOWrapper/Output3DWrapper.h	/^        virtual void pushDepthImageFloat(MinimalImageF* image, FrameHessian* KF ) {}$/;"	f	class:fdso::IOWrap::Output3DWrapper
pushLiveFrame	src/IOWrapper/Output3DWrapper.h	/^        virtual void pushLiveFrame(FrameHessian* image) {}$/;"	f	class:fdso::IOWrap::Output3DWrapper
pushStereoLiveFrame	src/IOWrapper/Output3DWrapper.h	/^        virtual void pushStereoLiveFrame(FrameHessian* image,FrameHessian* image_right){}$/;"	f	class:fdso::IOWrap::Output3DWrapper
reset	src/IOWrapper/Output3DWrapper.h	/^        virtual void reset() {}$/;"	f	class:fdso::IOWrap::Output3DWrapper
~Output3DWrapper	src/IOWrapper/Output3DWrapper.h	/^        virtual ~Output3DWrapper() {}$/;"	f	class:fdso::IOWrap::Output3DWrapper
IOWrap	src/IOWrapper/OutputWrapper/SampleOutputWrapper.h	/^namespace IOWrap$/;"	n	namespace:fdso
SampleOutputWrapper	src/IOWrapper/OutputWrapper/SampleOutputWrapper.h	/^        inline SampleOutputWrapper()$/;"	f	class:fdso::IOWrap::SampleOutputWrapper
SampleOutputWrapper	src/IOWrapper/OutputWrapper/SampleOutputWrapper.h	/^class SampleOutputWrapper : public Output3DWrapper$/;"	c	namespace:fdso::IOWrap
fdso	src/IOWrapper/OutputWrapper/SampleOutputWrapper.h	/^namespace fdso$/;"	n
needPushDepthImage	src/IOWrapper/OutputWrapper/SampleOutputWrapper.h	/^        virtual bool needPushDepthImage()$/;"	f	class:fdso::IOWrap::SampleOutputWrapper
publishCamPose	src/IOWrapper/OutputWrapper/SampleOutputWrapper.h	/^        virtual void publishCamPose(FrameShell* frame, CalibHessian* HCalib)$/;"	f	class:fdso::IOWrap::SampleOutputWrapper
publishGraph	src/IOWrapper/OutputWrapper/SampleOutputWrapper.h	/^        virtual void publishGraph(const std::map<long,Eigen::Vector2i> &connectivity)$/;"	f	class:fdso::IOWrap::SampleOutputWrapper
publishKeyframes	src/IOWrapper/OutputWrapper/SampleOutputWrapper.h	/^        virtual void publishKeyframes( std::vector<FrameHessian*> &frames, bool final, CalibHessian* HCalib)$/;"	f	class:fdso::IOWrap::SampleOutputWrapper
pushDepthImage	src/IOWrapper/OutputWrapper/SampleOutputWrapper.h	/^        virtual void pushDepthImage(MinimalImageB3* image)$/;"	f	class:fdso::IOWrap::SampleOutputWrapper
pushDepthImageFloat	src/IOWrapper/OutputWrapper/SampleOutputWrapper.h	/^        virtual void pushDepthImageFloat(MinimalImageF* image, FrameHessian* KF )$/;"	f	class:fdso::IOWrap::SampleOutputWrapper
pushLiveFrame	src/IOWrapper/OutputWrapper/SampleOutputWrapper.h	/^        virtual void pushLiveFrame(FrameHessian* image)$/;"	f	class:fdso::IOWrap::SampleOutputWrapper
~SampleOutputWrapper	src/IOWrapper/OutputWrapper/SampleOutputWrapper.h	/^        virtual ~SampleOutputWrapper()$/;"	f	class:fdso::IOWrap::SampleOutputWrapper
IOWrap	src/IOWrapper/Pangolin/KeyFrameDisplay.cpp	/^namespace IOWrap$/;"	n	namespace:fdso	file:
KeyFrameDisplay	src/IOWrapper/Pangolin/KeyFrameDisplay.cpp	/^KeyFrameDisplay::KeyFrameDisplay()$/;"	f	class:fdso::IOWrap::KeyFrameDisplay
drawCam	src/IOWrapper/Pangolin/KeyFrameDisplay.cpp	/^void KeyFrameDisplay::drawCam(float lineWidth, float* color, float sizeFactor)$/;"	f	class:fdso::IOWrap::KeyFrameDisplay
drawGTCam	src/IOWrapper/Pangolin/KeyFrameDisplay.cpp	/^void KeyFrameDisplay::drawGTCam(Sophus::Matrix4f m, float lineWidth, float* color, float sizeFactor)$/;"	f	class:fdso::IOWrap::KeyFrameDisplay
drawPC	src/IOWrapper/Pangolin/KeyFrameDisplay.cpp	/^void KeyFrameDisplay::drawPC(float pointSize)$/;"	f	class:fdso::IOWrap::KeyFrameDisplay
fdso	src/IOWrapper/Pangolin/KeyFrameDisplay.cpp	/^namespace fdso$/;"	n	file:
refreshPC	src/IOWrapper/Pangolin/KeyFrameDisplay.cpp	/^bool KeyFrameDisplay::refreshPC(bool canRefresh, float scaledTH, float absTH, int mode, float minBS, int sparsity)$/;"	f	class:fdso::IOWrap::KeyFrameDisplay
setFromF	src/IOWrapper/Pangolin/KeyFrameDisplay.cpp	/^void KeyFrameDisplay::setFromF(FrameShell* frame, CalibHessian* HCalib)$/;"	f	class:fdso::IOWrap::KeyFrameDisplay
setFromKF	src/IOWrapper/Pangolin/KeyFrameDisplay.cpp	/^void KeyFrameDisplay::setFromKF(FrameHessian* fh, CalibHessian* HCalib)$/;"	f	class:fdso::IOWrap::KeyFrameDisplay
~KeyFrameDisplay	src/IOWrapper/Pangolin/KeyFrameDisplay.cpp	/^KeyFrameDisplay::~KeyFrameDisplay()$/;"	f	class:fdso::IOWrap::KeyFrameDisplay
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
IOWrap	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^namespace IOWrap$/;"	n	namespace:fdso
InputPointSparse	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^struct InputPointSparse$/;"	s	namespace:fdso::IOWrap
KeyFrameDisplay	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^class KeyFrameDisplay$/;"	c	namespace:fdso::IOWrap
MyVertex	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^struct MyVertex$/;"	s	namespace:fdso::IOWrap
Success	src/IOWrapper/Pangolin/KeyFrameDisplay.h	27;"	d
active	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	bool active;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
bufferValid	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	bool bufferValid;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
camToWorld	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	SE3 camToWorld;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
color	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	unsigned char color[4];$/;"	m	struct:fdso::IOWrap::MyVertex
color	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	unsigned char color[ppp];$/;"	m	struct:fdso::IOWrap::InputPointSparse
colorBuffer	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	pangolin::GlBuffer colorBuffer;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
cx	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float fx,fy,cx,cy;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
cxi	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float fxi,fyi,cxi,cyi;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
cy	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float fx,fy,cx,cy;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
cyi	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float fxi,fyi,cxi,cyi;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
fdso	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^namespace fdso$/;"	n
fx	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float fx,fy,cx,cy;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
fxi	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float fxi,fyi,cxi,cyi;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
fy	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float fx,fy,cx,cy;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
fyi	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float fxi,fyi,cxi,cyi;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
height	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	int width, height;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
id	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	int id;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
idepth_hessian	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float idepth_hessian;$/;"	m	struct:fdso::IOWrap::InputPointSparse
idpeth	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float idpeth;$/;"	m	struct:fdso::IOWrap::InputPointSparse
my_absTH	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float my_scaledTH, my_absTH, my_scale;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
my_displayMode	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	int my_displayMode;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
my_minRelBS	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float my_minRelBS;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
my_scale	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float my_scaledTH, my_absTH, my_scale;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
my_scaledTH	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float my_scaledTH, my_absTH, my_scale;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
my_sparsifyFactor	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	int my_sparsifyFactor;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
needRefresh	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	bool needRefresh;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
numGLBufferGoodPoints	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	int numGLBufferGoodPoints;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
numGLBufferPoints	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	int numGLBufferPoints;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
numGoodRes	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	int numGoodRes;$/;"	m	struct:fdso::IOWrap::InputPointSparse
numSparseBufferSize	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	int numSparseBufferSize;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
numSparsePoints	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	int numSparsePoints;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
operator <	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^    inline bool operator < (const KeyFrameDisplay& other) const$/;"	f	class:fdso::IOWrap::KeyFrameDisplay
originalInputSparse	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^    InputPointSparse<MAX_RES_PER_POINT>* originalInputSparse;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
point	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float point[3];$/;"	m	struct:fdso::IOWrap::MyVertex
relObsBaseline	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float relObsBaseline;$/;"	m	struct:fdso::IOWrap::InputPointSparse
status	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	unsigned char status;$/;"	m	struct:fdso::IOWrap::InputPointSparse
u	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float u;$/;"	m	struct:fdso::IOWrap::InputPointSparse
v	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	float v;$/;"	m	struct:fdso::IOWrap::InputPointSparse
vertexBuffer	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	pangolin::GlBuffer vertexBuffer;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
width	src/IOWrapper/Pangolin/KeyFrameDisplay.h	/^	int width, height;$/;"	m	class:fdso::IOWrap::KeyFrameDisplay
IOWrap	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^namespace IOWrap$/;"	n	namespace:fdso	file:
PangolinDSOViewer	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^PangolinDSOViewer::PangolinDSOViewer(int w, int h, bool startRunThread)$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
close	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^void PangolinDSOViewer::close()$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
drawConstraints	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^void PangolinDSOViewer::drawConstraints()$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
fdso	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^namespace fdso$/;"	n	file:
join	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^void PangolinDSOViewer::join()$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
needPushDepthImage	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^bool PangolinDSOViewer::needPushDepthImage()$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
publishCamPose	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^void PangolinDSOViewer::publishCamPose(FrameShell* frame,$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
publishGraph	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^void PangolinDSOViewer::publishGraph(const std::map<long, Eigen::Vector2i> &connectivity)$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
publishKeyframes	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^void PangolinDSOViewer::publishKeyframes($/;"	f	class:fdso::IOWrap::PangolinDSOViewer
pushDepthImage	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^void PangolinDSOViewer::pushDepthImage(MinimalImageB3* image)$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
pushLiveFrame	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^void PangolinDSOViewer::pushLiveFrame(FrameHessian* image)$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
pushStereoLiveFrame	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^void PangolinDSOViewer::pushStereoLiveFrame(FrameHessian* image, FrameHessian* image_right)$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
reset	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^void PangolinDSOViewer::reset()$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
reset_internal	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^void PangolinDSOViewer::reset_internal()$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
run	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^void PangolinDSOViewer::run()$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
~PangolinDSOViewer	src/IOWrapper/Pangolin/PangolinDSOViewer.cpp	/^PangolinDSOViewer::~PangolinDSOViewer()$/;"	f	class:fdso::IOWrap::PangolinDSOViewer
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
GraphConnection	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^struct GraphConnection$/;"	s	namespace:fdso::IOWrap
IOWrap	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^namespace IOWrap$/;"	n	namespace:fdso
PangolinDSOViewer	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^class PangolinDSOViewer : public Output3DWrapper$/;"	c	namespace:fdso::IOWrap
allFramePoses	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	std::vector<Vec3f,Eigen::aligned_allocator<Vec3f>> allFramePoses;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
bwdAct	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	int fwdMarg, bwdMarg, fwdAct, bwdAct;$/;"	m	struct:fdso::IOWrap::GraphConnection
bwdMarg	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	int fwdMarg, bwdMarg, fwdAct, bwdAct;$/;"	m	struct:fdso::IOWrap::GraphConnection
connections	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	std::vector<GraphConnection,Eigen::aligned_allocator<GraphConnection>> connections;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
currentCam	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	KeyFrameDisplay* currentCam;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
fdso	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^namespace fdso$/;"	n
from	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	KeyFrameDisplay* from;$/;"	m	struct:fdso::IOWrap::GraphConnection
fwdAct	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	int fwdMarg, bwdMarg, fwdAct, bwdAct;$/;"	m	struct:fdso::IOWrap::GraphConnection
fwdMarg	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	int fwdMarg, bwdMarg, fwdAct, bwdAct;$/;"	m	struct:fdso::IOWrap::GraphConnection
h	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	int w,h;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
internalKFImg	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	MinimalImageB3* internalKFImg;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
internalResImg	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	MinimalImageB3* internalResImg;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
internalVideoImg	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	MinimalImageB3* internalVideoImg;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
internalVideoImg_Right	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	MinimalImageB3* internalVideoImg_Right;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
keyframes	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	std::vector<KeyFrameDisplay*> keyframes;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
keyframesByKFID	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	std::map<int, KeyFrameDisplay*> keyframesByKFID;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
kfImgChanged	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	bool videoImgChanged, kfImgChanged, resImgChanged;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
lastNMappingMs	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	std::deque<float> lastNMappingMs;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
lastNTrackingMs	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	std::deque<float> lastNTrackingMs;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
last_map	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	struct timeval last_map;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer	typeref:struct:fdso::IOWrap::PangolinDSOViewer::timeval
last_track	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	struct timeval last_track;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer	typeref:struct:fdso::IOWrap::PangolinDSOViewer::timeval
model3DMutex	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	boost::mutex model3DMutex;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
needReset	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	bool needReset;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
openImagesMutex	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	boost::mutex openImagesMutex;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
resImgChanged	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	bool videoImgChanged, kfImgChanged, resImgChanged;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
runThread	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	boost::thread runThread;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
running	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	bool running;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
settings_absVarTH	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	float settings_absVarTH;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
settings_minRelBS	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	float settings_minRelBS;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
settings_pointCloudMode	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	int settings_pointCloudMode;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
settings_scaledVarTH	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	float settings_scaledVarTH;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
settings_showActiveConstraints	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	bool settings_showActiveConstraints;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
settings_showAllConstraints	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	bool settings_showAllConstraints;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
settings_showCurrentCamera	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	bool settings_showCurrentCamera;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
settings_showFullTrajectory	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	bool settings_showFullTrajectory;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
settings_showKFCameras	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	bool settings_showKFCameras;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
settings_showTrajectory	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	bool settings_showTrajectory;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
settings_sparsity	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	int settings_sparsity;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
to	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	KeyFrameDisplay* to;$/;"	m	struct:fdso::IOWrap::GraphConnection
videoImgChanged	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	bool videoImgChanged, kfImgChanged, resImgChanged;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
w	src/IOWrapper/Pangolin/PangolinDSOViewer.h	/^	int w,h;$/;"	m	class:fdso::IOWrap::PangolinDSOViewer
addPoint	src/OptimizationBackend/AccumulatedSCHessian.cpp	/^void AccumulatedSCHessianSSE::addPoint(EFPoint* p, bool shiftPriorToZero, int tid)$/;"	f	class:fdso::AccumulatedSCHessianSSE
fdso	src/OptimizationBackend/AccumulatedSCHessian.cpp	/^namespace fdso$/;"	n	file:
stitchDouble	src/OptimizationBackend/AccumulatedSCHessian.cpp	/^void AccumulatedSCHessianSSE::stitchDouble(MatXX &H, VecX &b, EnergyFunctional const * const EF, int tid)$/;"	f	class:fdso::AccumulatedSCHessianSSE
stitchDoubleInternal	src/OptimizationBackend/AccumulatedSCHessian.cpp	/^void AccumulatedSCHessianSSE::stitchDoubleInternal($/;"	f	class:fdso::AccumulatedSCHessianSSE
AccumulatedSCHessianSSE	src/OptimizationBackend/AccumulatedSCHessian.h	/^	inline AccumulatedSCHessianSSE()$/;"	f	class:fdso::AccumulatedSCHessianSSE
AccumulatedSCHessianSSE	src/OptimizationBackend/AccumulatedSCHessian.h	/^class AccumulatedSCHessianSSE$/;"	c	namespace:fdso
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/AccumulatedSCHessian.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::AccumulatedSCHessianSSE
accD	src/OptimizationBackend/AccumulatedSCHessian.h	/^	AccumulatorXX<8,8>* accD[NUM_THREADS];$/;"	m	class:fdso::AccumulatedSCHessianSSE
accE	src/OptimizationBackend/AccumulatedSCHessian.h	/^	AccumulatorXX<8,CPARS>* accE[NUM_THREADS];$/;"	m	class:fdso::AccumulatedSCHessianSSE
accEB	src/OptimizationBackend/AccumulatedSCHessian.h	/^	AccumulatorX<8>* accEB[NUM_THREADS];$/;"	m	class:fdso::AccumulatedSCHessianSSE
accHcc	src/OptimizationBackend/AccumulatedSCHessian.h	/^	AccumulatorXX<CPARS,CPARS> accHcc[NUM_THREADS];$/;"	m	class:fdso::AccumulatedSCHessianSSE
accbc	src/OptimizationBackend/AccumulatedSCHessian.h	/^	AccumulatorX<CPARS> accbc[NUM_THREADS];$/;"	m	class:fdso::AccumulatedSCHessianSSE
addPointsInternal	src/OptimizationBackend/AccumulatedSCHessian.h	/^	void addPointsInternal($/;"	f	class:fdso::AccumulatedSCHessianSSE
fdso	src/OptimizationBackend/AccumulatedSCHessian.h	/^namespace fdso$/;"	n
nframes	src/OptimizationBackend/AccumulatedSCHessian.h	/^	int nframes[NUM_THREADS];$/;"	m	class:fdso::AccumulatedSCHessianSSE
setZero	src/OptimizationBackend/AccumulatedSCHessian.h	/^	inline void setZero(int n, int min=0, int max=1, Vec10* stats=0, int tid=0)$/;"	f	class:fdso::AccumulatedSCHessianSSE
stitchDoubleMT	src/OptimizationBackend/AccumulatedSCHessian.h	/^	void stitchDoubleMT(IndexThreadReduce<Vec10>* red, MatXX &H, VecX &b, EnergyFunctional const * const EF, bool MT)$/;"	f	class:fdso::AccumulatedSCHessianSSE
~AccumulatedSCHessianSSE	src/OptimizationBackend/AccumulatedSCHessian.h	/^	inline ~AccumulatedSCHessianSSE()$/;"	f	class:fdso::AccumulatedSCHessianSSE
addPoint	src/OptimizationBackend/AccumulatedTopHessian.cpp	/^void AccumulatedTopHessianSSE::addPoint(EFPoint* p, EnergyFunctional const * const ef, int tid)	\/\/ 0 = active, 1 = linearized, 2=marginalize$/;"	f	class:fdso::AccumulatedTopHessianSSE
fdso	src/OptimizationBackend/AccumulatedTopHessian.cpp	/^namespace fdso$/;"	n	file:
stitchDouble	src/OptimizationBackend/AccumulatedTopHessian.cpp	/^void AccumulatedTopHessianSSE::stitchDouble(MatXX &H, VecX &b, EnergyFunctional const * const EF, bool usePrior, bool useDelta, int tid)$/;"	f	class:fdso::AccumulatedTopHessianSSE
stitchDoubleInternal	src/OptimizationBackend/AccumulatedTopHessian.cpp	/^void AccumulatedTopHessianSSE::stitchDoubleInternal($/;"	f	class:fdso::AccumulatedTopHessianSSE
AccumulatedTopHessianSSE	src/OptimizationBackend/AccumulatedTopHessian.h	/^	inline AccumulatedTopHessianSSE()$/;"	f	class:fdso::AccumulatedTopHessianSSE
AccumulatedTopHessianSSE	src/OptimizationBackend/AccumulatedTopHessian.h	/^class AccumulatedTopHessianSSE$/;"	c	namespace:fdso
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/AccumulatedTopHessian.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::AccumulatedTopHessianSSE
acc	src/OptimizationBackend/AccumulatedTopHessian.h	/^	EIGEN_ALIGN16 AccumulatorApprox* acc[NUM_THREADS];$/;"	m	class:fdso::AccumulatedTopHessianSSE
addPointsInternal	src/OptimizationBackend/AccumulatedTopHessian.h	/^	template<int mode> void addPointsInternal($/;"	f	class:fdso::AccumulatedTopHessianSSE
fdso	src/OptimizationBackend/AccumulatedTopHessian.h	/^namespace fdso$/;"	n
nframes	src/OptimizationBackend/AccumulatedTopHessian.h	/^	int nframes[NUM_THREADS];$/;"	m	class:fdso::AccumulatedTopHessianSSE
nres	src/OptimizationBackend/AccumulatedTopHessian.h	/^	int nres[NUM_THREADS];$/;"	m	class:fdso::AccumulatedTopHessianSSE
setZero	src/OptimizationBackend/AccumulatedTopHessian.h	/^	inline void setZero(int nFrames, int min=0, int max=1, Vec10* stats=0, int tid=0)$/;"	f	class:fdso::AccumulatedTopHessianSSE
stitchDoubleMT	src/OptimizationBackend/AccumulatedTopHessian.h	/^	void stitchDoubleMT(IndexThreadReduce<Vec10>* red, MatXX &H, VecX &b, EnergyFunctional const * const EF, bool usePrior, bool MT)$/;"	f	class:fdso::AccumulatedTopHessianSSE
~AccumulatedTopHessianSSE	src/OptimizationBackend/AccumulatedTopHessian.h	/^	inline ~AccumulatedTopHessianSSE()$/;"	f	class:fdso::AccumulatedTopHessianSSE
EFAdjointsValid	src/OptimizationBackend/EnergyFunctional.cpp	/^bool EFAdjointsValid = false;$/;"	m	namespace:fdso	file:
EFDeltaValid	src/OptimizationBackend/EnergyFunctional.cpp	/^bool EFDeltaValid = false;$/;"	m	namespace:fdso	file:
EFIndicesValid	src/OptimizationBackend/EnergyFunctional.cpp	/^bool EFIndicesValid = false;$/;"	m	namespace:fdso	file:
EnergyFunctional	src/OptimizationBackend/EnergyFunctional.cpp	/^EnergyFunctional::EnergyFunctional()$/;"	f	class:fdso::EnergyFunctional
accumulateAF_MT	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::accumulateAF_MT(MatXX &H, VecX &b, bool MT)$/;"	f	class:fdso::EnergyFunctional
accumulateLF_MT	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::accumulateLF_MT(MatXX &H, VecX &b, bool MT)$/;"	f	class:fdso::EnergyFunctional
accumulateSCF_MT	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::accumulateSCF_MT(MatXX &H, VecX &b, bool MT)$/;"	f	class:fdso::EnergyFunctional
calcLEnergyF_MT	src/OptimizationBackend/EnergyFunctional.cpp	/^double EnergyFunctional::calcLEnergyF_MT()$/;"	f	class:fdso::EnergyFunctional
calcLEnergyPt	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::calcLEnergyPt(int min, int max, Vec10* stats, int tid)$/;"	f	class:fdso::EnergyFunctional
calcMEnergyF	src/OptimizationBackend/EnergyFunctional.cpp	/^double EnergyFunctional::calcMEnergyF()$/;"	f	class:fdso::EnergyFunctional
dropPointsF	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::dropPointsF()$/;"	f	class:fdso::EnergyFunctional
dropResidual	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::dropResidual(EFResidual* r)$/;"	f	class:fdso::EnergyFunctional
fdso	src/OptimizationBackend/EnergyFunctional.cpp	/^namespace fdso$/;"	n	file:
getStitchedDeltaF	src/OptimizationBackend/EnergyFunctional.cpp	/^VecX EnergyFunctional::getStitchedDeltaF() const$/;"	f	class:fdso::EnergyFunctional
insertFrame	src/OptimizationBackend/EnergyFunctional.cpp	/^EFFrame* EnergyFunctional::insertFrame(FrameHessian* fh, CalibHessian* Hcalib)$/;"	f	class:fdso::EnergyFunctional
insertPoint	src/OptimizationBackend/EnergyFunctional.cpp	/^EFPoint* EnergyFunctional::insertPoint(PointHessian* ph)$/;"	f	class:fdso::EnergyFunctional
insertResidual	src/OptimizationBackend/EnergyFunctional.cpp	/^EFResidual* EnergyFunctional::insertResidual(PointFrameResidual* r)$/;"	f	class:fdso::EnergyFunctional
makeIDX	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::makeIDX()$/;"	f	class:fdso::EnergyFunctional
marginalizeFrame	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::marginalizeFrame(EFFrame* fh)$/;"	f	class:fdso::EnergyFunctional
marginalizePointsF	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::marginalizePointsF()$/;"	f	class:fdso::EnergyFunctional
orthogonalize	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::orthogonalize(VecX* b, MatXX* H)$/;"	f	class:fdso::EnergyFunctional
removePoint	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::removePoint(EFPoint* p)$/;"	f	class:fdso::EnergyFunctional
resubstituteFPt	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::resubstituteFPt($/;"	f	class:fdso::EnergyFunctional
resubstituteF_MT	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::resubstituteF_MT(VecX x, CalibHessian* HCalib, bool MT)$/;"	f	class:fdso::EnergyFunctional
setAdjointsF	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::setAdjointsF(CalibHessian* Hcalib)$/;"	f	class:fdso::EnergyFunctional
setDeltaF	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::setDeltaF(CalibHessian* HCalib)$/;"	f	class:fdso::EnergyFunctional
solveSystemF	src/OptimizationBackend/EnergyFunctional.cpp	/^void EnergyFunctional::solveSystemF(int iteration, double lambda, CalibHessian* HCalib)$/;"	f	class:fdso::EnergyFunctional
~EnergyFunctional	src/OptimizationBackend/EnergyFunctional.cpp	/^EnergyFunctional::~EnergyFunctional()$/;"	f	class:fdso::EnergyFunctional
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/EnergyFunctional.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::EnergyFunctional
EnergyFunctional	src/OptimizationBackend/EnergyFunctional.h	/^class EnergyFunctional {$/;"	c	namespace:fdso
HM	src/OptimizationBackend/EnergyFunctional.h	/^	MatXX HM;$/;"	m	class:fdso::EnergyFunctional
accSSE_bot	src/OptimizationBackend/EnergyFunctional.h	/^	AccumulatedSCHessianSSE* accSSE_bot;$/;"	m	class:fdso::EnergyFunctional
accSSE_top_A	src/OptimizationBackend/EnergyFunctional.h	/^	AccumulatedTopHessianSSE* accSSE_top_A;$/;"	m	class:fdso::EnergyFunctional
accSSE_top_L	src/OptimizationBackend/EnergyFunctional.h	/^	AccumulatedTopHessianSSE* accSSE_top_L;$/;"	m	class:fdso::EnergyFunctional
adHTdeltaF	src/OptimizationBackend/EnergyFunctional.h	/^	Mat18f* adHTdeltaF;$/;"	m	class:fdso::EnergyFunctional
adHost	src/OptimizationBackend/EnergyFunctional.h	/^	Mat88* adHost;$/;"	m	class:fdso::EnergyFunctional
adHostF	src/OptimizationBackend/EnergyFunctional.h	/^	Mat88f* adHostF;$/;"	m	class:fdso::EnergyFunctional
adTarget	src/OptimizationBackend/EnergyFunctional.h	/^	Mat88* adTarget;$/;"	m	class:fdso::EnergyFunctional
adTargetF	src/OptimizationBackend/EnergyFunctional.h	/^	Mat88f* adTargetF;$/;"	m	class:fdso::EnergyFunctional
allPoints	src/OptimizationBackend/EnergyFunctional.h	/^	std::vector<EFPoint*> allPoints;$/;"	m	class:fdso::EnergyFunctional
allPointsToMarg	src/OptimizationBackend/EnergyFunctional.h	/^	std::vector<EFPoint*> allPointsToMarg;$/;"	m	class:fdso::EnergyFunctional
bM	src/OptimizationBackend/EnergyFunctional.h	/^	VecX bM;$/;"	m	class:fdso::EnergyFunctional
cDeltaF	src/OptimizationBackend/EnergyFunctional.h	/^	VecCf cDeltaF;$/;"	m	class:fdso::EnergyFunctional
cPrior	src/OptimizationBackend/EnergyFunctional.h	/^	VecC cPrior;$/;"	m	class:fdso::EnergyFunctional
cPriorF	src/OptimizationBackend/EnergyFunctional.h	/^	VecCf cPriorF;$/;"	m	class:fdso::EnergyFunctional
connectivityMap	src/OptimizationBackend/EnergyFunctional.h	/^	std::map<long,Eigen::Vector2i> connectivityMap;$/;"	m	class:fdso::EnergyFunctional
currentLambda	src/OptimizationBackend/EnergyFunctional.h	/^	float currentLambda;$/;"	m	class:fdso::EnergyFunctional
fdso	src/OptimizationBackend/EnergyFunctional.h	/^namespace fdso$/;"	n
frames	src/OptimizationBackend/EnergyFunctional.h	/^	std::vector<EFFrame*> frames;$/;"	m	class:fdso::EnergyFunctional
lastHS	src/OptimizationBackend/EnergyFunctional.h	/^	MatXX lastHS;$/;"	m	class:fdso::EnergyFunctional
lastNullspaces_affA	src/OptimizationBackend/EnergyFunctional.h	/^	std::vector<VecX> lastNullspaces_affA;$/;"	m	class:fdso::EnergyFunctional
lastNullspaces_affB	src/OptimizationBackend/EnergyFunctional.h	/^	std::vector<VecX> lastNullspaces_affB;$/;"	m	class:fdso::EnergyFunctional
lastNullspaces_forLogging	src/OptimizationBackend/EnergyFunctional.h	/^	std::vector<VecX> lastNullspaces_forLogging;$/;"	m	class:fdso::EnergyFunctional
lastNullspaces_pose	src/OptimizationBackend/EnergyFunctional.h	/^	std::vector<VecX> lastNullspaces_pose;$/;"	m	class:fdso::EnergyFunctional
lastNullspaces_scale	src/OptimizationBackend/EnergyFunctional.h	/^	std::vector<VecX> lastNullspaces_scale;$/;"	m	class:fdso::EnergyFunctional
lastX	src/OptimizationBackend/EnergyFunctional.h	/^	VecX lastX;$/;"	m	class:fdso::EnergyFunctional
lastbS	src/OptimizationBackend/EnergyFunctional.h	/^	VecX lastbS;$/;"	m	class:fdso::EnergyFunctional
nFrames	src/OptimizationBackend/EnergyFunctional.h	/^	int nPoints, nFrames, nResiduals;$/;"	m	class:fdso::EnergyFunctional
nPoints	src/OptimizationBackend/EnergyFunctional.h	/^	int nPoints, nFrames, nResiduals;$/;"	m	class:fdso::EnergyFunctional
nResiduals	src/OptimizationBackend/EnergyFunctional.h	/^	int nPoints, nFrames, nResiduals;$/;"	m	class:fdso::EnergyFunctional
red	src/OptimizationBackend/EnergyFunctional.h	/^	IndexThreadReduce<Vec10>* red;$/;"	m	class:fdso::EnergyFunctional
resInA	src/OptimizationBackend/EnergyFunctional.h	/^	int resInA, resInL, resInM;$/;"	m	class:fdso::EnergyFunctional
resInL	src/OptimizationBackend/EnergyFunctional.h	/^	int resInA, resInL, resInM;$/;"	m	class:fdso::EnergyFunctional
resInM	src/OptimizationBackend/EnergyFunctional.h	/^	int resInA, resInL, resInM;$/;"	m	class:fdso::EnergyFunctional
fdso	src/OptimizationBackend/EnergyFunctionalStructs.cpp	/^namespace fdso$/;"	n	file:
fixLinearizationF	src/OptimizationBackend/EnergyFunctionalStructs.cpp	/^void EFResidual::fixLinearizationF(EnergyFunctional* ef)$/;"	f	class:fdso::EFResidual
takeData	src/OptimizationBackend/EnergyFunctionalStructs.cpp	/^void EFFrame::takeData()$/;"	f	class:fdso::EFFrame
takeData	src/OptimizationBackend/EnergyFunctionalStructs.cpp	/^void EFPoint::takeData()$/;"	f	class:fdso::EFPoint
takeDataF	src/OptimizationBackend/EnergyFunctionalStructs.cpp	/^void EFResidual::takeDataF()$/;"	f	class:fdso::EFResidual
EFFrame	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	EFFrame(FrameHessian* d) : data(d)$/;"	f	class:fdso::EFFrame
EFFrame	src/OptimizationBackend/EnergyFunctionalStructs.h	/^class EFFrame$/;"	c	namespace:fdso
EFPoint	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	EFPoint(PointHessian* d, EFFrame* host_) : data(d),host(host_)$/;"	f	class:fdso::EFPoint
EFPoint	src/OptimizationBackend/EnergyFunctionalStructs.h	/^class EFPoint$/;"	c	namespace:fdso
EFPointStatus	src/OptimizationBackend/EnergyFunctionalStructs.h	/^enum EFPointStatus {PS_GOOD=0, PS_MARGINALIZE, PS_DROP};$/;"	g	namespace:fdso
EFResidual	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	inline EFResidual(PointFrameResidual* org, EFPoint* point_, EFFrame* host_, EFFrame* target_) :$/;"	f	class:fdso::EFResidual
EFResidual	src/OptimizationBackend/EnergyFunctionalStructs.h	/^class EFResidual$/;"	c	namespace:fdso
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::EFResidual
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/EnergyFunctionalStructs.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::EFFrame
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/EnergyFunctionalStructs.h	/^    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::EFPoint
Hcd_accAF	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	VecCf Hcd_accAF;$/;"	m	class:fdso::EFPoint
Hcd_accLF	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	VecCf Hcd_accLF;$/;"	m	class:fdso::EFPoint
Hdd_accAF	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	float Hdd_accAF;$/;"	m	class:fdso::EFPoint
Hdd_accLF	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	float Hdd_accLF;$/;"	m	class:fdso::EFPoint
HdiF	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	float HdiF;$/;"	m	class:fdso::EFPoint
J	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	RawResidualJacobian* J;$/;"	m	class:fdso::EFResidual
JpJdF	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	EIGEN_ALIGN16 Vec8f JpJdF;$/;"	m	class:fdso::EFResidual
PS_DROP	src/OptimizationBackend/EnergyFunctionalStructs.h	/^enum EFPointStatus {PS_GOOD=0, PS_MARGINALIZE, PS_DROP};$/;"	e	enum:fdso::EFPointStatus
PS_GOOD	src/OptimizationBackend/EnergyFunctionalStructs.h	/^enum EFPointStatus {PS_GOOD=0, PS_MARGINALIZE, PS_DROP};$/;"	e	enum:fdso::EFPointStatus
PS_MARGINALIZE	src/OptimizationBackend/EnergyFunctionalStructs.h	/^enum EFPointStatus {PS_GOOD=0, PS_MARGINALIZE, PS_DROP};$/;"	e	enum:fdso::EFPointStatus
bdSumF	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	float bdSumF;$/;"	m	class:fdso::EFPoint
bd_accAF	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	float bd_accAF;$/;"	m	class:fdso::EFPoint
bd_accLF	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	float bd_accLF;$/;"	m	class:fdso::EFPoint
data	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	FrameHessian* data;$/;"	m	class:fdso::EFFrame
data	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	PointFrameResidual* data;$/;"	m	class:fdso::EFResidual
data	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	PointHessian* data;$/;"	m	class:fdso::EFPoint
delta	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	Vec8 delta;				\/\/ state - state_zero.$/;"	m	class:fdso::EFFrame
deltaF	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	float deltaF;$/;"	m	class:fdso::EFPoint
delta_prior	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	Vec8 delta_prior;		\/\/ = state-state_prior (E_prior = (delta_prior)' * diag(prior) * (delta_prior)$/;"	m	class:fdso::EFFrame
fdso	src/OptimizationBackend/EnergyFunctionalStructs.h	/^namespace fdso$/;"	n
frameID	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	int frameID;$/;"	m	class:fdso::EFFrame
host	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	EFFrame* host;$/;"	m	class:fdso::EFPoint
host	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	EFFrame* host;$/;"	m	class:fdso::EFResidual
hostIDX	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	int hostIDX, targetIDX;$/;"	m	class:fdso::EFResidual
idx	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	int idx;	\/\/ idx in frames.$/;"	m	class:fdso::EFFrame
idxInAll	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	int idxInAll;$/;"	m	class:fdso::EFResidual
idxInPoints	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	int idxInPoints;$/;"	m	class:fdso::EFPoint
isActive	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	inline const bool &isActive() const {return isActiveAndIsGoodNEW;}$/;"	f	class:fdso::EFResidual
isActiveAndIsGoodNEW	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	bool isActiveAndIsGoodNEW;$/;"	m	class:fdso::EFResidual
isLinearized	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	bool isLinearized;$/;"	m	class:fdso::EFResidual
point	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	EFPoint* point;$/;"	m	class:fdso::EFResidual
points	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	std::vector<EFPoint*> points;$/;"	m	class:fdso::EFFrame
prior	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	Vec8 prior;				\/\/ prior hessian (diagonal)$/;"	m	class:fdso::EFFrame
priorF	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	float priorF;$/;"	m	class:fdso::EFPoint
res_toZeroF	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	EIGEN_ALIGN16 VecNRf res_toZeroF;$/;"	m	class:fdso::EFResidual
residualsAll	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	std::vector<EFResidual*> residualsAll;$/;"	m	class:fdso::EFPoint
stateFlag	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	EFPointStatus stateFlag;$/;"	m	class:fdso::EFPoint
target	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	EFFrame* target;$/;"	m	class:fdso::EFResidual
targetIDX	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	int hostIDX, targetIDX;$/;"	m	class:fdso::EFResidual
~EFResidual	src/OptimizationBackend/EnergyFunctionalStructs.h	/^	inline ~EFResidual()$/;"	f	class:fdso::EFResidual
A	src/OptimizationBackend/MatrixAccumulators.h	/^  Eigen::Matrix<float,i,1> A;$/;"	m	class:fdso::AccumulatorX
A	src/OptimizationBackend/MatrixAccumulators.h	/^  Eigen::Matrix<float,i,j> A;$/;"	m	class:fdso::AccumulatorXX
A	src/OptimizationBackend/MatrixAccumulators.h	/^  float A;$/;"	m	class:fdso::Accumulator11
A1k	src/OptimizationBackend/MatrixAccumulators.h	/^  Eigen::Matrix<float,i,1> A1k;$/;"	m	class:fdso::AccumulatorX
A1k	src/OptimizationBackend/MatrixAccumulators.h	/^  Eigen::Matrix<float,i,j> A1k;$/;"	m	class:fdso::AccumulatorXX
A1m	src/OptimizationBackend/MatrixAccumulators.h	/^  Eigen::Matrix<float,i,1> A1m;$/;"	m	class:fdso::AccumulatorX
A1m	src/OptimizationBackend/MatrixAccumulators.h	/^  Eigen::Matrix<float,i,j> A1m;$/;"	m	class:fdso::AccumulatorXX
Accumulator11	src/OptimizationBackend/MatrixAccumulators.h	/^class Accumulator11$/;"	c	namespace:fdso
Accumulator14	src/OptimizationBackend/MatrixAccumulators.h	/^class Accumulator14$/;"	c	namespace:fdso
Accumulator9	src/OptimizationBackend/MatrixAccumulators.h	/^class Accumulator9$/;"	c	namespace:fdso
AccumulatorApprox	src/OptimizationBackend/MatrixAccumulators.h	/^class AccumulatorApprox$/;"	c	namespace:fdso
AccumulatorX	src/OptimizationBackend/MatrixAccumulators.h	/^class AccumulatorX$/;"	c	namespace:fdso
AccumulatorXX	src/OptimizationBackend/MatrixAccumulators.h	/^class AccumulatorXX$/;"	c	namespace:fdso
BotRight_Data	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float BotRight_Data[8];$/;"	m	class:fdso::AccumulatorApprox
BotRight_Data1k	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float BotRight_Data1k[8];$/;"	m	class:fdso::AccumulatorApprox
BotRight_Data1m	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float BotRight_Data1m[8];$/;"	m	class:fdso::AccumulatorApprox
Data	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float Data[60];$/;"	m	class:fdso::AccumulatorApprox
Data1k	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float Data1k[60];$/;"	m	class:fdso::AccumulatorApprox
Data1m	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float Data1m[60];$/;"	m	class:fdso::AccumulatorApprox
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::Accumulator11
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::Accumulator14
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::Accumulator9
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::AccumulatorApprox
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::AccumulatorX
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::AccumulatorXX
H	src/OptimizationBackend/MatrixAccumulators.h	/^  Mat1313f H;$/;"	m	class:fdso::AccumulatorApprox
H	src/OptimizationBackend/MatrixAccumulators.h	/^  Mat1414f H;$/;"	m	class:fdso::Accumulator14
H	src/OptimizationBackend/MatrixAccumulators.h	/^  Mat99f H;$/;"	m	class:fdso::Accumulator9
SSEData	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float SSEData[4*105];$/;"	m	class:fdso::Accumulator14
SSEData	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float SSEData[4*1];$/;"	m	class:fdso::Accumulator11
SSEData	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float SSEData[4*45];$/;"	m	class:fdso::Accumulator9
SSEData1k	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float SSEData1k[4*105];$/;"	m	class:fdso::Accumulator14
SSEData1k	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float SSEData1k[4*1];$/;"	m	class:fdso::Accumulator11
SSEData1k	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float SSEData1k[4*45];$/;"	m	class:fdso::Accumulator9
SSEData1m	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float SSEData1m[4*105];$/;"	m	class:fdso::Accumulator14
SSEData1m	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float SSEData1m[4*1];$/;"	m	class:fdso::Accumulator11
SSEData1m	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float SSEData1m[4*45];$/;"	m	class:fdso::Accumulator9
TopRight_Data	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float TopRight_Data[32];$/;"	m	class:fdso::AccumulatorApprox
TopRight_Data1k	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float TopRight_Data1k[32];$/;"	m	class:fdso::AccumulatorApprox
TopRight_Data1m	src/OptimizationBackend/MatrixAccumulators.h	/^  EIGEN_ALIGN16 float TopRight_Data1m[32];$/;"	m	class:fdso::AccumulatorApprox
b	src/OptimizationBackend/MatrixAccumulators.h	/^  Vec14f b;$/;"	m	class:fdso::Accumulator14
b	src/OptimizationBackend/MatrixAccumulators.h	/^  Vec9f b;$/;"	m	class:fdso::Accumulator9
fdso	src/OptimizationBackend/MatrixAccumulators.h	/^namespace fdso$/;"	n
finish	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void finish()$/;"	f	class:fdso::Accumulator11
finish	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void finish()$/;"	f	class:fdso::Accumulator14
finish	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void finish()$/;"	f	class:fdso::Accumulator9
finish	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void finish()$/;"	f	class:fdso::AccumulatorX
finish	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void finish()$/;"	f	class:fdso::AccumulatorXX
finish	src/OptimizationBackend/MatrixAccumulators.h	/^inline void finish()$/;"	f	class:fdso::AccumulatorApprox
initialize	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void initialize()$/;"	f	class:fdso::Accumulator11
initialize	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void initialize()$/;"	f	class:fdso::Accumulator14
initialize	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void initialize()$/;"	f	class:fdso::Accumulator9
initialize	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void initialize()$/;"	f	class:fdso::AccumulatorApprox
initialize	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void initialize()$/;"	f	class:fdso::AccumulatorX
initialize	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void initialize()$/;"	f	class:fdso::AccumulatorXX
num	src/OptimizationBackend/MatrixAccumulators.h	/^  size_t num;$/;"	m	class:fdso::Accumulator11
num	src/OptimizationBackend/MatrixAccumulators.h	/^  size_t num;$/;"	m	class:fdso::Accumulator14
num	src/OptimizationBackend/MatrixAccumulators.h	/^  size_t num;$/;"	m	class:fdso::Accumulator9
num	src/OptimizationBackend/MatrixAccumulators.h	/^  size_t num;$/;"	m	class:fdso::AccumulatorApprox
num	src/OptimizationBackend/MatrixAccumulators.h	/^  size_t num;$/;"	m	class:fdso::AccumulatorX
num	src/OptimizationBackend/MatrixAccumulators.h	/^  size_t num;$/;"	m	class:fdso::AccumulatorXX
numIn1	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::Accumulator11
numIn1	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::Accumulator14
numIn1	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::Accumulator9
numIn1	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::AccumulatorApprox
numIn1	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::AccumulatorX
numIn1	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::AccumulatorXX
numIn1k	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::Accumulator11
numIn1k	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::Accumulator14
numIn1k	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::Accumulator9
numIn1k	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::AccumulatorApprox
numIn1k	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::AccumulatorX
numIn1k	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::AccumulatorXX
numIn1m	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::Accumulator11
numIn1m	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::Accumulator14
numIn1m	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::Accumulator9
numIn1m	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::AccumulatorApprox
numIn1m	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::AccumulatorX
numIn1m	src/OptimizationBackend/MatrixAccumulators.h	/^  float numIn1, numIn1k, numIn1m;$/;"	m	class:fdso::AccumulatorXX
shiftUp	src/OptimizationBackend/MatrixAccumulators.h	/^  void shiftUp(bool force)$/;"	f	class:fdso::Accumulator11
shiftUp	src/OptimizationBackend/MatrixAccumulators.h	/^  void shiftUp(bool force)$/;"	f	class:fdso::Accumulator14
shiftUp	src/OptimizationBackend/MatrixAccumulators.h	/^  void shiftUp(bool force)$/;"	f	class:fdso::Accumulator9
shiftUp	src/OptimizationBackend/MatrixAccumulators.h	/^  void shiftUp(bool force)$/;"	f	class:fdso::AccumulatorApprox
shiftUp	src/OptimizationBackend/MatrixAccumulators.h	/^  void shiftUp(bool force)$/;"	f	class:fdso::AccumulatorX
shiftUp	src/OptimizationBackend/MatrixAccumulators.h	/^  void shiftUp(bool force)$/;"	f	class:fdso::AccumulatorXX
update	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void update($/;"	f	class:fdso::AccumulatorApprox
update	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void update(Eigen::Matrix<float,i,1> L, Eigen::Matrix<float,j,1> R, float w)$/;"	f	class:fdso::AccumulatorXX
update	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void update(Eigen::Matrix<float,i,1> L, float w)$/;"	f	class:fdso::AccumulatorX
updateBotRight	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateBotRight($/;"	f	class:fdso::AccumulatorApprox
updateNoWeight	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateNoWeight(Eigen::Matrix<float,i,1> L)$/;"	f	class:fdso::AccumulatorX
updateSSE	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateSSE($/;"	f	class:fdso::Accumulator11
updateSSE	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateSSE($/;"	f	class:fdso::Accumulator14
updateSSE	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateSSE($/;"	f	class:fdso::Accumulator9
updateSSE	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateSSE($/;"	f	class:fdso::AccumulatorApprox
updateSSENoShift	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateSSENoShift($/;"	f	class:fdso::Accumulator11
updateSSE_eighted	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateSSE_eighted($/;"	f	class:fdso::Accumulator9
updateSingle	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateSingle($/;"	f	class:fdso::Accumulator11
updateSingle	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateSingle($/;"	f	class:fdso::Accumulator14
updateSingle	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateSingle($/;"	f	class:fdso::Accumulator9
updateSingleNoShift	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateSingleNoShift($/;"	f	class:fdso::Accumulator11
updateSingleWeighted	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateSingleWeighted($/;"	f	class:fdso::Accumulator9
updateTopRight	src/OptimizationBackend/MatrixAccumulators.h	/^  inline void updateTopRight($/;"	f	class:fdso::AccumulatorApprox
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/OptimizationBackend/RawResidualJacobian.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	struct:fdso::RawResidualJacobian
JIdx	src/OptimizationBackend/RawResidualJacobian.h	/^	EIGEN_ALIGN16 VecNRf JIdx[2];			\/\/ 9x2$/;"	m	struct:fdso::RawResidualJacobian
JIdx2	src/OptimizationBackend/RawResidualJacobian.h	/^	EIGEN_ALIGN16 Mat22f JIdx2;				\/\/ 2x2$/;"	m	struct:fdso::RawResidualJacobian
Jab2	src/OptimizationBackend/RawResidualJacobian.h	/^	EIGEN_ALIGN16 Mat22f Jab2;			\/\/ 2x2$/;"	m	struct:fdso::RawResidualJacobian
JabF	src/OptimizationBackend/RawResidualJacobian.h	/^	EIGEN_ALIGN16 VecNRf JabF[2];			\/\/ 9x2$/;"	m	struct:fdso::RawResidualJacobian
JabJIdx	src/OptimizationBackend/RawResidualJacobian.h	/^	EIGEN_ALIGN16 Mat22f JabJIdx;			\/\/ 2x2$/;"	m	struct:fdso::RawResidualJacobian
Jpdc	src/OptimizationBackend/RawResidualJacobian.h	/^	EIGEN_ALIGN16 VecCf Jpdc[2];			\/\/ 2x4$/;"	m	struct:fdso::RawResidualJacobian
Jpdd	src/OptimizationBackend/RawResidualJacobian.h	/^	EIGEN_ALIGN16 Vec2f Jpdd;				\/\/ 2x1$/;"	m	struct:fdso::RawResidualJacobian
Jpdxi	src/OptimizationBackend/RawResidualJacobian.h	/^	EIGEN_ALIGN16 Vec6f Jpdxi[2];			\/\/ 2x6$/;"	m	struct:fdso::RawResidualJacobian
RawResidualJacobian	src/OptimizationBackend/RawResidualJacobian.h	/^struct RawResidualJacobian$/;"	s	namespace:fdso
fdso	src/OptimizationBackend/RawResidualJacobian.h	/^namespace fdso$/;"	n
resF	src/OptimizationBackend/RawResidualJacobian.h	/^	EIGEN_ALIGN16 VecNRf resF;$/;"	m	struct:fdso::RawResidualJacobian
calib	src/main_dso_pangolin.cpp	/^std::string calib = "";$/;"	v
disableROS	src/main_dso_pangolin.cpp	/^bool disableROS = false;$/;"	v
end	src/main_dso_pangolin.cpp	/^int end=100000;$/;"	v
exitThread	src/main_dso_pangolin.cpp	/^void exitThread()$/;"	f
firstRosSpin	src/main_dso_pangolin.cpp	/^bool firstRosSpin=false;$/;"	v
gammaCalib	src/main_dso_pangolin.cpp	/^std::string gammaCalib = "";$/;"	v
main	src/main_dso_pangolin.cpp	/^int main( int argc, char** argv )$/;"	f
mode	src/main_dso_pangolin.cpp	/^int mode=0;$/;"	v
my_exit_handler	src/main_dso_pangolin.cpp	/^void my_exit_handler(int s)$/;"	f
parseArgument	src/main_dso_pangolin.cpp	/^void parseArgument(char* arg)$/;"	f
playbackSpeed	src/main_dso_pangolin.cpp	/^float playbackSpeed=0;	\/\/ 0 for linearize (play as fast as possible, while sequentializing tracking & mapping). otherwise, factor on timestamps.$/;"	v
prefetch	src/main_dso_pangolin.cpp	/^bool prefetch = false;$/;"	v
preload	src/main_dso_pangolin.cpp	/^bool preload=false;$/;"	v
rescale	src/main_dso_pangolin.cpp	/^double rescale = 1;$/;"	v
reverse	src/main_dso_pangolin.cpp	/^bool reverse = false;$/;"	v
settingsDefault	src/main_dso_pangolin.cpp	/^void settingsDefault(int preset)$/;"	f
source	src/main_dso_pangolin.cpp	/^std::string source = "";$/;"	v
start	src/main_dso_pangolin.cpp	/^int start=0;$/;"	v
useSampleOutput	src/main_dso_pangolin.cpp	/^bool useSampleOutput=false;$/;"	v
vignette	src/main_dso_pangolin.cpp	/^std::string vignette = "";$/;"	v
ImageFolderReader	src/util/DatasetReader.h	/^	ImageFolderReader(std::string path, std::string calibFile, std::string gammaFile, std::string vignetteFile)$/;"	f	class:ImageFolderReader
ImageFolderReader	src/util/DatasetReader.h	/^class ImageFolderReader$/;"	c
PrepImageItem	src/util/DatasetReader.h	/^	inline PrepImageItem(int _id)$/;"	f	struct:PrepImageItem
PrepImageItem	src/util/DatasetReader.h	/^struct PrepImageItem$/;"	s
calibfile	src/util/DatasetReader.h	/^	std::string calibfile;$/;"	m	class:ImageFolderReader
databuffer	src/util/DatasetReader.h	/^	char* databuffer;$/;"	m	class:ImageFolderReader
exposures	src/util/DatasetReader.h	/^	std::vector<float> exposures;$/;"	m	class:ImageFolderReader
files	src/util/DatasetReader.h	/^	std::vector<std::string> files;$/;"	m	class:ImageFolderReader
getCalibMono	src/util/DatasetReader.h	/^	void getCalibMono(Eigen::Matrix3f &K, int &w, int &h)$/;"	f	class:ImageFolderReader
getImage	src/util/DatasetReader.h	/^	ImageAndExposure* getImage(int id, bool forceLoadDirectly=false)$/;"	f	class:ImageFolderReader
getImageRaw	src/util/DatasetReader.h	/^	MinimalImageB* getImageRaw(int id)$/;"	f	class:ImageFolderReader
getImageRaw_internal	src/util/DatasetReader.h	/^	MinimalImageB* getImageRaw_internal(int id, int unused)$/;"	f	class:ImageFolderReader
getImage_internal	src/util/DatasetReader.h	/^	ImageAndExposure* getImage_internal(int id, int unused)$/;"	f	class:ImageFolderReader
getNumImages	src/util/DatasetReader.h	/^	int getNumImages()$/;"	f	class:ImageFolderReader
getOriginalCalib	src/util/DatasetReader.h	/^	Eigen::VectorXf getOriginalCalib()$/;"	f	class:ImageFolderReader
getOriginalDimensions	src/util/DatasetReader.h	/^	Eigen::Vector2i getOriginalDimensions()$/;"	f	class:ImageFolderReader
getPhotometricGamma	src/util/DatasetReader.h	/^	inline float* getPhotometricGamma()$/;"	f	class:ImageFolderReader
getTimestamp	src/util/DatasetReader.h	/^	double getTimestamp(int id)$/;"	f	class:ImageFolderReader
getdir	src/util/DatasetReader.h	/^inline int getdir (std::string dir, std::vector<std::string> &files)$/;"	f
height	src/util/DatasetReader.h	/^	int width, height;$/;"	m	class:ImageFolderReader
heightOrg	src/util/DatasetReader.h	/^	int widthOrg, heightOrg;$/;"	m	class:ImageFolderReader
id	src/util/DatasetReader.h	/^	int id;$/;"	m	struct:PrepImageItem
isQueud	src/util/DatasetReader.h	/^	bool isQueud;$/;"	m	struct:PrepImageItem
isZipped	src/util/DatasetReader.h	/^	bool isZipped;$/;"	m	class:ImageFolderReader
loadTimestamps	src/util/DatasetReader.h	/^	inline void loadTimestamps()$/;"	f	class:ImageFolderReader
path	src/util/DatasetReader.h	/^	std::string path;$/;"	m	class:ImageFolderReader
preloadedImages	src/util/DatasetReader.h	/^	std::vector<ImageAndExposure*> preloadedImages;$/;"	m	class:ImageFolderReader
prepImage	src/util/DatasetReader.h	/^	void prepImage(int id, bool as8U=false)$/;"	f	class:ImageFolderReader
pt	src/util/DatasetReader.h	/^	ImageAndExposure* pt;$/;"	m	struct:PrepImageItem
release	src/util/DatasetReader.h	/^	inline void release()$/;"	f	struct:PrepImageItem
setBaseline	src/util/DatasetReader.h	/^    void setBaseline()$/;"	f	class:ImageFolderReader
setGlobalCalibration	src/util/DatasetReader.h	/^	void setGlobalCalibration()$/;"	f	class:ImageFolderReader
split	src/util/DatasetReader.h	/^inline void split(const std::string& src, const std::string& delim, std::vector<std::string>& dest)$/;"	f
timestamps	src/util/DatasetReader.h	/^	std::vector<double> timestamps;$/;"	m	class:ImageFolderReader
undistort	src/util/DatasetReader.h	/^	Undistort* undistort;$/;"	m	class:ImageFolderReader
width	src/util/DatasetReader.h	/^	int width, height;$/;"	m	class:ImageFolderReader
widthOrg	src/util/DatasetReader.h	/^	int widthOrg, heightOrg;$/;"	m	class:ImageFolderReader
ziparchive	src/util/DatasetReader.h	/^	zip_t* ziparchive;$/;"	m	class:ImageFolderReader
~ImageFolderReader	src/util/DatasetReader.h	/^	~ImageFolderReader()$/;"	f	class:ImageFolderReader
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/util/FrameShell.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::FrameShell
FrameShell	src/util/FrameShell.h	/^	inline FrameShell()$/;"	f	class:fdso::FrameShell
FrameShell	src/util/FrameShell.h	/^class FrameShell$/;"	c	namespace:fdso
aff_g2l	src/util/FrameShell.h	/^	AffLight aff_g2l;$/;"	m	class:fdso::FrameShell
camToTrackingRef	src/util/FrameShell.h	/^	SE3 camToTrackingRef;$/;"	m	class:fdso::FrameShell
camToWorld	src/util/FrameShell.h	/^	SE3 camToWorld;				\/\/ Write: TRACKING, while frame is still fresh; MAPPING: only when locked [shellPoseMutex].$/;"	m	class:fdso::FrameShell
descriptorsLeft	src/util/FrameShell.h	/^	cv::Mat descriptorsLeft,descriptorsRight;$/;"	m	class:fdso::FrameShell
descriptorsRight	src/util/FrameShell.h	/^	cv::Mat descriptorsLeft,descriptorsRight;$/;"	m	class:fdso::FrameShell
fdso	src/util/FrameShell.h	/^namespace fdso$/;"	n
id	src/util/FrameShell.h	/^	int id; 			\/\/ INTERNAL ID, starting at zero.$/;"	m	class:fdso::FrameShell
imageLeft	src/util/FrameShell.h	/^	cv::Mat imageLeft,imageRight;$/;"	m	class:fdso::FrameShell
imageRight	src/util/FrameShell.h	/^	cv::Mat imageLeft,imageRight;$/;"	m	class:fdso::FrameShell
incoming_id	src/util/FrameShell.h	/^	int incoming_id;	\/\/ ID passed into DSO$/;"	m	class:fdso::FrameShell
keypointsLeft	src/util/FrameShell.h	/^	std::vector<cv::KeyPoint> keypointsLeft,keypointsRight;$/;"	m	class:fdso::FrameShell
keypointsRight	src/util/FrameShell.h	/^	std::vector<cv::KeyPoint> keypointsLeft,keypointsRight;$/;"	m	class:fdso::FrameShell
marginalizedAt	src/util/FrameShell.h	/^	int marginalizedAt;$/;"	m	class:fdso::FrameShell
movedByOpt	src/util/FrameShell.h	/^	double movedByOpt;$/;"	m	class:fdso::FrameShell
poseValid	src/util/FrameShell.h	/^	bool poseValid;$/;"	m	class:fdso::FrameShell
statistics_goodResOnThis	src/util/FrameShell.h	/^	int statistics_goodResOnThis;$/;"	m	class:fdso::FrameShell
statistics_outlierResOnThis	src/util/FrameShell.h	/^	int statistics_outlierResOnThis;$/;"	m	class:fdso::FrameShell
timestamp	src/util/FrameShell.h	/^	double timestamp;		\/\/ timestamp passed into DSO.$/;"	m	class:fdso::FrameShell
trackingRef	src/util/FrameShell.h	/^	FrameShell* trackingRef;$/;"	m	class:fdso::FrameShell
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/util/ImageAndExposure.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::ImageAndExposure
ImageAndExposure	src/util/ImageAndExposure.h	/^	inline ImageAndExposure(int w_, int h_, double timestamp_=0) : w(w_), h(h_), timestamp(timestamp_)$/;"	f	class:fdso::ImageAndExposure
ImageAndExposure	src/util/ImageAndExposure.h	/^class ImageAndExposure$/;"	c	namespace:fdso
copyMetaTo	src/util/ImageAndExposure.h	/^	inline void copyMetaTo(ImageAndExposure &other)$/;"	f	class:fdso::ImageAndExposure
exposure_time	src/util/ImageAndExposure.h	/^	float exposure_time;	\/\/ exposure time in ms.$/;"	m	class:fdso::ImageAndExposure
fdso	src/util/ImageAndExposure.h	/^namespace fdso$/;"	n
getDeepCopy	src/util/ImageAndExposure.h	/^	inline ImageAndExposure* getDeepCopy()$/;"	f	class:fdso::ImageAndExposure
h	src/util/ImageAndExposure.h	/^	int w,h;				\/\/ width and height;$/;"	m	class:fdso::ImageAndExposure
image	src/util/ImageAndExposure.h	/^	float* image;			\/\/ irradiance. between 0 and 256$/;"	m	class:fdso::ImageAndExposure
timestamp	src/util/ImageAndExposure.h	/^	double timestamp;$/;"	m	class:fdso::ImageAndExposure
w	src/util/ImageAndExposure.h	/^	int w,h;				\/\/ width and height;$/;"	m	class:fdso::ImageAndExposure
~ImageAndExposure	src/util/ImageAndExposure.h	/^	inline ~ImageAndExposure()$/;"	f	class:fdso::ImageAndExposure
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/util/IndexThreadReduce.h	/^        EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::IndexThreadReduce
IndexThreadReduce	src/util/IndexThreadReduce.h	/^	inline IndexThreadReduce()$/;"	f	class:fdso::IndexThreadReduce
IndexThreadReduce	src/util/IndexThreadReduce.h	/^class IndexThreadReduce$/;"	c	namespace:fdso
callPerIndex	src/util/IndexThreadReduce.h	/^	boost::function<void(int,int,Running*,int)> callPerIndex;$/;"	m	class:fdso::IndexThreadReduce
callPerIndexDefault	src/util/IndexThreadReduce.h	/^	void callPerIndexDefault(int i, int j,Running* k, int tid)$/;"	f	class:fdso::IndexThreadReduce
done_signal	src/util/IndexThreadReduce.h	/^	boost::condition_variable done_signal;$/;"	m	class:fdso::IndexThreadReduce
exMutex	src/util/IndexThreadReduce.h	/^	boost::mutex exMutex;$/;"	m	class:fdso::IndexThreadReduce
fdso	src/util/IndexThreadReduce.h	/^namespace fdso$/;"	n
gotOne	src/util/IndexThreadReduce.h	/^	bool gotOne[NUM_THREADS];$/;"	m	class:fdso::IndexThreadReduce
isDone	src/util/IndexThreadReduce.h	/^	bool isDone[NUM_THREADS];$/;"	m	class:fdso::IndexThreadReduce
maxIndex	src/util/IndexThreadReduce.h	/^	int maxIndex;$/;"	m	class:fdso::IndexThreadReduce
nextIndex	src/util/IndexThreadReduce.h	/^	int nextIndex;$/;"	m	class:fdso::IndexThreadReduce
reduce	src/util/IndexThreadReduce.h	/^	inline void reduce(boost::function<void(int,int,Running*,int)> callPerIndex, int first, int end, int stepSize = 0)$/;"	f	class:fdso::IndexThreadReduce
running	src/util/IndexThreadReduce.h	/^	bool running;$/;"	m	class:fdso::IndexThreadReduce
stats	src/util/IndexThreadReduce.h	/^	Running stats;$/;"	m	class:fdso::IndexThreadReduce
stepSize	src/util/IndexThreadReduce.h	/^	int stepSize;$/;"	m	class:fdso::IndexThreadReduce
todo_signal	src/util/IndexThreadReduce.h	/^	boost::condition_variable todo_signal;$/;"	m	class:fdso::IndexThreadReduce
workerLoop	src/util/IndexThreadReduce.h	/^	void workerLoop(int idx)$/;"	f	class:fdso::IndexThreadReduce
workerThreads	src/util/IndexThreadReduce.h	/^	boost::thread workerThreads[NUM_THREADS];$/;"	m	class:fdso::IndexThreadReduce
~IndexThreadReduce	src/util/IndexThreadReduce.h	/^	inline ~IndexThreadReduce()$/;"	f	class:fdso::IndexThreadReduce
MinimalImage	src/util/MinimalImage.h	/^	inline MinimalImage(int w_, int h_) : w(w_), h(h_)$/;"	f	class:fdso::MinimalImage
MinimalImage	src/util/MinimalImage.h	/^	inline MinimalImage(int w_, int h_, T* data_) : w(w_), h(h_)$/;"	f	class:fdso::MinimalImage
MinimalImage	src/util/MinimalImage.h	/^class MinimalImage$/;"	c	namespace:fdso
MinimalImageB	src/util/MinimalImage.h	/^typedef MinimalImage<unsigned char> MinimalImageB;$/;"	t	namespace:fdso
MinimalImageB16	src/util/MinimalImage.h	/^typedef MinimalImage<unsigned short> MinimalImageB16;$/;"	t	namespace:fdso
MinimalImageB3	src/util/MinimalImage.h	/^typedef MinimalImage<Vec3b> MinimalImageB3;$/;"	t	namespace:fdso
MinimalImageF	src/util/MinimalImage.h	/^typedef MinimalImage<float> MinimalImageF;$/;"	t	namespace:fdso
MinimalImageF3	src/util/MinimalImage.h	/^typedef MinimalImage<Vec3f> MinimalImageF3;$/;"	t	namespace:fdso
Vec3b	src/util/MinimalImage.h	/^typedef Eigen::Matrix<unsigned char,3,1> Vec3b;$/;"	t	namespace:fdso
at	src/util/MinimalImage.h	/^	inline T& at(int i) {return data[i];}$/;"	f	class:fdso::MinimalImage
at	src/util/MinimalImage.h	/^	inline T& at(int x, int y) {return data[(int)x+((int)y)*w];}$/;"	f	class:fdso::MinimalImage
data	src/util/MinimalImage.h	/^	T* data;$/;"	m	class:fdso::MinimalImage
fdso	src/util/MinimalImage.h	/^namespace fdso$/;"	n
getClone	src/util/MinimalImage.h	/^	inline MinimalImage* getClone()$/;"	f	class:fdso::MinimalImage
h	src/util/MinimalImage.h	/^	int h;$/;"	m	class:fdso::MinimalImage
ownData	src/util/MinimalImage.h	/^	bool ownData;$/;"	m	class:fdso::MinimalImage
setBlack	src/util/MinimalImage.h	/^	inline void setBlack()$/;"	f	class:fdso::MinimalImage
setConst	src/util/MinimalImage.h	/^	inline void setConst(T val)$/;"	f	class:fdso::MinimalImage
setPixel1	src/util/MinimalImage.h	/^	inline void setPixel1(const float &u, const float &v, T val)$/;"	f	class:fdso::MinimalImage
setPixel4	src/util/MinimalImage.h	/^	inline void setPixel4(const float &u, const float &v, T val)$/;"	f	class:fdso::MinimalImage
setPixel9	src/util/MinimalImage.h	/^	inline void setPixel9(const int &u, const int &v, T val)$/;"	f	class:fdso::MinimalImage
setPixelCirc	src/util/MinimalImage.h	/^	inline void setPixelCirc(const int &u, const int &v, T val)$/;"	f	class:fdso::MinimalImage
w	src/util/MinimalImage.h	/^	int w;$/;"	m	class:fdso::MinimalImage
~MinimalImage	src/util/MinimalImage.h	/^	inline ~MinimalImage()$/;"	f	class:fdso::MinimalImage
AffLight	src/util/NumType.h	/^	AffLight() : a(0), b(0) {};$/;"	f	struct:fdso::AffLight
AffLight	src/util/NumType.h	/^	AffLight(double a_, double b_) : a(a_), b(b_) {};$/;"	f	struct:fdso::AffLight
AffLight	src/util/NumType.h	/^struct AffLight$/;"	s	namespace:fdso
CPARS	src/util/NumType.h	54;"	d
MAX_RES_PER_POINT	src/util/NumType.h	41;"	d
Mat1010	src/util/NumType.h	/^typedef Eigen::Matrix<double,10,10> Mat1010;$/;"	t	namespace:fdso
Mat1010f	src/util/NumType.h	/^typedef Eigen::Matrix<float,10,10> Mat1010f;$/;"	t	namespace:fdso
Mat103f	src/util/NumType.h	/^typedef Eigen::Matrix<float,10,3> Mat103f;$/;"	t	namespace:fdso
Mat1212f	src/util/NumType.h	/^typedef Eigen::Matrix<float,12,12> Mat1212f;$/;"	t	namespace:fdso
Mat12f	src/util/NumType.h	/^typedef Eigen::Matrix<float,1,2> Mat12f;$/;"	t	namespace:fdso
Mat1313	src/util/NumType.h	/^typedef Eigen::Matrix<double,13,13> Mat1313;$/;"	t	namespace:fdso
Mat1313f	src/util/NumType.h	/^typedef Eigen::Matrix<float,13,13> Mat1313f;$/;"	t	namespace:fdso
Mat1414	src/util/NumType.h	/^typedef Eigen::Matrix<double,14,14> Mat1414;$/;"	t	namespace:fdso
Mat1414f	src/util/NumType.h	/^typedef Eigen::Matrix<float,14,14> Mat1414f;$/;"	t	namespace:fdso
Mat18	src/util/NumType.h	/^typedef Eigen::Matrix<double,1,8> Mat18;$/;"	t	namespace:fdso
Mat18f	src/util/NumType.h	/^typedef Eigen::Matrix<float,1,8> Mat18f;$/;"	t	namespace:fdso
Mat19	src/util/NumType.h	/^typedef Eigen::Matrix<double,1,9> Mat19;$/;"	t	namespace:fdso
Mat22	src/util/NumType.h	/^typedef Eigen::Matrix<double,2,2> Mat22;$/;"	t	namespace:fdso
Mat22f	src/util/NumType.h	/^typedef Eigen::Matrix<float,2,2> Mat22f;$/;"	t	namespace:fdso
Mat33	src/util/NumType.h	/^typedef Eigen::Matrix<double,3,3> Mat33;$/;"	t	namespace:fdso
Mat33f	src/util/NumType.h	/^typedef Eigen::Matrix<float,3,3> Mat33f;$/;"	t	namespace:fdso
Mat34f	src/util/NumType.h	/^typedef	Eigen::Matrix<float,3,4> Mat34f;$/;"	t	namespace:fdso
Mat42	src/util/NumType.h	/^typedef Eigen::Matrix<double,4,2> Mat42;$/;"	t	namespace:fdso
Mat42f	src/util/NumType.h	/^typedef Eigen::Matrix<float,4,2> Mat42f;$/;"	t	namespace:fdso
Mat43	src/util/NumType.h	/^typedef Eigen::Matrix<double,4,3> Mat43;$/;"	t	namespace:fdso
Mat44	src/util/NumType.h	/^typedef Eigen::Matrix<double,4,4> Mat44;$/;"	t	namespace:fdso
Mat44f	src/util/NumType.h	/^typedef Eigen::Matrix<float,4,4> Mat44f;$/;"	t	namespace:fdso
Mat48	src/util/NumType.h	/^typedef Eigen::Matrix<double,4,8> Mat48;$/;"	t	namespace:fdso
Mat49	src/util/NumType.h	/^typedef Eigen::Matrix<double,4,9> Mat49;$/;"	t	namespace:fdso
Mat53	src/util/NumType.h	/^typedef Eigen::Matrix<double,5,3> Mat53;$/;"	t	namespace:fdso
Mat62f	src/util/NumType.h	/^typedef Eigen::Matrix<float,6,2> Mat62f;$/;"	t	namespace:fdso
Mat66	src/util/NumType.h	/^typedef Eigen::Matrix<double,6,6> Mat66;$/;"	t	namespace:fdso
Mat66f	src/util/NumType.h	/^typedef Eigen::Matrix<float,6,6> Mat66f;$/;"	t	namespace:fdso
Mat77	src/util/NumType.h	/^typedef Eigen::Matrix<double,7,7> Mat77;$/;"	t	namespace:fdso
Mat81	src/util/NumType.h	/^typedef Eigen::Matrix<double,8,1> Mat81;$/;"	t	namespace:fdso
Mat810	src/util/NumType.h	/^typedef Eigen::Matrix<double,8,10> Mat810;$/;"	t	namespace:fdso
Mat83	src/util/NumType.h	/^typedef Eigen::Matrix<double,8,3> Mat83;$/;"	t	namespace:fdso
Mat84	src/util/NumType.h	/^typedef Eigen::Matrix<double,8,4> Mat84;$/;"	t	namespace:fdso
Mat84f	src/util/NumType.h	/^typedef Eigen::Matrix<float,8,4> Mat84f;$/;"	t	namespace:fdso
Mat88	src/util/NumType.h	/^typedef Eigen::Matrix<double,8,8> Mat88;$/;"	t	namespace:fdso
Mat88f	src/util/NumType.h	/^typedef Eigen::Matrix<float,8,8> Mat88f;$/;"	t	namespace:fdso
Mat89	src/util/NumType.h	/^typedef Eigen::Matrix<double,8,9> Mat89;$/;"	t	namespace:fdso
Mat8C	src/util/NumType.h	/^typedef Eigen::Matrix<double,8,CPARS> Mat8C;$/;"	t	namespace:fdso
Mat8Cf	src/util/NumType.h	/^typedef Eigen::Matrix<float,8,CPARS> Mat8Cf;$/;"	t	namespace:fdso
Mat91	src/util/NumType.h	/^typedef Eigen::Matrix<double,9,1> Mat91;$/;"	t	namespace:fdso
Mat94	src/util/NumType.h	/^typedef Eigen::Matrix<double,9,4> Mat94;$/;"	t	namespace:fdso
Mat98	src/util/NumType.h	/^typedef Eigen::Matrix<double,9,8> Mat98;$/;"	t	namespace:fdso
Mat99f	src/util/NumType.h	/^typedef Eigen::Matrix<float,9,9> Mat99f;$/;"	t	namespace:fdso
MatC10	src/util/NumType.h	/^typedef Eigen::Matrix<double,CPARS,10> MatC10;$/;"	t	namespace:fdso
MatC8	src/util/NumType.h	/^typedef Eigen::Matrix<double,CPARS,8> MatC8;$/;"	t	namespace:fdso
MatC8f	src/util/NumType.h	/^typedef Eigen::Matrix<float,CPARS,8> MatC8f;$/;"	t	namespace:fdso
MatCC	src/util/NumType.h	/^typedef Eigen::Matrix<double,CPARS,CPARS> MatCC;$/;"	t	namespace:fdso
MatPCPC	src/util/NumType.h	/^typedef Eigen::Matrix<double,8+CPARS+1,8+CPARS+1> MatPCPC;$/;"	t	namespace:fdso
MatPCPCf	src/util/NumType.h	/^typedef Eigen::Matrix<float,8+CPARS+1,8+CPARS+1> MatPCPCf;$/;"	t	namespace:fdso
MatToDynamic	src/util/NumType.h	59;"	d
MatXX	src/util/NumType.h	/^typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> MatXX;$/;"	t	namespace:fdso
MatXXf	src/util/NumType.h	/^typedef Eigen::Matrix<float,Eigen::Dynamic,Eigen::Dynamic> MatXXf;$/;"	t	namespace:fdso
NUM_THREADS	src/util/NumType.h	42;"	d
SE3	src/util/NumType.h	/^typedef Sophus::SE3d SE3;$/;"	t	namespace:fdso
SO3	src/util/NumType.h	/^typedef Sophus::SO3d SO3;$/;"	t	namespace:fdso
SSEE	src/util/NumType.h	38;"	d
Sim3	src/util/NumType.h	/^typedef Sophus::Sim3d Sim3;$/;"	t	namespace:fdso
Vec10	src/util/NumType.h	/^typedef Eigen::Matrix<double,10,1> Vec10;$/;"	t	namespace:fdso
Vec10f	src/util/NumType.h	/^typedef Eigen::Matrix<float,10,1> Vec10f;$/;"	t	namespace:fdso
Vec12f	src/util/NumType.h	/^typedef Eigen::Matrix<float,12,1> Vec12f;$/;"	t	namespace:fdso
Vec13	src/util/NumType.h	/^typedef Eigen::Matrix<double,13,1> Vec13;$/;"	t	namespace:fdso
Vec13f	src/util/NumType.h	/^typedef Eigen::Matrix<float,13,1> Vec13f;$/;"	t	namespace:fdso
Vec14	src/util/NumType.h	/^typedef Eigen::Matrix<double,14,1> Vec14;$/;"	t	namespace:fdso
Vec14f	src/util/NumType.h	/^typedef Eigen::Matrix<float,14,1> Vec14f;$/;"	t	namespace:fdso
Vec2	src/util/NumType.h	/^typedef Eigen::Matrix<double,2,1> Vec2;$/;"	t	namespace:fdso
Vec2f	src/util/NumType.h	/^typedef Eigen::Matrix<float,2,1> Vec2f;$/;"	t	namespace:fdso
Vec3	src/util/NumType.h	/^typedef Eigen::Matrix<double,3,1> Vec3;$/;"	t	namespace:fdso
Vec3f	src/util/NumType.h	/^typedef Eigen::Matrix<float,3,1> Vec3f;$/;"	t	namespace:fdso
Vec4	src/util/NumType.h	/^typedef Eigen::Matrix<double,4,1> Vec4;$/;"	t	namespace:fdso
Vec4f	src/util/NumType.h	/^typedef Eigen::Matrix<float,4,1> Vec4f;$/;"	t	namespace:fdso
Vec5	src/util/NumType.h	/^typedef Eigen::Matrix<double,5,1> Vec5;$/;"	t	namespace:fdso
Vec6	src/util/NumType.h	/^typedef Eigen::Matrix<double,6,1> Vec6;$/;"	t	namespace:fdso
Vec6f	src/util/NumType.h	/^typedef Eigen::Matrix<float,6,1> Vec6f;$/;"	t	namespace:fdso
Vec7	src/util/NumType.h	/^typedef Eigen::Matrix<double,7,1> Vec7;$/;"	t	namespace:fdso
Vec8	src/util/NumType.h	/^typedef Eigen::Matrix<double,8,1> Vec8;$/;"	t	namespace:fdso
Vec8f	src/util/NumType.h	/^typedef Eigen::Matrix<float,8,1> Vec8f;$/;"	t	namespace:fdso
Vec9	src/util/NumType.h	/^typedef Eigen::Matrix<double,9,1> Vec9;$/;"	t	namespace:fdso
Vec9f	src/util/NumType.h	/^typedef Eigen::Matrix<float,9,1> Vec9f;$/;"	t	namespace:fdso
VecC	src/util/NumType.h	/^typedef Eigen::Matrix<double,CPARS,1> VecC;$/;"	t	namespace:fdso
VecCf	src/util/NumType.h	/^typedef Eigen::Matrix<float,CPARS,1> VecCf;$/;"	t	namespace:fdso
VecNRf	src/util/NumType.h	/^typedef Eigen::Matrix<float,MAX_RES_PER_POINT,1> VecNRf;$/;"	t	namespace:fdso
VecPC	src/util/NumType.h	/^typedef Eigen::Matrix<double,8+CPARS+1,1> VecPC;$/;"	t	namespace:fdso
VecPCf	src/util/NumType.h	/^typedef Eigen::Matrix<float,8+CPARS+1,1> VecPCf;$/;"	t	namespace:fdso
VecX	src/util/NumType.h	/^typedef Eigen::Matrix<double,Eigen::Dynamic,1> VecX;$/;"	t	namespace:fdso
VecXf	src/util/NumType.h	/^typedef Eigen::Matrix<float,Eigen::Dynamic,1> VecXf;$/;"	t	namespace:fdso
a	src/util/NumType.h	/^	double a,b;	\/\/ I_frame = exp(a)*I_global + b. \/\/ I_global = exp(-a)*(I_frame - b).$/;"	m	struct:fdso::AffLight
b	src/util/NumType.h	/^	double a,b;	\/\/ I_frame = exp(a)*I_global + b. \/\/ I_global = exp(-a)*(I_frame - b).$/;"	m	struct:fdso::AffLight
fdso	src/util/NumType.h	/^namespace fdso$/;"	n
fromToVecExposure	src/util/NumType.h	/^	static Vec2 fromToVecExposure(float exposureF, float exposureT, AffLight g2F, AffLight g2T)$/;"	f	struct:fdso::AffLight
todouble	src/util/NumType.h	45;"	d
vec	src/util/NumType.h	/^	Vec2 vec()$/;"	f	struct:fdso::AffLight
PhotometricUndistorter	src/util/Undistort.cpp	/^PhotometricUndistorter::PhotometricUndistorter($/;"	f	class:fdso::PhotometricUndistorter
UndistortEquidistant	src/util/Undistort.cpp	/^UndistortEquidistant::UndistortEquidistant(const char* configFileName, bool noprefix)$/;"	f	class:fdso::UndistortEquidistant
UndistortFOV	src/util/Undistort.cpp	/^UndistortFOV::UndistortFOV(const char* configFileName, bool noprefix)$/;"	f	class:fdso::UndistortFOV
UndistortKB	src/util/Undistort.cpp	/^UndistortKB::UndistortKB(const char* configFileName, bool noprefix)$/;"	f	class:fdso::UndistortKB
UndistortPinhole	src/util/Undistort.cpp	/^UndistortPinhole::UndistortPinhole(const char* configFileName, bool noprefix)$/;"	f	class:fdso::UndistortPinhole
UndistortRadTan	src/util/Undistort.cpp	/^UndistortRadTan::UndistortRadTan(const char* configFileName, bool noprefix)$/;"	f	class:fdso::UndistortRadTan
applyBlurNoise	src/util/Undistort.cpp	/^void Undistort::applyBlurNoise(float* img) const$/;"	f	class:fdso::Undistort
distortCoordinates	src/util/Undistort.cpp	/^void UndistortEquidistant::distortCoordinates(float* in_x, float* in_y, float* out_x, float* out_y, int n) const$/;"	f	class:fdso::UndistortEquidistant
distortCoordinates	src/util/Undistort.cpp	/^void UndistortFOV::distortCoordinates(float* in_x, float* in_y, float* out_x, float* out_y, int n) const$/;"	f	class:fdso::UndistortFOV
distortCoordinates	src/util/Undistort.cpp	/^void UndistortKB::distortCoordinates(float* in_x, float* in_y, float* out_x, float* out_y, int n) const$/;"	f	class:fdso::UndistortKB
distortCoordinates	src/util/Undistort.cpp	/^void UndistortPinhole::distortCoordinates(float* in_x, float* in_y, float* out_x, float* out_y, int n) const$/;"	f	class:fdso::UndistortPinhole
distortCoordinates	src/util/Undistort.cpp	/^void UndistortRadTan::distortCoordinates(float* in_x, float* in_y, float* out_x, float* out_y, int n) const$/;"	f	class:fdso::UndistortRadTan
fdso	src/util/Undistort.cpp	/^namespace fdso$/;"	n	file:
getUndistorterForFile	src/util/Undistort.cpp	/^Undistort* Undistort::getUndistorterForFile(std::string configFilename, std::string gammaFilename, std::string vignetteFilename)$/;"	f	class:fdso::Undistort
loadPhotometricCalibration	src/util/Undistort.cpp	/^void Undistort::loadPhotometricCalibration(std::string file, std::string noiseImage, std::string vignetteImage)$/;"	f	class:fdso::Undistort
makeOptimalK_crop	src/util/Undistort.cpp	/^void Undistort::makeOptimalK_crop()$/;"	f	class:fdso::Undistort
makeOptimalK_full	src/util/Undistort.cpp	/^void Undistort::makeOptimalK_full()$/;"	f	class:fdso::Undistort
processFrame	src/util/Undistort.cpp	/^void PhotometricUndistorter::processFrame(T* image_in, float exposure_time, float factor)$/;"	f	class:fdso::PhotometricUndistorter
readFromFile	src/util/Undistort.cpp	/^void Undistort::readFromFile(const char* configFileName, int nPars, std::string prefix)$/;"	f	class:fdso::Undistort
unMapFloatImage	src/util/Undistort.cpp	/^void PhotometricUndistorter::unMapFloatImage(float* image)$/;"	f	class:fdso::PhotometricUndistorter
undistort	src/util/Undistort.cpp	/^ImageAndExposure* Undistort::undistort(const MinimalImage<T>* image_raw, float exposure, double timestamp, float factor) const$/;"	f	class:fdso::Undistort
~PhotometricUndistorter	src/util/Undistort.cpp	/^PhotometricUndistorter::~PhotometricUndistorter()$/;"	f	class:fdso::PhotometricUndistorter
~Undistort	src/util/Undistort.cpp	/^Undistort::~Undistort()$/;"	f	class:fdso::Undistort
~UndistortEquidistant	src/util/Undistort.cpp	/^UndistortEquidistant::~UndistortEquidistant()$/;"	f	class:fdso::UndistortEquidistant
~UndistortFOV	src/util/Undistort.cpp	/^UndistortFOV::~UndistortFOV()$/;"	f	class:fdso::UndistortFOV
~UndistortKB	src/util/Undistort.cpp	/^UndistortKB::~UndistortKB()$/;"	f	class:fdso::UndistortKB
~UndistortPinhole	src/util/Undistort.cpp	/^UndistortPinhole::~UndistortPinhole()$/;"	f	class:fdso::UndistortPinhole
~UndistortRadTan	src/util/Undistort.cpp	/^UndistortRadTan::~UndistortRadTan()$/;"	f	class:fdso::UndistortRadTan
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/util/Undistort.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::PhotometricUndistorter
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/util/Undistort.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::Undistort
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/util/Undistort.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::UndistortEquidistant
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/util/Undistort.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::UndistortFOV
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/util/Undistort.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::UndistortKB
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/util/Undistort.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::UndistortPinhole
EIGEN_MAKE_ALIGNED_OPERATOR_NEW	src/util/Undistort.h	/^	EIGEN_MAKE_ALIGNED_OPERATOR_NEW;$/;"	m	class:fdso::UndistortRadTan
G	src/util/Undistort.h	/^    float G[256*256];$/;"	m	class:fdso::PhotometricUndistorter
GDepth	src/util/Undistort.h	/^    int GDepth;$/;"	m	class:fdso::PhotometricUndistorter
K	src/util/Undistort.h	/^	Mat33 K;$/;"	m	class:fdso::Undistort
PhotometricUndistorter	src/util/Undistort.h	/^class PhotometricUndistorter$/;"	c	namespace:fdso
Undistort	src/util/Undistort.h	/^class Undistort$/;"	c	namespace:fdso
UndistortEquidistant	src/util/Undistort.h	/^class UndistortEquidistant : public Undistort$/;"	c	namespace:fdso
UndistortFOV	src/util/Undistort.h	/^class UndistortFOV : public Undistort$/;"	c	namespace:fdso
UndistortKB	src/util/Undistort.h	/^class UndistortKB : public Undistort$/;"	c	namespace:fdso
UndistortPinhole	src/util/Undistort.h	/^class UndistortPinhole : public Undistort$/;"	c	namespace:fdso
UndistortRadTan	src/util/Undistort.h	/^class UndistortRadTan : public Undistort$/;"	c	namespace:fdso
bl	src/util/Undistort.h	/^    float bl;$/;"	m	class:fdso::Undistort
fdso	src/util/Undistort.h	/^namespace fdso$/;"	n
getBl	src/util/Undistort.h	/^    inline const float getBl() const {return bl;};$/;"	f	class:fdso::Undistort
getG	src/util/Undistort.h	/^	float* getG() {if(!valid) return 0; else return G;};$/;"	f	class:fdso::PhotometricUndistorter
getK	src/util/Undistort.h	/^	inline const Mat33 getK() const {return K;};$/;"	f	class:fdso::Undistort
getOriginalParameter	src/util/Undistort.h	/^	inline const VecX getOriginalParameter() const {return parsOrg;};$/;"	f	class:fdso::Undistort
getOriginalSize	src/util/Undistort.h	/^	inline const Eigen::Vector2i getOriginalSize() {return Eigen::Vector2i(wOrg,hOrg);};$/;"	f	class:fdso::Undistort
getSize	src/util/Undistort.h	/^	inline const Eigen::Vector2i getSize() const {return Eigen::Vector2i(w,h);};$/;"	f	class:fdso::Undistort
h	src/util/Undistort.h	/^	int w,h;$/;"	m	class:fdso::PhotometricUndistorter
h	src/util/Undistort.h	/^    int w, h, wOrg, hOrg, wUp, hUp;$/;"	m	class:fdso::Undistort
hOrg	src/util/Undistort.h	/^    int w, h, wOrg, hOrg, wUp, hUp;$/;"	m	class:fdso::Undistort
hUp	src/util/Undistort.h	/^    int w, h, wOrg, hOrg, wUp, hUp;$/;"	m	class:fdso::Undistort
inputCalibration	src/util/Undistort.h	/^	float inputCalibration[8];$/;"	m	class:fdso::UndistortPinhole
isValid	src/util/Undistort.h	/^	inline bool isValid() {return valid;};$/;"	f	class:fdso::Undistort
output	src/util/Undistort.h	/^	ImageAndExposure* output;$/;"	m	class:fdso::PhotometricUndistorter
parsOrg	src/util/Undistort.h	/^	VecX parsOrg;$/;"	m	class:fdso::Undistort
passthrough	src/util/Undistort.h	/^	bool passthrough;$/;"	m	class:fdso::Undistort
photometricUndist	src/util/Undistort.h	/^	PhotometricUndistorter* photometricUndist;$/;"	m	class:fdso::Undistort
remapX	src/util/Undistort.h	/^	float* remapX;$/;"	m	class:fdso::Undistort
remapY	src/util/Undistort.h	/^	float* remapY;$/;"	m	class:fdso::Undistort
upsampleUndistFactor	src/util/Undistort.h	/^    int upsampleUndistFactor;$/;"	m	class:fdso::Undistort
valid	src/util/Undistort.h	/^	bool valid;$/;"	m	class:fdso::PhotometricUndistorter
valid	src/util/Undistort.h	/^	bool valid;$/;"	m	class:fdso::Undistort
vignetteMap	src/util/Undistort.h	/^	float* vignetteMap;$/;"	m	class:fdso::PhotometricUndistorter
vignetteMapInv	src/util/Undistort.h	/^	float* vignetteMapInv;$/;"	m	class:fdso::PhotometricUndistorter
w	src/util/Undistort.h	/^	int w,h;$/;"	m	class:fdso::PhotometricUndistorter
w	src/util/Undistort.h	/^    int w, h, wOrg, hOrg, wUp, hUp;$/;"	m	class:fdso::Undistort
wOrg	src/util/Undistort.h	/^    int w, h, wOrg, hOrg, wUp, hUp;$/;"	m	class:fdso::Undistort
wUp	src/util/Undistort.h	/^    int w, h, wOrg, hOrg, wUp, hUp;$/;"	m	class:fdso::Undistort
KG	src/util/globalCalib.cpp	/^	Eigen::Matrix3f KG[PYR_LEVELS], KiG[PYR_LEVELS];$/;"	m	namespace:fdso	file:
KiG	src/util/globalCalib.cpp	/^	Eigen::Matrix3f KG[PYR_LEVELS], KiG[PYR_LEVELS];$/;"	m	namespace:fdso	file:
baseline	src/util/globalCalib.cpp	/^    float baseline;$/;"	m	namespace:fdso	file:
cxG	src/util/globalCalib.cpp	/^		  cxG[PYR_LEVELS], cyG[PYR_LEVELS];$/;"	m	namespace:fdso	file:
cxiG	src/util/globalCalib.cpp	/^		  cxiG[PYR_LEVELS], cyiG[PYR_LEVELS];$/;"	m	namespace:fdso	file:
cyG	src/util/globalCalib.cpp	/^		  cxG[PYR_LEVELS], cyG[PYR_LEVELS];$/;"	m	namespace:fdso	file:
cyiG	src/util/globalCalib.cpp	/^		  cxiG[PYR_LEVELS], cyiG[PYR_LEVELS];$/;"	m	namespace:fdso	file:
fdso	src/util/globalCalib.cpp	/^namespace fdso$/;"	n	file:
fxG	src/util/globalCalib.cpp	/^	float fxG[PYR_LEVELS], fyG[PYR_LEVELS],$/;"	m	namespace:fdso	file:
fxiG	src/util/globalCalib.cpp	/^	float fxiG[PYR_LEVELS], fyiG[PYR_LEVELS],$/;"	m	namespace:fdso	file:
fyG	src/util/globalCalib.cpp	/^	float fxG[PYR_LEVELS], fyG[PYR_LEVELS],$/;"	m	namespace:fdso	file:
fyiG	src/util/globalCalib.cpp	/^	float fxiG[PYR_LEVELS], fyiG[PYR_LEVELS],$/;"	m	namespace:fdso	file:
hG	src/util/globalCalib.cpp	/^	int wG[PYR_LEVELS], hG[PYR_LEVELS];$/;"	m	namespace:fdso	file:
hM3G	src/util/globalCalib.cpp	/^	float hM3G;$/;"	m	namespace:fdso	file:
setGlobalCalib	src/util/globalCalib.cpp	/^	void setGlobalCalib(int w, int h, Eigen::Matrix3f K)$/;"	f	namespace:fdso
wG	src/util/globalCalib.cpp	/^	int wG[PYR_LEVELS], hG[PYR_LEVELS];$/;"	m	namespace:fdso	file:
wM3G	src/util/globalCalib.cpp	/^	float wM3G;$/;"	m	namespace:fdso	file:
fdso	src/util/globalCalib.h	/^namespace fdso$/;"	n
fdso	src/util/globalFuncs.h	/^namespace fdso$/;"	n
getInterpolatedElement	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE float getInterpolatedElement(const float* const mat, const float x, const float y, const int width)$/;"	f	namespace:fdso
getInterpolatedElement11BiCub	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE float getInterpolatedElement11BiCub(const float* const mat, const float x, const float y, const int width)$/;"	f	namespace:fdso
getInterpolatedElement11Cub	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE float getInterpolatedElement11Cub(const float* const p, const float x)	\/\/ for x=0, this returns p[1].$/;"	f	namespace:fdso
getInterpolatedElement12Cub	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE Eigen::Vector2f getInterpolatedElement12Cub(const float* const p, const float x)	\/\/ for x=0, this returns p[1].$/;"	f	namespace:fdso
getInterpolatedElement13BiCub	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE Eigen::Vector3f getInterpolatedElement13BiCub(const float* const mat, const float x, const float y, const int width)$/;"	f	namespace:fdso
getInterpolatedElement13BiLin	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE Eigen::Vector3f getInterpolatedElement13BiLin(const float* const mat, const float x, const float y, const int width)$/;"	f	namespace:fdso
getInterpolatedElement31	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE float getInterpolatedElement31(const Eigen::Vector3f* const mat, const float x, const float y, const int width)$/;"	f	namespace:fdso
getInterpolatedElement32Cub	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE Eigen::Vector2f getInterpolatedElement32Cub(const Eigen::Vector3f* const p, const float x)	\/\/ for x=0, this returns p[1].$/;"	f	namespace:fdso
getInterpolatedElement33	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE Eigen::Vector3f getInterpolatedElement33(const Eigen::Vector3f* const mat, const float x, const float y, const int width)$/;"	f	namespace:fdso
getInterpolatedElement33BiCub	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE Eigen::Vector3f getInterpolatedElement33BiCub(const Eigen::Vector3f* const mat, const float x, const float y, const int width)$/;"	f	namespace:fdso
getInterpolatedElement33BiLin	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE Eigen::Vector3f getInterpolatedElement33BiLin(const Eigen::Vector3f* const mat, const float x, const float y, const int width)$/;"	f	namespace:fdso
getInterpolatedElement33OverAnd	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE Eigen::Vector3f getInterpolatedElement33OverAnd(const Eigen::Vector3f* const mat, const bool* overMat, const float x, const float y, const int width, bool& over_out)$/;"	f	namespace:fdso
getInterpolatedElement33OverOr	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE Eigen::Vector3f getInterpolatedElement33OverOr(const Eigen::Vector3f* const mat, const bool* overMat, const float x, const float y, const int width, bool& over_out)$/;"	f	namespace:fdso
getInterpolatedElement42	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE Eigen::Vector2f getInterpolatedElement42(const Eigen::Vector4f* const mat, const float x, const float y, const int width)$/;"	f	namespace:fdso
getInterpolatedElement43	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE Eigen::Vector3f getInterpolatedElement43(const Eigen::Vector4f* const mat, const float x, const float y, const int width)$/;"	f	namespace:fdso
getInterpolatedElement44	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE Eigen::Vector4f getInterpolatedElement44(const Eigen::Vector4f* const mat, const float x, const float y, const int width)$/;"	f	namespace:fdso
getMatInterpolatedElement11BiLin	src/util/globalFuncs.h	/^EIGEN_ALWAYS_INLINE float getMatInterpolatedElement11BiLin(const cv::Mat mat, const float x, const float y)$/;"	f	namespace:fdso
makeJet3B	src/util/globalFuncs.h	/^inline Vec3b makeJet3B(float id)$/;"	f	namespace:fdso
makeRainbow3B	src/util/globalFuncs.h	/^inline Vec3b makeRainbow3B(float id)$/;"	f	namespace:fdso
makeRainbowf3F	src/util/globalFuncs.h	/^inline Vec3f makeRainbowf3F(float id)$/;"	f	namespace:fdso
makeRedGreen3B	src/util/globalFuncs.h	/^inline Vec3b makeRedGreen3B(float val)	\/\/ 0 = red, 1=green, 0.5=yellow.$/;"	f	namespace:fdso
BLOCKSIZE	src/util/nanoflann.h	/^	const size_t     BLOCKSIZE=8192;$/;"	m	namespace:nanoflann
BoundingBox	src/util/nanoflann.h	/^		typedef typename array_or_vector_selector<DIM,Interval>::container_t BoundingBox;$/;"	t	class:nanoflann::KDTreeSingleIndexAdaptor
CArray	src/util/nanoflann.h	/^    class CArray {$/;"	c	namespace:nanoflann
DistanceType	src/util/nanoflann.h	/^		typedef _DistanceType DistanceType;$/;"	t	struct:nanoflann::L1_Adaptor
DistanceType	src/util/nanoflann.h	/^		typedef _DistanceType DistanceType;$/;"	t	struct:nanoflann::L2_Adaptor
DistanceType	src/util/nanoflann.h	/^		typedef _DistanceType DistanceType;$/;"	t	struct:nanoflann::L2_Simple_Adaptor
DistanceType	src/util/nanoflann.h	/^		typedef typename Distance::DistanceType DistanceType;$/;"	t	class:nanoflann::KDTreeSingleIndexAdaptor
ElementType	src/util/nanoflann.h	/^		typedef T ElementType;$/;"	t	struct:nanoflann::L1_Adaptor
ElementType	src/util/nanoflann.h	/^		typedef T ElementType;$/;"	t	struct:nanoflann::L2_Adaptor
ElementType	src/util/nanoflann.h	/^		typedef T ElementType;$/;"	t	struct:nanoflann::L2_Simple_Adaptor
ElementType	src/util/nanoflann.h	/^		typedef typename Distance::ElementType  ElementType;$/;"	t	class:nanoflann::KDTreeSingleIndexAdaptor
IndexDist_Sorter	src/util/nanoflann.h	/^	struct IndexDist_Sorter$/;"	s	namespace:nanoflann
IndexType	src/util/nanoflann.h	/^		typedef typename MatrixType::Index IndexType;$/;"	t	struct:nanoflann::KDTreeEigenMatrixAdaptor
Interval	src/util/nanoflann.h	/^		struct Interval$/;"	s	class:nanoflann::KDTreeSingleIndexAdaptor
KDTreeEigenMatrixAdaptor	src/util/nanoflann.h	/^		KDTreeEigenMatrixAdaptor(const int dimensionality, const MatrixType &mat, const int leaf_max_size = 10) : m_data_matrix(mat)$/;"	f	struct:nanoflann::KDTreeEigenMatrixAdaptor
KDTreeEigenMatrixAdaptor	src/util/nanoflann.h	/^	struct KDTreeEigenMatrixAdaptor$/;"	s	namespace:nanoflann
KDTreeSingleIndexAdaptor	src/util/nanoflann.h	/^		KDTreeSingleIndexAdaptor(const int dimensionality, const DatasetAdaptor& inputData, const KDTreeSingleIndexAdaptorParams& params = KDTreeSingleIndexAdaptorParams() ) :$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
KDTreeSingleIndexAdaptor	src/util/nanoflann.h	/^	class KDTreeSingleIndexAdaptor$/;"	c	namespace:nanoflann
KDTreeSingleIndexAdaptorParams	src/util/nanoflann.h	/^		KDTreeSingleIndexAdaptorParams(size_t _leaf_max_size = 10) :$/;"	f	struct:nanoflann::KDTreeSingleIndexAdaptorParams
KDTreeSingleIndexAdaptorParams	src/util/nanoflann.h	/^	struct KDTreeSingleIndexAdaptorParams$/;"	s	namespace:nanoflann
KNNResultSet	src/util/nanoflann.h	/^		inline KNNResultSet(CountType capacity_) : indices(0), dists(0), capacity(capacity_), count(0)$/;"	f	class:nanoflann::KNNResultSet
KNNResultSet	src/util/nanoflann.h	/^	class KNNResultSet$/;"	c	namespace:nanoflann
L1_Adaptor	src/util/nanoflann.h	/^		L1_Adaptor(const DataSource &_data_source) : data_source(_data_source) { }$/;"	f	struct:nanoflann::L1_Adaptor
L1_Adaptor	src/util/nanoflann.h	/^	struct L1_Adaptor$/;"	s	namespace:nanoflann
L2_Adaptor	src/util/nanoflann.h	/^		L2_Adaptor(const DataSource &_data_source) : data_source(_data_source) { }$/;"	f	struct:nanoflann::L2_Adaptor
L2_Adaptor	src/util/nanoflann.h	/^	struct L2_Adaptor$/;"	s	namespace:nanoflann
L2_Simple_Adaptor	src/util/nanoflann.h	/^		L2_Simple_Adaptor(const DataSource &_data_source) : data_source(_data_source) { }$/;"	f	struct:nanoflann::L2_Simple_Adaptor
L2_Simple_Adaptor	src/util/nanoflann.h	/^	struct L2_Simple_Adaptor$/;"	s	namespace:nanoflann
NANOFLANN_VERSION	src/util/nanoflann.h	87;"	d
Node	src/util/nanoflann.h	/^		struct Node$/;"	s	class:nanoflann::KDTreeSingleIndexAdaptor
NodePtr	src/util/nanoflann.h	/^		typedef Node* NodePtr;$/;"	t	class:nanoflann::KDTreeSingleIndexAdaptor
PooledAllocator	src/util/nanoflann.h	/^		PooledAllocator() {$/;"	f	class:nanoflann::PooledAllocator
PooledAllocator	src/util/nanoflann.h	/^	class PooledAllocator$/;"	c	namespace:nanoflann
RadiusResultSet	src/util/nanoflann.h	/^		inline RadiusResultSet(DistanceType radius_, std::vector<std::pair<IndexType,DistanceType> >& indices_dists) : radius(radius_), m_indices_dists(indices_dists)$/;"	f	class:nanoflann::RadiusResultSet
RadiusResultSet	src/util/nanoflann.h	/^	class RadiusResultSet$/;"	c	namespace:nanoflann
SearchParams	src/util/nanoflann.h	/^		SearchParams(int checks_IGNORED_ = 32, float eps_ = 0, bool sorted_ = true ) :$/;"	f	struct:nanoflann::SearchParams
SearchParams	src/util/nanoflann.h	/^	struct SearchParams$/;"	s	namespace:nanoflann
WORDSIZE	src/util/nanoflann.h	/^	const size_t     WORDSIZE=16;$/;"	m	namespace:nanoflann
abs	src/util/nanoflann.h	/^	template<> inline double abs<double>(double x) { return fabs(x); }$/;"	f	namespace:nanoflann
abs	src/util/nanoflann.h	/^	template<> inline float abs<float>(float x) { return fabsf(x); }$/;"	f	namespace:nanoflann
abs	src/util/nanoflann.h	/^	template<> inline int abs<int>(int x) { return ::abs(x); }$/;"	f	namespace:nanoflann
abs	src/util/nanoflann.h	/^	template<> inline long double abs<long double>(long double x) { return fabsl(x); }$/;"	f	namespace:nanoflann
abs	src/util/nanoflann.h	/^	template<typename T> inline T abs(T x) { return (x<0) ? -x : x; }$/;"	f	namespace:nanoflann
accum_dist	src/util/nanoflann.h	/^		inline DistanceType accum_dist(const U a, const V b, int ) const$/;"	f	struct:nanoflann::L1_Adaptor
accum_dist	src/util/nanoflann.h	/^		inline DistanceType accum_dist(const U a, const V b, int ) const$/;"	f	struct:nanoflann::L2_Adaptor
accum_dist	src/util/nanoflann.h	/^		inline DistanceType accum_dist(const U a, const V b, int ) const$/;"	f	struct:nanoflann::L2_Simple_Adaptor
addPoint	src/util/nanoflann.h	/^		inline void addPoint(DistanceType dist, IndexType index)$/;"	f	class:nanoflann::KNNResultSet
addPoint	src/util/nanoflann.h	/^		inline void addPoint(DistanceType dist, IndexType index)$/;"	f	class:nanoflann::RadiusResultSet
allocate	src/util/nanoflann.h	/^		T* allocate(const size_t count = 1)$/;"	f	class:nanoflann::PooledAllocator
allocate	src/util/nanoflann.h	/^	inline T* allocate(size_t count = 1)$/;"	f	namespace:nanoflann
array_or_vector_selector	src/util/nanoflann.h	/^	struct array_or_vector_selector$/;"	s	namespace:nanoflann
array_or_vector_selector	src/util/nanoflann.h	/^	struct array_or_vector_selector<-1,T> {$/;"	s	namespace:nanoflann
assign	src/util/nanoflann.h	/^        inline void assign (const T& value) { for (size_t i=0;i<N;i++) elems[i]=value; }$/;"	f	class:nanoflann::CArray
assign	src/util/nanoflann.h	/^        void assign (const size_t n, const T& value) { assert(N==n); for (size_t i=0;i<N;i++) elems[i]=value; }$/;"	f	class:nanoflann::CArray
at	src/util/nanoflann.h	/^        const_reference at(size_type i) const { rangecheck(i); return elems[i]; }$/;"	f	class:nanoflann::CArray
at	src/util/nanoflann.h	/^        reference at(size_type i) { rangecheck(i); return elems[i]; }$/;"	f	class:nanoflann::CArray
back	src/util/nanoflann.h	/^        const_reference back() const { return elems[N-1]; }$/;"	f	class:nanoflann::CArray
back	src/util/nanoflann.h	/^        reference back() { return elems[N-1]; }$/;"	f	class:nanoflann::CArray
base	src/util/nanoflann.h	/^		void*   base;     \/* Pointer to base of current block of storage. *\/$/;"	m	class:nanoflann::PooledAllocator
begin	src/util/nanoflann.h	/^        inline const_iterator begin() const { return elems; }$/;"	f	class:nanoflann::CArray
begin	src/util/nanoflann.h	/^        inline iterator begin() { return elems; }$/;"	f	class:nanoflann::CArray
buildIndex	src/util/nanoflann.h	/^		void buildIndex()$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
capacity	src/util/nanoflann.h	/^		CountType capacity;$/;"	m	class:nanoflann::KNNResultSet
checks	src/util/nanoflann.h	/^		int   checks;  \/\/!< Ignored parameter (Kept for compatibility with the FLANN interface).$/;"	m	struct:nanoflann::SearchParams
child1	src/util/nanoflann.h	/^			Node* child1, * child2;  \/\/!< Child nodes (both=NULL mean its a leaf node)$/;"	m	struct:nanoflann::KDTreeSingleIndexAdaptor::Node
child2	src/util/nanoflann.h	/^			Node* child1, * child2;  \/\/!< Child nodes (both=NULL mean its a leaf node)$/;"	m	struct:nanoflann::KDTreeSingleIndexAdaptor::Node
clear	src/util/nanoflann.h	/^		inline void clear() { m_indices_dists.clear(); }$/;"	f	class:nanoflann::RadiusResultSet
computeBoundingBox	src/util/nanoflann.h	/^		void computeBoundingBox(BoundingBox& bbox)$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
computeInitialDistances	src/util/nanoflann.h	/^		DistanceType computeInitialDistances(const ElementType* vec, distance_vector_t& dists) const$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
computeMinMax	src/util/nanoflann.h	/^		void computeMinMax(IndexType* ind, IndexType count, int element, ElementType& min_elem, ElementType& max_elem)$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
const_iterator	src/util/nanoflann.h	/^        typedef const T*       const_iterator;$/;"	t	class:nanoflann::CArray
const_reference	src/util/nanoflann.h	/^        typedef const T&       const_reference;$/;"	t	class:nanoflann::CArray
const_reverse_iterator	src/util/nanoflann.h	/^                                      const_reference, iterator, reference> > const_reverse_iterator;$/;"	t	class:nanoflann::CArray
const_reverse_iterator	src/util/nanoflann.h	/^        typedef std::reverse_iterator<const_iterator,T> const_reverse_iterator;$/;"	t	class:nanoflann::CArray
const_reverse_iterator	src/util/nanoflann.h	/^        typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:nanoflann::CArray
container_t	src/util/nanoflann.h	/^		typedef CArray<T,DIM> container_t;$/;"	t	struct:nanoflann::array_or_vector_selector
container_t	src/util/nanoflann.h	/^		typedef std::vector<T> container_t;$/;"	t	struct:nanoflann::array_or_vector_selector
count	src/util/nanoflann.h	/^		CountType count;$/;"	m	class:nanoflann::KNNResultSet
data	src/util/nanoflann.h	/^        T* data() { return elems; }$/;"	f	class:nanoflann::CArray
data	src/util/nanoflann.h	/^        const T* data() const { return elems; }$/;"	f	class:nanoflann::CArray
data_source	src/util/nanoflann.h	/^		const DataSource &data_source;$/;"	m	struct:nanoflann::L1_Adaptor
data_source	src/util/nanoflann.h	/^		const DataSource &data_source;$/;"	m	struct:nanoflann::L2_Adaptor
data_source	src/util/nanoflann.h	/^		const DataSource &data_source;$/;"	m	struct:nanoflann::L2_Simple_Adaptor
dataset	src/util/nanoflann.h	/^		const DatasetAdaptor &dataset; \/\/!< The source of our data$/;"	m	class:nanoflann::KDTreeSingleIndexAdaptor
dataset_get	src/util/nanoflann.h	/^		inline ElementType dataset_get(size_t idx, int component) const {$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
derived	src/util/nanoflann.h	/^		const self_t & derived() const {$/;"	f	struct:nanoflann::KDTreeEigenMatrixAdaptor
derived	src/util/nanoflann.h	/^		self_t & derived()       {$/;"	f	struct:nanoflann::KDTreeEigenMatrixAdaptor
difference_type	src/util/nanoflann.h	/^        typedef std::ptrdiff_t difference_type;$/;"	t	class:nanoflann::CArray
dim	src/util/nanoflann.h	/^		int dim;  \/\/!< Dimensionality of each data point$/;"	m	class:nanoflann::KDTreeSingleIndexAdaptor
distance	src/util/nanoflann.h	/^		Distance distance;$/;"	m	class:nanoflann::KDTreeSingleIndexAdaptor
distance_t	src/util/nanoflann.h	/^			typedef L1_Adaptor<T,DataSource> distance_t;$/;"	t	struct:nanoflann::metric_L1::traits
distance_t	src/util/nanoflann.h	/^			typedef L2_Adaptor<T,DataSource> distance_t;$/;"	t	struct:nanoflann::metric_L2::traits
distance_t	src/util/nanoflann.h	/^			typedef L2_Simple_Adaptor<T,DataSource> distance_t;$/;"	t	struct:nanoflann::metric_L2_Simple::traits
distance_vector_t	src/util/nanoflann.h	/^		typedef typename array_or_vector_selector<DIM,DistanceType>::container_t distance_vector_t;$/;"	t	class:nanoflann::KDTreeSingleIndexAdaptor
dists	src/util/nanoflann.h	/^		DistanceType* dists;$/;"	m	class:nanoflann::KNNResultSet
divfeat	src/util/nanoflann.h	/^					int          divfeat; \/\/!< Dimension used for subdivision.$/;"	m	struct:nanoflann::KDTreeSingleIndexAdaptor::Node::__anon2::__anon4
divhigh	src/util/nanoflann.h	/^					DistanceType divlow, divhigh; \/\/!< The values used for subdivision.$/;"	m	struct:nanoflann::KDTreeSingleIndexAdaptor::Node::__anon2::__anon4
divideTree	src/util/nanoflann.h	/^		NodePtr divideTree(const IndexType left, const IndexType right, BoundingBox& bbox)$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
divlow	src/util/nanoflann.h	/^					DistanceType divlow, divhigh; \/\/!< The values used for subdivision.$/;"	m	struct:nanoflann::KDTreeSingleIndexAdaptor::Node::__anon2::__anon4
elems	src/util/nanoflann.h	/^        T elems[N];    \/\/ fixed-size array of elements of type T$/;"	m	class:nanoflann::CArray
empty	src/util/nanoflann.h	/^        static bool empty() { return false; }$/;"	f	class:nanoflann::CArray
end	src/util/nanoflann.h	/^        inline const_iterator end() const { return elems+N; }$/;"	f	class:nanoflann::CArray
end	src/util/nanoflann.h	/^        inline iterator end() { return elems+N; }$/;"	f	class:nanoflann::CArray
eps	src/util/nanoflann.h	/^		float eps;  \/\/!< search for eps-approximate neighbours (default: 0)$/;"	m	struct:nanoflann::SearchParams
findNeighbors	src/util/nanoflann.h	/^		bool findNeighbors(RESULTSET& result, const ElementType* vec, const SearchParams& searchParams) const$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
freeIndex	src/util/nanoflann.h	/^		void freeIndex()$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
free_all	src/util/nanoflann.h	/^		void free_all()$/;"	f	class:nanoflann::PooledAllocator
front	src/util/nanoflann.h	/^        const_reference front() const { return elems[0]; }$/;"	f	class:nanoflann::CArray
front	src/util/nanoflann.h	/^        reference front() { return elems[0]; }$/;"	f	class:nanoflann::CArray
full	src/util/nanoflann.h	/^		inline bool full() const { return true; }$/;"	f	class:nanoflann::RadiusResultSet
full	src/util/nanoflann.h	/^		inline bool full() const$/;"	f	class:nanoflann::KNNResultSet
high	src/util/nanoflann.h	/^			ElementType low, high;$/;"	m	struct:nanoflann::KDTreeSingleIndexAdaptor::Interval
index	src/util/nanoflann.h	/^		index_t* index; \/\/! The kd-tree index for the user to call its methods as usual with any other FLANN index.$/;"	m	struct:nanoflann::KDTreeEigenMatrixAdaptor
index_params	src/util/nanoflann.h	/^		const KDTreeSingleIndexAdaptorParams index_params;$/;"	m	class:nanoflann::KDTreeSingleIndexAdaptor
index_t	src/util/nanoflann.h	/^		typedef KDTreeSingleIndexAdaptor< metric_t,self_t,DIM,IndexType>  index_t;$/;"	t	struct:nanoflann::KDTreeEigenMatrixAdaptor
indices	src/util/nanoflann.h	/^		IndexType * indices;$/;"	m	class:nanoflann::KNNResultSet
init	src/util/nanoflann.h	/^		inline void init() { clear(); }$/;"	f	class:nanoflann::RadiusResultSet
init	src/util/nanoflann.h	/^		inline void init(IndexType* indices_, DistanceType* dists_)$/;"	f	class:nanoflann::KNNResultSet
init_vind	src/util/nanoflann.h	/^		void init_vind()$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
internal_init	src/util/nanoflann.h	/^		void internal_init()$/;"	f	class:nanoflann::PooledAllocator
iterator	src/util/nanoflann.h	/^        typedef T*             iterator;$/;"	t	class:nanoflann::CArray
kdtree_distance	src/util/nanoflann.h	/^		inline num_t kdtree_distance(const num_t *p1, const IndexType idx_p2,IndexType size) const$/;"	f	struct:nanoflann::KDTreeEigenMatrixAdaptor
kdtree_get_bbox	src/util/nanoflann.h	/^		bool kdtree_get_bbox(BBOX& \/*bb*\/) const {$/;"	f	struct:nanoflann::KDTreeEigenMatrixAdaptor
kdtree_get_point_count	src/util/nanoflann.h	/^		inline size_t kdtree_get_point_count() const {$/;"	f	struct:nanoflann::KDTreeEigenMatrixAdaptor
kdtree_get_pt	src/util/nanoflann.h	/^		inline num_t kdtree_get_pt(const IndexType idx, int dim) const {$/;"	f	struct:nanoflann::KDTreeEigenMatrixAdaptor
knnSearch	src/util/nanoflann.h	/^		inline void knnSearch(const ElementType *query_point, const size_t num_closest, IndexType *out_indices, DistanceType *out_distances_sq, const int \/* nChecks_IGNORED *\/ = 10) const$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
leaf_max_size	src/util/nanoflann.h	/^		size_t leaf_max_size;$/;"	m	struct:nanoflann::KDTreeSingleIndexAdaptorParams
left	src/util/nanoflann.h	/^					IndexType    left, right;  \/\/!< Indices of points in leaf node$/;"	m	struct:nanoflann::KDTreeSingleIndexAdaptor::Node::__anon2::__anon3
loadIndex	src/util/nanoflann.h	/^		void loadIndex(FILE* stream)$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
load_tree	src/util/nanoflann.h	/^		void load_tree(FILE* stream, NodePtr& tree)$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
load_value	src/util/nanoflann.h	/^	void load_value(FILE* stream, T& value, size_t count = 1)$/;"	f	namespace:nanoflann
load_value	src/util/nanoflann.h	/^	void load_value(FILE* stream, std::vector<T>& value)$/;"	f	namespace:nanoflann
loc	src/util/nanoflann.h	/^		void*   loc;      \/* Current location in block to next allocate memory. *\/$/;"	m	class:nanoflann::PooledAllocator
low	src/util/nanoflann.h	/^			ElementType low, high;$/;"	m	struct:nanoflann::KDTreeSingleIndexAdaptor::Interval
lr	src/util/nanoflann.h	/^				} lr;$/;"	m	union:nanoflann::KDTreeSingleIndexAdaptor::Node::__anon2	typeref:struct:nanoflann::KDTreeSingleIndexAdaptor::Node::__anon2::__anon3
m_data_matrix	src/util/nanoflann.h	/^		const MatrixType &m_data_matrix;$/;"	m	struct:nanoflann::KDTreeEigenMatrixAdaptor
m_indices_dists	src/util/nanoflann.h	/^		std::vector<std::pair<IndexType,DistanceType> >& m_indices_dists;$/;"	m	class:nanoflann::RadiusResultSet
m_leaf_max_size	src/util/nanoflann.h	/^		size_t m_leaf_max_size;$/;"	m	class:nanoflann::KDTreeSingleIndexAdaptor
m_size	src/util/nanoflann.h	/^		size_t m_size; \/\/!< Number of current poins in the dataset$/;"	m	class:nanoflann::KDTreeSingleIndexAdaptor
m_size_at_index_build	src/util/nanoflann.h	/^		size_t m_size_at_index_build; \/\/!< Number of points in the dataset when the index was built$/;"	m	class:nanoflann::KDTreeSingleIndexAdaptor
malloc	src/util/nanoflann.h	/^		void* malloc(const size_t req_size)$/;"	f	class:nanoflann::PooledAllocator
max_size	src/util/nanoflann.h	/^        static size_type max_size() { return N; }$/;"	f	class:nanoflann::CArray
metric_L1	src/util/nanoflann.h	/^	struct metric_L1 {$/;"	s	namespace:nanoflann
metric_L2	src/util/nanoflann.h	/^	struct metric_L2 {$/;"	s	namespace:nanoflann
metric_L2_Simple	src/util/nanoflann.h	/^	struct metric_L2_Simple {$/;"	s	namespace:nanoflann
metric_t	src/util/nanoflann.h	/^		typedef typename Distance::template traits<num_t,self_t>::distance_t metric_t;$/;"	t	struct:nanoflann::KDTreeEigenMatrixAdaptor
middleSplit_	src/util/nanoflann.h	/^		void middleSplit_(IndexType* ind, IndexType count, IndexType& index, int& cutfeat, DistanceType& cutval, const BoundingBox& bbox)$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
nanoflann	src/util/nanoflann.h	/^namespace nanoflann$/;"	n
num_t	src/util/nanoflann.h	/^		typedef typename MatrixType::Scalar              num_t;$/;"	t	struct:nanoflann::KDTreeEigenMatrixAdaptor
operator ()	src/util/nanoflann.h	/^		inline DistanceType operator()(const T* a, const size_t b_idx, size_t size) const {$/;"	f	struct:nanoflann::L2_Simple_Adaptor
operator ()	src/util/nanoflann.h	/^		inline DistanceType operator()(const T* a, const size_t b_idx, size_t size, DistanceType worst_dist = -1) const$/;"	f	struct:nanoflann::L1_Adaptor
operator ()	src/util/nanoflann.h	/^		inline DistanceType operator()(const T* a, const size_t b_idx, size_t size, DistanceType worst_dist = -1) const$/;"	f	struct:nanoflann::L2_Adaptor
operator ()	src/util/nanoflann.h	/^		inline bool operator()(const PairType &p1, const PairType &p2) const {$/;"	f	struct:nanoflann::IndexDist_Sorter
operator =	src/util/nanoflann.h	/^        template <typename T2> CArray<T,N>& operator= (const CArray<T2,N>& rhs) {$/;"	f	class:nanoflann::CArray
operator []	src/util/nanoflann.h	/^        inline const_reference operator[](size_type i) const { return elems[i]; }$/;"	f	class:nanoflann::CArray
operator []	src/util/nanoflann.h	/^        inline reference operator[](size_type i) { return elems[i]; }$/;"	f	class:nanoflann::CArray
planeSplit	src/util/nanoflann.h	/^		void planeSplit(IndexType* ind, const IndexType count, int cutfeat, DistanceType cutval, IndexType& lim1, IndexType& lim2)$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
pool	src/util/nanoflann.h	/^		PooledAllocator pool;$/;"	m	class:nanoflann::KDTreeSingleIndexAdaptor
query	src/util/nanoflann.h	/^		inline void query(const num_t *query_point, const size_t num_closest, IndexType *out_indices, num_t *out_distances_sq, const int \/* nChecks_IGNORED *\/ = 10) const$/;"	f	struct:nanoflann::KDTreeEigenMatrixAdaptor
radius	src/util/nanoflann.h	/^		const DistanceType radius;$/;"	m	class:nanoflann::RadiusResultSet
radiusSearch	src/util/nanoflann.h	/^		size_t radiusSearch(const ElementType *query_point,const DistanceType radius, std::vector<std::pair<IndexType,DistanceType> >& IndicesDists, const SearchParams& searchParams) const $/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
radiusSearchCustomCallback	src/util/nanoflann.h	/^		size_t radiusSearchCustomCallback(const ElementType *query_point,SEARCH_CALLBACK &resultSet, const SearchParams& searchParams = SearchParams() ) const$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
rangecheck	src/util/nanoflann.h	/^        static void rangecheck (size_type i) { if (i >= size()) { throw std::out_of_range("CArray<>: index out of range"); } }$/;"	f	class:nanoflann::CArray
rbegin	src/util/nanoflann.h	/^        const_reverse_iterator rbegin() const { return const_reverse_iterator(end()); }$/;"	f	class:nanoflann::CArray
rbegin	src/util/nanoflann.h	/^        reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:nanoflann::CArray
reference	src/util/nanoflann.h	/^        typedef T&             reference;$/;"	t	class:nanoflann::CArray
remaining	src/util/nanoflann.h	/^		size_t  remaining;  \/* Number of bytes left in current block of storage. *\/$/;"	m	class:nanoflann::PooledAllocator
rend	src/util/nanoflann.h	/^        const_reverse_iterator rend() const { return const_reverse_iterator(begin()); }$/;"	f	class:nanoflann::CArray
rend	src/util/nanoflann.h	/^        reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:nanoflann::CArray
resize	src/util/nanoflann.h	/^		inline void resize(const size_t nElements) { if (nElements!=N) throw std::logic_error("Try to change the size of a CArray."); }$/;"	f	class:nanoflann::CArray
reverse_iterator	src/util/nanoflann.h	/^                                      reference, iterator, reference> > reverse_iterator;$/;"	t	class:nanoflann::CArray
reverse_iterator	src/util/nanoflann.h	/^        typedef std::reverse_iterator<iterator,T> reverse_iterator;$/;"	t	class:nanoflann::CArray
reverse_iterator	src/util/nanoflann.h	/^        typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:nanoflann::CArray
right	src/util/nanoflann.h	/^					IndexType    left, right;  \/\/!< Indices of points in leaf node$/;"	m	struct:nanoflann::KDTreeSingleIndexAdaptor::Node::__anon2::__anon3
root_bbox	src/util/nanoflann.h	/^		BoundingBox root_bbox;$/;"	m	class:nanoflann::KDTreeSingleIndexAdaptor
root_node	src/util/nanoflann.h	/^		NodePtr root_node;$/;"	m	class:nanoflann::KDTreeSingleIndexAdaptor
saveIndex	src/util/nanoflann.h	/^		void saveIndex(FILE* stream)$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
save_tree	src/util/nanoflann.h	/^		void save_tree(FILE* stream, NodePtr tree)$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
save_value	src/util/nanoflann.h	/^	void save_value(FILE* stream, const T& value, size_t count = 1)$/;"	f	namespace:nanoflann
save_value	src/util/nanoflann.h	/^	void save_value(FILE* stream, const std::vector<T>& value)$/;"	f	namespace:nanoflann
searchLevel	src/util/nanoflann.h	/^		void searchLevel(RESULTSET& result_set, const ElementType* vec, const NodePtr node, DistanceType mindistsq,$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
self_t	src/util/nanoflann.h	/^		typedef KDTreeEigenMatrixAdaptor<MatrixType,DIM,Distance> self_t;$/;"	t	struct:nanoflann::KDTreeEigenMatrixAdaptor
set_radius_and_clear	src/util/nanoflann.h	/^		inline void set_radius_and_clear( const DistanceType r )$/;"	f	class:nanoflann::RadiusResultSet
size	src/util/nanoflann.h	/^		inline CountType size() const$/;"	f	class:nanoflann::KNNResultSet
size	src/util/nanoflann.h	/^		inline size_t size() const { return m_indices_dists.size(); }$/;"	f	class:nanoflann::RadiusResultSet
size	src/util/nanoflann.h	/^		size_t size() const { return m_size; }$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
size	src/util/nanoflann.h	/^        static inline size_type size() { return N; }$/;"	f	class:nanoflann::CArray
size_type	src/util/nanoflann.h	/^        typedef std::size_t    size_type;$/;"	t	class:nanoflann::CArray
sorted	src/util/nanoflann.h	/^		bool sorted; \/\/!< only for radius search, require neighbours sorted by distance (default: true)$/;"	m	struct:nanoflann::SearchParams
static_size	src/util/nanoflann.h	/^        enum { static_size = N };$/;"	e	enum:nanoflann::CArray::__anon1
sub	src/util/nanoflann.h	/^				} sub;$/;"	m	union:nanoflann::KDTreeSingleIndexAdaptor::Node::__anon2	typeref:struct:nanoflann::KDTreeSingleIndexAdaptor::Node::__anon2::__anon4
swap	src/util/nanoflann.h	/^        void swap (CArray<T,N>& y) { std::swap_ranges(begin(),end(),y.begin()); }$/;"	f	class:nanoflann::CArray
traits	src/util/nanoflann.h	/^		struct traits {$/;"	s	struct:nanoflann::metric_L1
traits	src/util/nanoflann.h	/^		struct traits {$/;"	s	struct:nanoflann::metric_L2
traits	src/util/nanoflann.h	/^		struct traits {$/;"	s	struct:nanoflann::metric_L2_Simple
usedMemory	src/util/nanoflann.h	/^		size_t  usedMemory;$/;"	m	class:nanoflann::PooledAllocator
usedMemory	src/util/nanoflann.h	/^		size_t usedMemory() const$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
value_type	src/util/nanoflann.h	/^        typedef T              value_type;$/;"	t	class:nanoflann::CArray
veclen	src/util/nanoflann.h	/^		size_t veclen() const {$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
vind	src/util/nanoflann.h	/^		std::vector<IndexType> vind;$/;"	m	class:nanoflann::KDTreeSingleIndexAdaptor
wastedMemory	src/util/nanoflann.h	/^		size_t  wastedMemory;$/;"	m	class:nanoflann::PooledAllocator
worstDist	src/util/nanoflann.h	/^		inline DistanceType worstDist() const { return radius; }$/;"	f	class:nanoflann::RadiusResultSet
worstDist	src/util/nanoflann.h	/^		inline DistanceType worstDist() const$/;"	f	class:nanoflann::KNNResultSet
worst_item	src/util/nanoflann.h	/^		std::pair<IndexType,DistanceType> worst_item() const$/;"	f	class:nanoflann::RadiusResultSet
~KDTreeEigenMatrixAdaptor	src/util/nanoflann.h	/^		~KDTreeEigenMatrixAdaptor() {$/;"	f	struct:nanoflann::KDTreeEigenMatrixAdaptor
~KDTreeSingleIndexAdaptor	src/util/nanoflann.h	/^		~KDTreeSingleIndexAdaptor() { }$/;"	f	class:nanoflann::KDTreeSingleIndexAdaptor
~PooledAllocator	src/util/nanoflann.h	/^		~PooledAllocator() {$/;"	f	class:nanoflann::PooledAllocator
~RadiusResultSet	src/util/nanoflann.h	/^		inline ~RadiusResultSet() { }$/;"	f	class:nanoflann::RadiusResultSet
benchmarkSetting_fxfyfac	src/util/settings.cpp	/^float benchmarkSetting_fxfyfac = 0;$/;"	m	namespace:fdso	file:
benchmarkSetting_height	src/util/settings.cpp	/^int benchmarkSetting_height = 0;$/;"	m	namespace:fdso	file:
benchmarkSetting_width	src/util/settings.cpp	/^int benchmarkSetting_width = 0;$/;"	m	namespace:fdso	file:
benchmark_initializerSlackFactor	src/util/settings.cpp	/^float benchmark_initializerSlackFactor = 1;$/;"	m	namespace:fdso	file:
benchmark_noiseGridsize	src/util/settings.cpp	/^int benchmark_noiseGridsize = 3;$/;"	m	namespace:fdso	file:
benchmark_varBlurNoise	src/util/settings.cpp	/^float benchmark_varBlurNoise = 0;$/;"	m	namespace:fdso	file:
benchmark_varNoise	src/util/settings.cpp	/^float benchmark_varNoise = 0;$/;"	m	namespace:fdso	file:
debugSaveImages	src/util/settings.cpp	/^bool debugSaveImages = false;$/;"	m	namespace:fdso	file:
disableAllDisplay	src/util/settings.cpp	/^bool disableAllDisplay = false;$/;"	m	namespace:fdso	file:
disableReconfigure	src/util/settings.cpp	/^bool disableReconfigure=false;$/;"	m	namespace:fdso	file:
fdso	src/util/settings.cpp	/^namespace fdso$/;"	n	file:
freeDebugParam1	src/util/settings.cpp	/^float freeDebugParam1 = 1;$/;"	m	namespace:fdso	file:
freeDebugParam2	src/util/settings.cpp	/^float freeDebugParam2 = 1;$/;"	m	namespace:fdso	file:
freeDebugParam3	src/util/settings.cpp	/^float freeDebugParam3 = 1;$/;"	m	namespace:fdso	file:
freeDebugParam4	src/util/settings.cpp	/^float freeDebugParam4 = 1;$/;"	m	namespace:fdso	file:
freeDebugParam5	src/util/settings.cpp	/^float freeDebugParam5 = 1;$/;"	m	namespace:fdso	file:
goStepByStep	src/util/settings.cpp	/^bool goStepByStep = false;$/;"	m	namespace:fdso	file:
handleKey	src/util/settings.cpp	/^void handleKey(char k)$/;"	f	namespace:fdso
multiThreading	src/util/settings.cpp	/^bool multiThreading = true;$/;"	m	namespace:fdso	file:
pyrLevelsUsed	src/util/settings.cpp	/^int pyrLevelsUsed = PYR_LEVELS;$/;"	m	namespace:fdso	file:
setting_GNItsOnPointActivation	src/util/settings.cpp	/^int setting_GNItsOnPointActivation = 3;$/;"	m	namespace:fdso	file:
setting_affineOptModeA	src/util/settings.cpp	/^float setting_affineOptModeA = 1e12; \/\/original \/\/-1: fix. >=0: optimize (with prior, if > 0).$/;"	m	namespace:fdso	file:
setting_affineOptModeB	src/util/settings.cpp	/^float setting_affineOptModeB = 1e8; \/\/original \/\/-1: fix. >=0: optimize (with prior, if > 0).$/;"	m	namespace:fdso	file:
setting_coarseCutoffTH	src/util/settings.cpp	/^float setting_coarseCutoffTH = 20;$/;"	m	namespace:fdso	file:
setting_debugout_runquiet	src/util/settings.cpp	/^bool setting_debugout_runquiet = true; \/\/original is false$/;"	m	namespace:fdso	file:
setting_desiredImmatureDensity	src/util/settings.cpp	/^float setting_desiredImmatureDensity = 3000; \/\/ original is 1500 immature points per frame$/;"	m	namespace:fdso	file:
setting_desiredPointDensity	src/util/settings.cpp	/^float setting_desiredPointDensity = 4000; \/\/ original is 2000 aimed total points in the active window.$/;"	m	namespace:fdso	file:
setting_forceAceptStep	src/util/settings.cpp	/^bool setting_forceAceptStep = true;$/;"	m	namespace:fdso	file:
setting_frameEnergyTHConstWeight	src/util/settings.cpp	/^float setting_frameEnergyTHConstWeight = 0.5;$/;"	m	namespace:fdso	file:
setting_frameEnergyTHFacMedian	src/util/settings.cpp	/^float setting_frameEnergyTHFacMedian = 1.5;$/;"	m	namespace:fdso	file:
setting_frameEnergyTHN	src/util/settings.cpp	/^float setting_frameEnergyTHN = 0.7f;$/;"	m	namespace:fdso	file:
setting_fullResetRequested	src/util/settings.cpp	/^bool setting_fullResetRequested = false;$/;"	m	namespace:fdso	file:
setting_gammaWeightsPixelSelect	src/util/settings.cpp	/^int setting_gammaWeightsPixelSelect = 1; \/\/ 1 = use original intensity for pixel selection; 0 = use gamma-corrected intensity.$/;"	m	namespace:fdso	file:
setting_gradDownweightPerLevel	src/util/settings.cpp	/^float setting_gradDownweightPerLevel = 0.75;$/;"	m	namespace:fdso	file:
setting_huberTH	src/util/settings.cpp	/^float setting_huberTH = 9; \/\/ Huber Threshold$/;"	m	namespace:fdso	file:
setting_idepthFixPrior	src/util/settings.cpp	/^float setting_idepthFixPrior = 50*50;$/;"	m	namespace:fdso	file:
setting_idepthFixPriorMargFac	src/util/settings.cpp	/^float setting_idepthFixPriorMargFac = 600*600;$/;"	m	namespace:fdso	file:
setting_initialAffAPrior	src/util/settings.cpp	/^float setting_initialAffAPrior = 1e14;$/;"	m	namespace:fdso	file:
setting_initialAffBPrior	src/util/settings.cpp	/^float setting_initialAffBPrior = 1e14;$/;"	m	namespace:fdso	file:
setting_initialCalibHessian	src/util/settings.cpp	/^float setting_initialCalibHessian = 5e9;$/;"	m	namespace:fdso	file:
setting_initialRotPrior	src/util/settings.cpp	/^float setting_initialRotPrior = 1e11;$/;"	m	namespace:fdso	file:
setting_initialTransPrior	src/util/settings.cpp	/^float setting_initialTransPrior = 1e10;$/;"	m	namespace:fdso	file:
setting_keyframesPerSecond	src/util/settings.cpp	/^float setting_keyframesPerSecond = 0;   \/\/ if !=0, takes a fixed number of KF per second.$/;"	m	namespace:fdso	file:
setting_kfGlobalWeight	src/util/settings.cpp	/^float setting_kfGlobalWeight = 1;   \/\/ general weight on threshold, the larger the more KF's are taken (e.g., 2 = double the amount of KF's).$/;"	m	namespace:fdso	file:
setting_logStuff	src/util/settings.cpp	/^bool setting_logStuff = true;$/;"	m	namespace:fdso	file:
setting_margWeightFac	src/util/settings.cpp	/^float setting_margWeightFac = 0.5*0.5;          \/\/ factor on hessian when marginalizing, to account for inaccurate linearization points.$/;"	m	namespace:fdso	file:
setting_maxAffineWeight	src/util/settings.cpp	/^float setting_maxAffineWeight= 2;$/;"	m	namespace:fdso	file:
setting_maxFrames	src/util/settings.cpp	/^int   setting_maxFrames = 7; \/\/ max frames in window.$/;"	m	namespace:fdso	file:
setting_maxLogAffFacInWindow	src/util/settings.cpp	/^float setting_maxLogAffFacInWindow = 0.7; \/\/ marg a frame if factor between intensities to current frame is larger than 1\/X or X.$/;"	m	namespace:fdso	file:
setting_maxOptIterations	src/util/settings.cpp	/^int   setting_maxOptIterations=6; \/\/ max GN iterations.$/;"	m	namespace:fdso	file:
setting_maxPixSearch	src/util/settings.cpp	/^float setting_maxPixSearch = 0.027; \/\/ max length of the ep. line segment searched during immature point tracking. relative to image resolution.$/;"	m	namespace:fdso	file:
setting_maxShiftWeightR	src/util/settings.cpp	/^float setting_maxShiftWeightR= 0.0f * (640 + 480);    \/\/ original is 0.0f * (640+480);$/;"	m	namespace:fdso	file:
setting_maxShiftWeightRT	src/util/settings.cpp	/^float setting_maxShiftWeightRT= 0.02f * (640 + 480);  \/\/ original is 0.02f * (640+480);$/;"	m	namespace:fdso	file:
setting_maxShiftWeightT	src/util/settings.cpp	/^float setting_maxShiftWeightT= 0.04f * (640 + 480);   \/\/ original is 0.04f * (640+480);$/;"	m	namespace:fdso	file:
setting_minFrameAge	src/util/settings.cpp	/^int   setting_minFrameAge = 1;$/;"	m	namespace:fdso	file:
setting_minFrames	src/util/settings.cpp	/^int   setting_minFrames = 5; \/\/ min frames in window.$/;"	m	namespace:fdso	file:
setting_minGoodActiveResForMarg	src/util/settings.cpp	/^int   setting_minGoodActiveResForMarg=3;$/;"	m	namespace:fdso	file:
setting_minGoodResForMarg	src/util/settings.cpp	/^int   setting_minGoodResForMarg=4;$/;"	m	namespace:fdso	file:
setting_minGradHistAdd	src/util/settings.cpp	/^float setting_minGradHistAdd = 7;$/;"	m	namespace:fdso	file:
setting_minGradHistCut	src/util/settings.cpp	/^float setting_minGradHistCut = 0.5;$/;"	m	namespace:fdso	file:
setting_minIdepthH_act	src/util/settings.cpp	/^float setting_minIdepthH_act = 100;$/;"	m	namespace:fdso	file:
setting_minIdepthH_marg	src/util/settings.cpp	/^float setting_minIdepthH_marg = 50;$/;"	m	namespace:fdso	file:
setting_minOptIterations	src/util/settings.cpp	/^int   setting_minOptIterations=1; \/\/ min GN iterations.$/;"	m	namespace:fdso	file:
setting_minPointsRemaining	src/util/settings.cpp	/^float setting_minPointsRemaining = 0.05;  \/\/ marg a frame if less than X% points remain.$/;"	m	namespace:fdso	file:
setting_minTraceQuality	src/util/settings.cpp	/^float setting_minTraceQuality = 3;$/;"	m	namespace:fdso	file:
setting_minTraceTestRadius	src/util/settings.cpp	/^int setting_minTraceTestRadius = 2;$/;"	m	namespace:fdso	file:
setting_onlyLogKFPoses	src/util/settings.cpp	/^bool setting_onlyLogKFPoses = false;$/;"	m	namespace:fdso	file:
setting_outlierTH	src/util/settings.cpp	/^float setting_outlierTH = 12*12;					\/\/ higher -> less strict$/;"	m	namespace:fdso	file:
setting_outlierTHSumComponent	src/util/settings.cpp	/^float setting_outlierTHSumComponent = 50*50; 		\/\/ higher -> less strong gradient-based reweighting .$/;"	m	namespace:fdso	file:
setting_overallEnergyTHWeight	src/util/settings.cpp	/^float setting_overallEnergyTHWeight = 1;$/;"	m	namespace:fdso	file:
setting_pattern	src/util/settings.cpp	/^int setting_pattern = 8;						\/\/ point pattern used. DISABLED.$/;"	m	namespace:fdso	file:
setting_photometricCalibration	src/util/settings.cpp	/^int setting_photometricCalibration = 2;$/;"	m	namespace:fdso	file:
setting_reTrackThreshold	src/util/settings.cpp	/^float setting_reTrackThreshold = 1.5; \/\/  �ĵ�1 û�еõ����� original is 1.5 (larger = re-track more often)$/;"	m	namespace:fdso	file:
setting_realTimeMaxKF	src/util/settings.cpp	/^bool setting_realTimeMaxKF = false;   \/\/ if true, takes as many KF's as possible (will break the system if the camera stays stationary)$/;"	m	namespace:fdso	file:
setting_render_display3D	src/util/settings.cpp	/^bool setting_render_display3D = true;$/;"	m	namespace:fdso	file:
setting_render_displayCoarseTrackingFull	src/util/settings.cpp	/^bool setting_render_displayCoarseTrackingFull=false;$/;"	m	namespace:fdso	file:
setting_render_displayDepth	src/util/settings.cpp	/^bool setting_render_displayDepth = true;$/;"	m	namespace:fdso	file:
setting_render_displayResidual	src/util/settings.cpp	/^bool setting_render_displayResidual = true;$/;"	m	namespace:fdso	file:
setting_render_displayVideo	src/util/settings.cpp	/^bool setting_render_displayVideo = true;$/;"	m	namespace:fdso	file:
setting_render_plotTrackingFull	src/util/settings.cpp	/^bool setting_render_plotTrackingFull = false;$/;"	m	namespace:fdso	file:
setting_render_renderWindowFrames	src/util/settings.cpp	/^bool setting_render_renderWindowFrames=true;$/;"	m	namespace:fdso	file:
setting_selectDirectionDistribution	src/util/settings.cpp	/^bool  setting_selectDirectionDistribution = true;$/;"	m	namespace:fdso	file:
setting_solverMode	src/util/settings.cpp	/^int setting_solverMode = SOLVER_FIX_LAMBDA | SOLVER_ORTHOGONALIZE_X_LATER;$/;"	m	namespace:fdso	file:
setting_solverModeDelta	src/util/settings.cpp	/^double setting_solverModeDelta = 0.00001;$/;"	m	namespace:fdso	file:
setting_thOptIterations	src/util/settings.cpp	/^float setting_thOptIterations=1.2; \/\/ factor on break threshold for GN iteration (larger = break earlier)$/;"	m	namespace:fdso	file:
setting_trace_GNIterations	src/util/settings.cpp	/^int setting_trace_GNIterations = 3;				\/\/ max # GN iterations$/;"	m	namespace:fdso	file:
setting_trace_GNThreshold	src/util/settings.cpp	/^float setting_trace_GNThreshold = 0.1;				\/\/ GN stop after this stepsize.$/;"	m	namespace:fdso	file:
setting_trace_extraSlackOnTH	src/util/settings.cpp	/^float setting_trace_extraSlackOnTH = 1.2;			\/\/ for energy-based outlier check, be slightly more relaxed by this factor.$/;"	m	namespace:fdso	file:
setting_trace_minImprovementFactor	src/util/settings.cpp	/^float setting_trace_minImprovementFactor = 2;		\/\/ if pixel-interval is smaller than this, leave it be.$/;"	m	namespace:fdso	file:
setting_trace_slackInterval	src/util/settings.cpp	/^float setting_trace_slackInterval = 1.5;			\/\/ if pixel-interval is smaller than this, leave it be.$/;"	m	namespace:fdso	file:
setting_trace_stepsize	src/util/settings.cpp	/^float setting_trace_stepsize = 1.0;				\/\/ stepsize for initial discrete search.$/;"	m	namespace:fdso	file:
setting_useExposure	src/util/settings.cpp	/^bool setting_useExposure = true;$/;"	m	namespace:fdso	file:
sparsityFactor	src/util/settings.cpp	/^int sparsityFactor = 5;	\/\/ not actually a setting, only some legacy stuff for coarse initializer.$/;"	m	namespace:fdso	file:
staticPattern	src/util/settings.cpp	/^int staticPattern[10][40][2] = {$/;"	m	namespace:fdso	file:
staticPatternNum	src/util/settings.cpp	/^int staticPatternNum[10] = {$/;"	m	namespace:fdso	file:
staticPatternPadding	src/util/settings.cpp	/^int staticPatternPadding[10] = {$/;"	m	namespace:fdso	file:
PYR_LEVELS	src/util/settings.h	50;"	d
SOLVER_FIX_LAMBDA	src/util/settings.h	42;"	d
SOLVER_MOMENTUM	src/util/settings.h	44;"	d
SOLVER_ORTHOGONALIZE_FULL	src/util/settings.h	38;"	d
SOLVER_ORTHOGONALIZE_POINTMARG	src/util/settings.h	37;"	d
SOLVER_ORTHOGONALIZE_SYSTEM	src/util/settings.h	36;"	d
SOLVER_ORTHOGONALIZE_X	src/util/settings.h	43;"	d
SOLVER_ORTHOGONALIZE_X_LATER	src/util/settings.h	46;"	d
SOLVER_REMOVE_POSEPRIOR	src/util/settings.h	40;"	d
SOLVER_STEPMOMENTUM	src/util/settings.h	45;"	d
SOLVER_SVD	src/util/settings.h	35;"	d
SOLVER_SVD_CUT7	src/util/settings.h	39;"	d
SOLVER_USE_GN	src/util/settings.h	41;"	d
fdso	src/util/settings.h	/^namespace fdso$/;"	n
patternNum	src/util/settings.h	215;"	d
patternP	src/util/settings.h	216;"	d
patternPadding	src/util/settings.h	217;"	d
DException	thirdparty/DUtils/DException.h	/^	DException(const char *msg) throw(): m_message(msg){}$/;"	f	class:DUtils::DException
DException	thirdparty/DUtils/DException.h	/^	DException(const string &msg) throw(): m_message(msg){}$/;"	f	class:DUtils::DException
DException	thirdparty/DUtils/DException.h	/^	DException(void) throw(): m_message("DUtils exception"){}$/;"	f	class:DUtils::DException
DException	thirdparty/DUtils/DException.h	/^class DException :$/;"	c	namespace:DUtils
DUtils	thirdparty/DUtils/DException.h	/^namespace DUtils {$/;"	n
__D_EXCEPTION__	thirdparty/DUtils/DException.h	14;"	d
m_message	thirdparty/DUtils/DException.h	/^	string m_message;$/;"	m	class:DUtils::DException
what	thirdparty/DUtils/DException.h	/^	virtual const char* what() const throw()$/;"	f	class:DUtils::DException
~DException	thirdparty/DUtils/DException.h	/^	virtual ~DException(void) throw(){}$/;"	f	class:DUtils::DException
DUtils	thirdparty/DUtils/DUtils.h	/^namespace DUtils$/;"	n
__D_UTILS__	thirdparty/DUtils/DUtils.h	33;"	d
RandomInt	thirdparty/DUtils/Random.cpp	/^int DUtils::Random::RandomInt(int min, int max){$/;"	f	class:DUtils::Random
SeedRand	thirdparty/DUtils/Random.cpp	/^void DUtils::Random::SeedRand(){$/;"	f	class:DUtils::Random
SeedRand	thirdparty/DUtils/Random.cpp	/^void DUtils::Random::SeedRand(int seed)$/;"	f	class:DUtils::Random
SeedRandOnce	thirdparty/DUtils/Random.cpp	/^void DUtils::Random::SeedRandOnce()$/;"	f	class:DUtils::Random
SeedRandOnce	thirdparty/DUtils/Random.cpp	/^void DUtils::Random::SeedRandOnce(int seed)$/;"	f	class:DUtils::Random
UnrepeatedRandomizer	thirdparty/DUtils/Random.cpp	/^DUtils::Random::UnrepeatedRandomizer::UnrepeatedRandomizer$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
UnrepeatedRandomizer	thirdparty/DUtils/Random.cpp	/^DUtils::Random::UnrepeatedRandomizer::UnrepeatedRandomizer(int min, int max)$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
createValues	thirdparty/DUtils/Random.cpp	/^void DUtils::Random::UnrepeatedRandomizer::createValues()$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
get	thirdparty/DUtils/Random.cpp	/^int DUtils::Random::UnrepeatedRandomizer::get()$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
operator =	thirdparty/DUtils/Random.cpp	/^DUtils::Random::UnrepeatedRandomizer::operator=$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
reset	thirdparty/DUtils/Random.cpp	/^void DUtils::Random::UnrepeatedRandomizer::reset()$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
DUtils	thirdparty/DUtils/Random.h	/^namespace DUtils {$/;"	n
Random	thirdparty/DUtils/Random.h	/^class Random$/;"	c	namespace:DUtils
RandomGaussianValue	thirdparty/DUtils/Random.h	/^	static T RandomGaussianValue(T mean, T sigma)$/;"	f	class:DUtils::Random
RandomValue	thirdparty/DUtils/Random.h	/^	static T RandomValue(){$/;"	f	class:DUtils::Random
RandomValue	thirdparty/DUtils/Random.h	/^	static T RandomValue(T min, T max){$/;"	f	class:DUtils::Random
UnrepeatedRandomizer	thirdparty/DUtils/Random.h	/^class Random::UnrepeatedRandomizer$/;"	c	class:DUtils::Random
__D_RANDOM__	thirdparty/DUtils/Random.h	13;"	d
empty	thirdparty/DUtils/Random.h	/^  inline bool empty() const { return m_values.empty(); }$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
left	thirdparty/DUtils/Random.h	/^  inline unsigned int left() const { return m_values.size(); }$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
m_already_seeded	thirdparty/DUtils/Random.h	/^  static bool m_already_seeded;$/;"	m	class:DUtils::Random
m_max	thirdparty/DUtils/Random.h	/^  int m_max;$/;"	m	class:DUtils::Random::UnrepeatedRandomizer
m_min	thirdparty/DUtils/Random.h	/^  int m_min;$/;"	m	class:DUtils::Random::UnrepeatedRandomizer
m_values	thirdparty/DUtils/Random.h	/^  std::vector<int> m_values;$/;"	m	class:DUtils::Random::UnrepeatedRandomizer
~UnrepeatedRandomizer	thirdparty/DUtils/Random.h	/^  ~UnrepeatedRandomizer(){}$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
Format	thirdparty/DUtils/Timestamp.cpp	/^string Timestamp::Format(bool machine_friendly) const $/;"	f	class:Timestamp
Format	thirdparty/DUtils/Timestamp.cpp	/^string Timestamp::Format(double s) {$/;"	f	class:Timestamp
Timestamp	thirdparty/DUtils/Timestamp.cpp	/^Timestamp::Timestamp(Timestamp::tOptions option)$/;"	f	class:Timestamp
WIN32	thirdparty/DUtils/Timestamp.cpp	22;"	d	file:
empty	thirdparty/DUtils/Timestamp.cpp	/^bool Timestamp::empty() const$/;"	f	class:Timestamp
getFloatTime	thirdparty/DUtils/Timestamp.cpp	/^double Timestamp::getFloatTime() const {$/;"	f	class:Timestamp
getStringTime	thirdparty/DUtils/Timestamp.cpp	/^string Timestamp::getStringTime() const {$/;"	f	class:Timestamp
minus	thirdparty/DUtils/Timestamp.cpp	/^Timestamp Timestamp::minus(unsigned long secs, unsigned long usecs) const$/;"	f	class:Timestamp
operator +	thirdparty/DUtils/Timestamp.cpp	/^Timestamp Timestamp::operator+ (double s) const$/;"	f	class:Timestamp
operator +=	thirdparty/DUtils/Timestamp.cpp	/^Timestamp& Timestamp::operator+= (double s)$/;"	f	class:Timestamp
operator -	thirdparty/DUtils/Timestamp.cpp	/^Timestamp Timestamp::operator- (double s) const$/;"	f	class:Timestamp
operator -	thirdparty/DUtils/Timestamp.cpp	/^double Timestamp::operator- (const Timestamp &t) const {$/;"	f	class:Timestamp
operator -=	thirdparty/DUtils/Timestamp.cpp	/^Timestamp& Timestamp::operator-= (double s)$/;"	f	class:Timestamp
operator <	thirdparty/DUtils/Timestamp.cpp	/^bool Timestamp::operator< (const Timestamp &t) const$/;"	f	class:Timestamp
operator <=	thirdparty/DUtils/Timestamp.cpp	/^bool Timestamp::operator<= (const Timestamp &t) const$/;"	f	class:Timestamp
operator ==	thirdparty/DUtils/Timestamp.cpp	/^bool Timestamp::operator== (const Timestamp &t) const$/;"	f	class:Timestamp
operator >	thirdparty/DUtils/Timestamp.cpp	/^bool Timestamp::operator> (const Timestamp &t) const$/;"	f	class:Timestamp
operator >=	thirdparty/DUtils/Timestamp.cpp	/^bool Timestamp::operator>= (const Timestamp &t) const$/;"	f	class:Timestamp
plus	thirdparty/DUtils/Timestamp.cpp	/^Timestamp Timestamp::plus(unsigned long secs, unsigned long usecs) const$/;"	f	class:Timestamp
setTime	thirdparty/DUtils/Timestamp.cpp	/^void Timestamp::setTime(const string &stime){$/;"	f	class:Timestamp
setTime	thirdparty/DUtils/Timestamp.cpp	/^void Timestamp::setTime(double s)$/;"	f	class:Timestamp
setToCurrentTime	thirdparty/DUtils/Timestamp.cpp	/^void Timestamp::setToCurrentTime(){$/;"	f	class:Timestamp
sprintf	thirdparty/DUtils/Timestamp.cpp	28;"	d	file:
~Timestamp	thirdparty/DUtils/Timestamp.cpp	/^Timestamp::~Timestamp(void)$/;"	f	class:Timestamp
CURRENT_TIME	thirdparty/DUtils/Timestamp.h	/^    CURRENT_TIME = 0x1,$/;"	e	enum:DUtils::Timestamp::tOptions
DUtils	thirdparty/DUtils/Timestamp.h	/^namespace DUtils {$/;"	n
NONE	thirdparty/DUtils/Timestamp.h	/^    NONE = 0,$/;"	e	enum:DUtils::Timestamp::tOptions
Timestamp	thirdparty/DUtils/Timestamp.h	/^class Timestamp$/;"	c	namespace:DUtils
ZERO	thirdparty/DUtils/Timestamp.h	/^    ZERO = 0x2$/;"	e	enum:DUtils::Timestamp::tOptions
__D_TIMESTAMP__	thirdparty/DUtils/Timestamp.h	11;"	d
getTime	thirdparty/DUtils/Timestamp.h	/^	inline void getTime(unsigned long &secs, unsigned long &usecs) const$/;"	f	class:DUtils::Timestamp
m_secs	thirdparty/DUtils/Timestamp.h	/^	unsigned long m_secs;	\/\/ seconds$/;"	m	class:DUtils::Timestamp
m_usecs	thirdparty/DUtils/Timestamp.h	/^	unsigned long m_usecs;	\/\/ microseconds$/;"	m	class:DUtils::Timestamp
setTime	thirdparty/DUtils/Timestamp.h	/^	inline void setTime(unsigned long secs, unsigned long usecs){$/;"	f	class:DUtils::Timestamp
tOptions	thirdparty/DUtils/Timestamp.h	/^  enum tOptions$/;"	g	class:DUtils::Timestamp
BRIEF	thirdparty/DVision/BRIEF.cpp	/^BRIEF::BRIEF(int nbits, int patch_size, Type type):$/;"	f	class:BRIEF
compute	thirdparty/DVision/BRIEF.cpp	/^void BRIEF::compute(const cv::Mat &image, $/;"	f	class:BRIEF
generateTestPoints	thirdparty/DVision/BRIEF.cpp	/^void BRIEF::generateTestPoints()$/;"	f	class:BRIEF
~BRIEF	thirdparty/DVision/BRIEF.cpp	/^BRIEF::~BRIEF()$/;"	f	class:BRIEF
BRIEF	thirdparty/DVision/BRIEF.h	/^class BRIEF$/;"	c	namespace:DVision
DVision	thirdparty/DVision/BRIEF.h	/^namespace DVision {$/;"	n
RANDOM	thirdparty/DVision/BRIEF.h	/^    RANDOM, \/\/ random pairs (Calonder's original version)$/;"	e	enum:DVision::BRIEF::Type
RANDOM_CLOSE	thirdparty/DVision/BRIEF.h	/^    RANDOM_CLOSE, \/\/ random but close pairs (used in GalvezIROS11)$/;"	e	enum:DVision::BRIEF::Type
Type	thirdparty/DVision/BRIEF.h	/^  enum Type$/;"	g	class:DVision::BRIEF
__D_BRIEF__	thirdparty/DVision/BRIEF.h	30;"	d
bitset	thirdparty/DVision/BRIEF.h	/^  typedef boost::dynamic_bitset<> bitset;$/;"	t	class:DVision::BRIEF
distance	thirdparty/DVision/BRIEF.h	/^  inline static int distance(const bitset &a, const bitset &b)$/;"	f	class:DVision::BRIEF
exportPairs	thirdparty/DVision/BRIEF.h	/^  inline void exportPairs(std::vector<int> &x1, std::vector<int> &y1,$/;"	f	class:DVision::BRIEF
getDescriptorLengthInBits	thirdparty/DVision/BRIEF.h	/^  inline int getDescriptorLengthInBits() const$/;"	f	class:DVision::BRIEF
getPatchSize	thirdparty/DVision/BRIEF.h	/^  inline int getPatchSize() const$/;"	f	class:DVision::BRIEF
getType	thirdparty/DVision/BRIEF.h	/^  inline Type getType() const$/;"	f	class:DVision::BRIEF
importPairs	thirdparty/DVision/BRIEF.h	/^  inline void importPairs(const std::vector<int> &x1, $/;"	f	class:DVision::BRIEF
m_bit_length	thirdparty/DVision/BRIEF.h	/^  int m_bit_length;$/;"	m	class:DVision::BRIEF
m_patch_size	thirdparty/DVision/BRIEF.h	/^  int m_patch_size;$/;"	m	class:DVision::BRIEF
m_type	thirdparty/DVision/BRIEF.h	/^  Type m_type;$/;"	m	class:DVision::BRIEF
m_x1	thirdparty/DVision/BRIEF.h	/^  std::vector<int> m_x1, m_x2;$/;"	m	class:DVision::BRIEF
m_x2	thirdparty/DVision/BRIEF.h	/^  std::vector<int> m_x1, m_x2;$/;"	m	class:DVision::BRIEF
m_y1	thirdparty/DVision/BRIEF.h	/^  std::vector<int> m_y1, m_y2;$/;"	m	class:DVision::BRIEF
m_y2	thirdparty/DVision/BRIEF.h	/^  std::vector<int> m_y1, m_y2;$/;"	m	class:DVision::BRIEF
operator ()	thirdparty/DVision/BRIEF.h	/^  inline void operator() (const cv::Mat &image, $/;"	f	class:DVision::BRIEF
DVision	thirdparty/DVision/DVision.h	/^namespace DVision$/;"	n
__D_VISION__	thirdparty/DVision/DVision.h	33;"	d
Adj	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Adjoint Adj() const {$/;"	f	class:Sophus::RxSO3GroupBase
Adjoint	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef Matrix<Scalar,DoF,DoF> Adjoint;$/;"	t	class:Sophus::RxSO3GroupBase
Adjoint	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef typename Base::Adjoint Adjoint;$/;"	t	class:Eigen::Map
Adjoint	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef typename Base::Adjoint Adjoint;$/;"	t	class:Sophus::RxSO3Group
Base	thirdparty/Sophus/sophus/rxso3.hpp	/^  Base;$/;"	t	class:Eigen::Map
Base	thirdparty/Sophus/sophus/rxso3.hpp	/^  Map<const Sophus::RxSO3Group<_Scalar>, _Options> > Base;$/;"	t	class:Eigen::Map
Base	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef RxSO3GroupBase<RxSO3Group<_Scalar,_Options> > Base;$/;"	t	class:Sophus::RxSO3Group
ConstQuaternionReference	thirdparty/Sophus/sophus/rxso3.hpp	/^  ::QuaternionType & ConstQuaternionReference;$/;"	t	class:Sophus::RxSO3Group
ConstQuaternionReference	thirdparty/Sophus/sophus/rxso3.hpp	/^  ConstQuaternionReference;$/;"	t	class:Eigen::Map
ConstQuaternionReference	thirdparty/Sophus/sophus/rxso3.hpp	/^  ConstQuaternionReference;$/;"	t	class:Sophus::RxSO3GroupBase
DoF	thirdparty/Sophus/sophus/rxso3.hpp	/^  static const int DoF = 4;$/;"	m	class:Sophus::RxSO3GroupBase
DoF	thirdparty/Sophus/sophus/rxso3.hpp	/^  static const int DoF = Base::DoF;$/;"	m	class:Eigen::Map
DoF	thirdparty/Sophus/sophus/rxso3.hpp	/^  static const int DoF = Base::DoF;$/;"	m	class:Sophus::RxSO3Group
EIGEN_DEPRECATED	thirdparty/Sophus/sophus/rxso3.hpp	/^typedef RxSO3Group<double> ScSO3 EIGEN_DEPRECATED;$/;"	t	namespace:Sophus
Eigen	thirdparty/Sophus/sophus/rxso3.hpp	/^namespace Eigen {$/;"	n
Map	thirdparty/Sophus/sophus/rxso3.hpp	/^  Map(Scalar* coeffs) : quaternion_(coeffs) {$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/rxso3.hpp	/^  Map(const Scalar* coeffs) : quaternion_(coeffs) {$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/rxso3.hpp	/^class Map<Sophus::RxSO3Group<_Scalar>, _Options>$/;"	c	namespace:Eigen
Map	thirdparty/Sophus/sophus/rxso3.hpp	/^class Map<const Sophus::RxSO3Group<_Scalar>, _Options>$/;"	c	namespace:Eigen
N	thirdparty/Sophus/sophus/rxso3.hpp	/^  static const int N = 3;$/;"	m	class:Sophus::RxSO3GroupBase
N	thirdparty/Sophus/sophus/rxso3.hpp	/^  static const int N = Base::N;$/;"	m	class:Eigen::Map
N	thirdparty/Sophus/sophus/rxso3.hpp	/^  static const int N = Base::N;$/;"	m	class:Sophus::RxSO3Group
Point	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef Matrix<Scalar,3,1> Point;$/;"	t	class:Sophus::RxSO3GroupBase
Point	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef typename Base::Point Point;$/;"	t	class:Eigen::Map
Point	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef typename Base::Point Point;$/;"	t	class:Sophus::RxSO3Group
QuaternionReference	thirdparty/Sophus/sophus/rxso3.hpp	/^  ::QuaternionType & QuaternionReference;$/;"	t	class:Sophus::RxSO3Group
QuaternionReference	thirdparty/Sophus/sophus/rxso3.hpp	/^  QuaternionReference;$/;"	t	class:Eigen::Map
QuaternionReference	thirdparty/Sophus/sophus/rxso3.hpp	/^  QuaternionReference;$/;"	t	class:Sophus::RxSO3GroupBase
QuaternionType	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef Map<Quaternion<Scalar>,_Options> QuaternionType;$/;"	t	struct:Eigen::internal::traits
QuaternionType	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef Map<const Quaternion<Scalar>,_Options> QuaternionType;$/;"	t	struct:Eigen::internal::traits
QuaternionType	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef Quaternion<Scalar> QuaternionType;$/;"	t	struct:Eigen::internal::traits
RXSO3_HPP	thirdparty/Sophus/sophus/rxso3.hpp	24;"	d
RxSO3Group	thirdparty/Sophus/sophus/rxso3.hpp	/^  RxSO3Group(const Quaternion<Scalar> & quat) : quaternion_(quat) {$/;"	f	class:Sophus::RxSO3Group
RxSO3Group	thirdparty/Sophus/sophus/rxso3.hpp	/^  RxSO3Group(const RxSO3GroupBase<OtherDerived> & other)$/;"	f	class:Sophus::RxSO3Group
RxSO3Group	thirdparty/Sophus/sophus/rxso3.hpp	/^  RxSO3Group(const Scalar & scale, const SO3Group<Scalar> & so3)$/;"	f	class:Sophus::RxSO3Group
RxSO3Group	thirdparty/Sophus/sophus/rxso3.hpp	/^  RxSO3Group(const Scalar & scale, const Transformation & R)$/;"	f	class:Sophus::RxSO3Group
RxSO3Group	thirdparty/Sophus/sophus/rxso3.hpp	/^  RxSO3Group(const Transformation & sR) {$/;"	f	class:Sophus::RxSO3Group
RxSO3Group	thirdparty/Sophus/sophus/rxso3.hpp	/^  inline RxSO3Group()$/;"	f	class:Sophus::RxSO3Group
RxSO3Group	thirdparty/Sophus/sophus/rxso3.hpp	/^class RxSO3Group : public RxSO3GroupBase<RxSO3Group<_Scalar,_Options> > {$/;"	c	namespace:Sophus
RxSO3GroupBase	thirdparty/Sophus/sophus/rxso3.hpp	/^class RxSO3GroupBase {$/;"	c	namespace:Sophus
RxSO3d	thirdparty/Sophus/sophus/rxso3.hpp	/^typedef RxSO3Group<double> RxSO3d; \/**< double precision RxSO3 *\/$/;"	t	namespace:Sophus
RxSO3f	thirdparty/Sophus/sophus/rxso3.hpp	/^typedef RxSO3Group<float> RxSO3f;  \/**< single precision RxSO3 *\/$/;"	t	namespace:Sophus
Scalar	thirdparty/Sophus/sophus/rxso3.hpp	/^  ::Scalar Scalar;$/;"	t	class:Sophus::RxSO3Group
Scalar	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Sophus::RxSO3GroupBase
Scalar	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef typename internal::traits<Map>::Scalar Scalar;$/;"	t	class:Eigen::Map
ScaleNotPositive	thirdparty/Sophus/sophus/rxso3.hpp	/^  ScaleNotPositive ()$/;"	f	class:Sophus::ScaleNotPositive
ScaleNotPositive	thirdparty/Sophus/sophus/rxso3.hpp	/^class ScaleNotPositive : public SophusException {$/;"	c	namespace:Sophus
Sophus	thirdparty/Sophus/sophus/rxso3.hpp	/^namespace Sophus {$/;"	n
Tangent	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef Matrix<Scalar,DoF,1> Tangent;$/;"	t	class:Sophus::RxSO3GroupBase
Tangent	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef typename Base::Tangent Tangent;$/;"	t	class:Eigen::Map
Tangent	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef typename Base::Tangent Tangent;$/;"	t	class:Sophus::RxSO3Group
Transformation	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef Matrix<Scalar,N,N> Transformation;$/;"	t	class:Sophus::RxSO3GroupBase
Transformation	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef typename Base::Transformation Transformation;$/;"	t	class:Eigen::Map
Transformation	thirdparty/Sophus/sophus/rxso3.hpp	/^  typedef typename Base::Transformation Transformation;$/;"	t	class:Sophus::RxSO3Group
cast	thirdparty/Sophus/sophus/rxso3.hpp	/^  inline RxSO3Group<NewScalarType> cast() const {$/;"	f	class:Sophus::RxSO3GroupBase
d_lieBracketab_by_d_a	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Adjoint d_lieBracketab_by_d_a(const Tangent & b) {$/;"	f	class:Sophus::RxSO3GroupBase
data	thirdparty/Sophus/sophus/rxso3.hpp	/^  inline Scalar* data() {$/;"	f	class:Sophus::RxSO3GroupBase
data	thirdparty/Sophus/sophus/rxso3.hpp	/^  inline const Scalar* data() const {$/;"	f	class:Sophus::RxSO3GroupBase
exp	thirdparty/Sophus/sophus/rxso3.hpp	/^  const RxSO3Group<Scalar> exp(const Tangent & a) {$/;"	f	class:Sophus::RxSO3GroupBase
expAndTheta	thirdparty/Sophus/sophus/rxso3.hpp	/^  const RxSO3Group<Scalar> expAndTheta(const Tangent & a,$/;"	f	class:Sophus::RxSO3GroupBase
fastMultiply	thirdparty/Sophus/sophus/rxso3.hpp	/^  void fastMultiply(const RxSO3Group<Scalar>& other) {$/;"	f	class:Sophus::RxSO3GroupBase
generator	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Transformation generator(int i) {$/;"	f	class:Sophus::RxSO3GroupBase
hat	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Transformation hat(const Tangent & a) {$/;"	f	class:Sophus::RxSO3GroupBase
internal	thirdparty/Sophus/sophus/rxso3.hpp	/^namespace internal {$/;"	n	namespace:Eigen
inverse	thirdparty/Sophus/sophus/rxso3.hpp	/^  const RxSO3Group<Scalar> inverse() const {$/;"	f	class:Sophus::RxSO3GroupBase
lieBracket	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Tangent lieBracket(const Tangent & a,$/;"	f	class:Sophus::RxSO3GroupBase
log	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Tangent log() const {$/;"	f	class:Sophus::RxSO3GroupBase
log	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Tangent log(const RxSO3Group<Scalar> & other) {$/;"	f	class:Sophus::RxSO3GroupBase
logAndTheta	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Tangent logAndTheta(const RxSO3Group<Scalar> & other,$/;"	f	class:Sophus::RxSO3GroupBase
matrix	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Transformation matrix() const {$/;"	f	class:Sophus::RxSO3GroupBase
num_parameters	thirdparty/Sophus/sophus/rxso3.hpp	/^  static const int num_parameters = 4;$/;"	m	class:Sophus::RxSO3GroupBase
num_parameters	thirdparty/Sophus/sophus/rxso3.hpp	/^  static const int num_parameters = Base::num_parameters;$/;"	m	class:Eigen::Map
num_parameters	thirdparty/Sophus/sophus/rxso3.hpp	/^  static const int num_parameters = Base::num_parameters;$/;"	m	class:Sophus::RxSO3Group
operator *	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Point operator*(const Point & p) const {$/;"	f	class:Sophus::RxSO3GroupBase
operator *	thirdparty/Sophus/sophus/rxso3.hpp	/^  const RxSO3Group<Scalar> operator*(const RxSO3Group<Scalar>& other) const {$/;"	f	class:Sophus::RxSO3GroupBase
operator *=	thirdparty/Sophus/sophus/rxso3.hpp	/^  void operator*=(const RxSO3Group<Scalar>& other) {$/;"	f	class:Sophus::RxSO3GroupBase
operator =	thirdparty/Sophus/sophus/rxso3.hpp	/^  RxSO3GroupBase<Derived>& operator=$/;"	f	class:Sophus::RxSO3GroupBase
quaternion	thirdparty/Sophus/sophus/rxso3.hpp	/^  ConstQuaternionReference quaternion() const {$/;"	f	class:Eigen::Map
quaternion	thirdparty/Sophus/sophus/rxso3.hpp	/^  ConstQuaternionReference quaternion() const {$/;"	f	class:Sophus::RxSO3Group
quaternion	thirdparty/Sophus/sophus/rxso3.hpp	/^  ConstQuaternionReference quaternion() const {$/;"	f	class:Sophus::RxSO3GroupBase
quaternion	thirdparty/Sophus/sophus/rxso3.hpp	/^  QuaternionReference quaternion() {$/;"	f	class:Eigen::Map
quaternion	thirdparty/Sophus/sophus/rxso3.hpp	/^  QuaternionReference quaternion() {$/;"	f	class:Sophus::RxSO3Group
quaternion	thirdparty/Sophus/sophus/rxso3.hpp	/^  QuaternionReference quaternion() {$/;"	f	class:Sophus::RxSO3GroupBase
quaternion_	thirdparty/Sophus/sophus/rxso3.hpp	/^  Map<Quaternion<Scalar>,_Options> quaternion_;$/;"	m	class:Eigen::Map
quaternion_	thirdparty/Sophus/sophus/rxso3.hpp	/^  Quaternion<Scalar> quaternion_;$/;"	m	class:Sophus::RxSO3Group
quaternion_	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Map<const Quaternion<Scalar>,_Options> quaternion_;$/;"	m	class:Eigen::Map
rotationMatrix	thirdparty/Sophus/sophus/rxso3.hpp	/^  Transformation rotationMatrix() const {$/;"	f	class:Sophus::RxSO3GroupBase
scale	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Scalar scale() const {$/;"	f	class:Sophus::RxSO3GroupBase
setRotationMatrix	thirdparty/Sophus/sophus/rxso3.hpp	/^  void setRotationMatrix(const Transformation & R) {$/;"	f	class:Sophus::RxSO3GroupBase
setScale	thirdparty/Sophus/sophus/rxso3.hpp	/^  void setScale(const Scalar & scale) {$/;"	f	class:Sophus::RxSO3GroupBase
setScaledRotationMatrix	thirdparty/Sophus/sophus/rxso3.hpp	/^  void setScaledRotationMatrix$/;"	f	class:Sophus::RxSO3GroupBase
traits	thirdparty/Sophus/sophus/rxso3.hpp	/^struct traits<Map<Sophus::RxSO3Group<_Scalar>, _Options> >$/;"	s	namespace:Eigen::internal
traits	thirdparty/Sophus/sophus/rxso3.hpp	/^struct traits<Map<const Sophus::RxSO3Group<_Scalar>, _Options> >$/;"	s	namespace:Eigen::internal
traits	thirdparty/Sophus/sophus/rxso3.hpp	/^struct traits<Sophus::RxSO3Group<_Scalar,_Options> > {$/;"	s	namespace:Eigen::internal
vee	thirdparty/Sophus/sophus/rxso3.hpp	/^  const Tangent vee(const Transformation & Omega) {$/;"	f	class:Sophus::RxSO3GroupBase
Adj	thirdparty/Sophus/sophus/se2.hpp	/^  const Adjoint Adj() const {$/;"	f	class:Sophus::SE2GroupBase
Adjoint	thirdparty/Sophus/sophus/se2.hpp	/^  typedef Matrix<Scalar,DoF,DoF> Adjoint;$/;"	t	class:Sophus::SE2GroupBase
Adjoint	thirdparty/Sophus/sophus/se2.hpp	/^  typedef typename Base::Adjoint Adjoint;$/;"	t	class:Eigen::Map
Adjoint	thirdparty/Sophus/sophus/se2.hpp	/^  typedef typename Base::Adjoint Adjoint;$/;"	t	class:Sophus::SE2Group
Base	thirdparty/Sophus/sophus/se2.hpp	/^  Base;$/;"	t	class:Eigen::Map
Base	thirdparty/Sophus/sophus/se2.hpp	/^  typedef SE2GroupBase<SE2Group<_Scalar,_Options> > Base;$/;"	t	class:Sophus::SE2Group
Base	thirdparty/Sophus/sophus/se2.hpp	/^  typedef Sophus::SE2GroupBase<Map<Sophus::SE2Group<_Scalar>, _Options> > Base;$/;"	t	class:Eigen::Map
ConstSO2Reference	thirdparty/Sophus/sophus/se2.hpp	/^  ::SO2Type & ConstSO2Reference;$/;"	t	class:Sophus::SE2Group
ConstSO2Reference	thirdparty/Sophus/sophus/se2.hpp	/^  ConstSO2Reference;$/;"	t	class:Sophus::SE2GroupBase
ConstSO2Reference	thirdparty/Sophus/sophus/se2.hpp	/^  typedef const typename internal::traits<Map>::SO2Type & ConstSO2Reference;$/;"	t	class:Eigen::Map
ConstTranslationReference	thirdparty/Sophus/sophus/se2.hpp	/^  ::TranslationType & ConstTranslationReference;$/;"	t	class:Sophus::SE2Group
ConstTranslationReference	thirdparty/Sophus/sophus/se2.hpp	/^  ConstTranslationReference;$/;"	t	class:Eigen::Map
ConstTranslationReference	thirdparty/Sophus/sophus/se2.hpp	/^  ConstTranslationReference;$/;"	t	class:Sophus::SE2GroupBase
DoF	thirdparty/Sophus/sophus/se2.hpp	/^  static const int DoF = 3;$/;"	m	class:Sophus::SE2GroupBase
DoF	thirdparty/Sophus/sophus/se2.hpp	/^  static const int DoF = Base::DoF;$/;"	m	class:Eigen::Map
DoF	thirdparty/Sophus/sophus/se2.hpp	/^  static const int DoF = Base::DoF;$/;"	m	class:Sophus::SE2Group
EIGEN_DEPRECATED	thirdparty/Sophus/sophus/se2.hpp	/^typedef SE2Group<double> SE2 EIGEN_DEPRECATED;$/;"	t	namespace:Sophus
Eigen	thirdparty/Sophus/sophus/se2.hpp	/^namespace Eigen {$/;"	n
Map	thirdparty/Sophus/sophus/se2.hpp	/^  Map(Scalar* coeffs)$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/se2.hpp	/^  Map(const Scalar* coeffs)$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/se2.hpp	/^  Map(const Scalar* trans_coeffs, const Scalar* rot_coeffs)$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/se2.hpp	/^class Map<Sophus::SE2Group<_Scalar>, _Options>$/;"	c	namespace:Eigen
Map	thirdparty/Sophus/sophus/se2.hpp	/^class Map<const Sophus::SE2Group<_Scalar>, _Options>$/;"	c	namespace:Eigen
N	thirdparty/Sophus/sophus/se2.hpp	/^  static const int N = 3;$/;"	m	class:Sophus::SE2GroupBase
N	thirdparty/Sophus/sophus/se2.hpp	/^  static const int N = Base::N;$/;"	m	class:Eigen::Map
N	thirdparty/Sophus/sophus/se2.hpp	/^  static const int N = Base::N;$/;"	m	class:Sophus::SE2Group
Point	thirdparty/Sophus/sophus/se2.hpp	/^  typedef Matrix<Scalar,2,1> Point;$/;"	t	class:Sophus::SE2GroupBase
Point	thirdparty/Sophus/sophus/se2.hpp	/^  typedef typename Base::Point Point;$/;"	t	class:Eigen::Map
Point	thirdparty/Sophus/sophus/se2.hpp	/^  typedef typename Base::Point Point;$/;"	t	class:Sophus::SE2Group
SE2Group	thirdparty/Sophus/sophus/se2.hpp	/^  SE2Group()$/;"	f	class:Sophus::SE2Group
SE2Group	thirdparty/Sophus/sophus/se2.hpp	/^  SE2Group(const SE2GroupBase<OtherDerived> & other)$/;"	f	class:Sophus::SE2Group
SE2Group	thirdparty/Sophus/sophus/se2.hpp	/^  SE2Group(const SO2GroupBase<OtherDerived> & so2,$/;"	f	class:Sophus::SE2Group
SE2Group	thirdparty/Sophus/sophus/se2.hpp	/^  SE2Group(const Scalar & theta,$/;"	f	class:Sophus::SE2Group
SE2Group	thirdparty/Sophus/sophus/se2.hpp	/^  SE2Group(const Transformation & T)$/;"	f	class:Sophus::SE2Group
SE2Group	thirdparty/Sophus/sophus/se2.hpp	/^  SE2Group(const std::complex<Scalar> & complex,$/;"	f	class:Sophus::SE2Group
SE2Group	thirdparty/Sophus/sophus/se2.hpp	/^  SE2Group(const typename SO2Group<Scalar>::Transformation & rotation_matrix,$/;"	f	class:Sophus::SE2Group
SE2Group	thirdparty/Sophus/sophus/se2.hpp	/^class SE2Group : public SE2GroupBase<SE2Group<_Scalar,_Options> > {$/;"	c	namespace:Sophus
SE2GroupBase	thirdparty/Sophus/sophus/se2.hpp	/^class SE2GroupBase {$/;"	c	namespace:Sophus
SE2d	thirdparty/Sophus/sophus/se2.hpp	/^typedef SE2Group<double> SE2d; \/**< double precision SE2 *\/$/;"	t	namespace:Sophus
SE2f	thirdparty/Sophus/sophus/se2.hpp	/^typedef SE2Group<float> SE2f;  \/**< single precision SE2 *\/$/;"	t	namespace:Sophus
SO2Reference	thirdparty/Sophus/sophus/se2.hpp	/^  ::SO2Type & SO2Reference;$/;"	t	class:Sophus::SE2Group
SO2Reference	thirdparty/Sophus/sophus/se2.hpp	/^  SO2Reference;$/;"	t	class:Sophus::SE2GroupBase
SO2Reference	thirdparty/Sophus/sophus/se2.hpp	/^  typedef typename internal::traits<Map>::SO2Type & SO2Reference;$/;"	t	class:Eigen::Map
SO2Type	thirdparty/Sophus/sophus/se2.hpp	/^  typedef Map<Sophus::SO2Group<Scalar>,_Options> SO2Type;$/;"	t	struct:Eigen::internal::traits
SO2Type	thirdparty/Sophus/sophus/se2.hpp	/^  typedef Map<const Sophus::SO2Group<Scalar>,_Options> SO2Type;$/;"	t	struct:Eigen::internal::traits
SO2Type	thirdparty/Sophus/sophus/se2.hpp	/^  typedef Sophus::SO2Group<Scalar> SO2Type;$/;"	t	struct:Eigen::internal::traits
SOPHUS_SE2_HPP	thirdparty/Sophus/sophus/se2.hpp	24;"	d
Scalar	thirdparty/Sophus/sophus/se2.hpp	/^  ::Scalar Scalar;$/;"	t	class:Sophus::SE2Group
Scalar	thirdparty/Sophus/sophus/se2.hpp	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	thirdparty/Sophus/sophus/se2.hpp	/^  typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Sophus::SE2GroupBase
Scalar	thirdparty/Sophus/sophus/se2.hpp	/^  typedef typename internal::traits<Map>::Scalar Scalar;$/;"	t	class:Eigen::Map
Sophus	thirdparty/Sophus/sophus/se2.hpp	/^namespace Sophus {$/;"	n
Tangent	thirdparty/Sophus/sophus/se2.hpp	/^  typedef Matrix<Scalar,DoF,1> Tangent;$/;"	t	class:Sophus::SE2GroupBase
Tangent	thirdparty/Sophus/sophus/se2.hpp	/^  typedef typename Base::Tangent Tangent;$/;"	t	class:Eigen::Map
Tangent	thirdparty/Sophus/sophus/se2.hpp	/^  typedef typename Base::Tangent Tangent;$/;"	t	class:Sophus::SE2Group
Transformation	thirdparty/Sophus/sophus/se2.hpp	/^  typedef Matrix<Scalar,N,N> Transformation;$/;"	t	class:Sophus::SE2GroupBase
Transformation	thirdparty/Sophus/sophus/se2.hpp	/^  typedef typename Base::Transformation Transformation;$/;"	t	class:Eigen::Map
Transformation	thirdparty/Sophus/sophus/se2.hpp	/^  typedef typename Base::Transformation Transformation;$/;"	t	class:Sophus::SE2Group
TranslationReference	thirdparty/Sophus/sophus/se2.hpp	/^  ::TranslationType & TranslationReference;$/;"	t	class:Sophus::SE2Group
TranslationReference	thirdparty/Sophus/sophus/se2.hpp	/^  TranslationReference;$/;"	t	class:Eigen::Map
TranslationReference	thirdparty/Sophus/sophus/se2.hpp	/^  TranslationReference;$/;"	t	class:Sophus::SE2GroupBase
TranslationType	thirdparty/Sophus/sophus/se2.hpp	/^  typedef Map<Matrix<Scalar,2,1>,_Options> TranslationType;$/;"	t	struct:Eigen::internal::traits
TranslationType	thirdparty/Sophus/sophus/se2.hpp	/^  typedef Map<const Matrix<Scalar,2,1>,_Options> TranslationType;$/;"	t	struct:Eigen::internal::traits
TranslationType	thirdparty/Sophus/sophus/se2.hpp	/^  typedef Matrix<Scalar,2,1> TranslationType;$/;"	t	struct:Eigen::internal::traits
cast	thirdparty/Sophus/sophus/se2.hpp	/^  inline SE2Group<NewScalarType> cast() const {$/;"	f	class:Sophus::SE2GroupBase
d_lieBracketab_by_d_a	thirdparty/Sophus/sophus/se2.hpp	/^  const Transformation d_lieBracketab_by_d_a(const Tangent & b) {$/;"	f	class:Sophus::SE2GroupBase
data	thirdparty/Sophus/sophus/se2.hpp	/^  Scalar* data() {$/;"	f	class:Sophus::SE2Group
data	thirdparty/Sophus/sophus/se2.hpp	/^  const Scalar* data() const {$/;"	f	class:Sophus::SE2Group
exp	thirdparty/Sophus/sophus/se2.hpp	/^  const SE2Group<Scalar> exp(const Tangent & a) {$/;"	f	class:Sophus::SE2GroupBase
fastMultiply	thirdparty/Sophus/sophus/se2.hpp	/^  void fastMultiply(const SE2Group<Scalar>& other) {$/;"	f	class:Sophus::SE2GroupBase
generator	thirdparty/Sophus/sophus/se2.hpp	/^  const Transformation generator(int i) {$/;"	f	class:Sophus::SE2GroupBase
hat	thirdparty/Sophus/sophus/se2.hpp	/^  const Transformation hat(const Tangent & v) {$/;"	f	class:Sophus::SE2GroupBase
internal	thirdparty/Sophus/sophus/se2.hpp	/^namespace internal {$/;"	n	namespace:Eigen
inverse	thirdparty/Sophus/sophus/se2.hpp	/^  const SE2Group<Scalar> inverse() const {$/;"	f	class:Sophus::SE2GroupBase
lieBracket	thirdparty/Sophus/sophus/se2.hpp	/^  const Tangent lieBracket(const Tangent & a,$/;"	f	class:Sophus::SE2GroupBase
log	thirdparty/Sophus/sophus/se2.hpp	/^  const Tangent log() const {$/;"	f	class:Sophus::SE2GroupBase
log	thirdparty/Sophus/sophus/se2.hpp	/^  const Tangent log(const SE2Group<Scalar> & other) {$/;"	f	class:Sophus::SE2GroupBase
matrix	thirdparty/Sophus/sophus/se2.hpp	/^  const Transformation matrix() const {$/;"	f	class:Sophus::SE2GroupBase
matrix2x3	thirdparty/Sophus/sophus/se2.hpp	/^  const Matrix<Scalar,2,3> matrix2x3() const {$/;"	f	class:Sophus::SE2GroupBase
normalize	thirdparty/Sophus/sophus/se2.hpp	/^  void normalize() {$/;"	f	class:Sophus::SE2GroupBase
num_parameters	thirdparty/Sophus/sophus/se2.hpp	/^  static const int num_parameters = 4;$/;"	m	class:Sophus::SE2GroupBase
num_parameters	thirdparty/Sophus/sophus/se2.hpp	/^  static const int num_parameters = Base::num_parameters;$/;"	m	class:Eigen::Map
num_parameters	thirdparty/Sophus/sophus/se2.hpp	/^  static const int num_parameters = Base::num_parameters;$/;"	m	class:Sophus::SE2Group
operator *	thirdparty/Sophus/sophus/se2.hpp	/^  const Point operator*(const Point & p) const {$/;"	f	class:Sophus::SE2GroupBase
operator *	thirdparty/Sophus/sophus/se2.hpp	/^  const SE2Group<Scalar> operator*(const SE2Group<Scalar>& other) const {$/;"	f	class:Sophus::SE2GroupBase
operator *=	thirdparty/Sophus/sophus/se2.hpp	/^  void operator*=(const SE2Group<Scalar>& other) {$/;"	f	class:Sophus::SE2GroupBase
operator =	thirdparty/Sophus/sophus/se2.hpp	/^  SE2GroupBase<Derived>& operator= (const SE2GroupBase<OtherDerived> & other) {$/;"	f	class:Sophus::SE2GroupBase
rotationMatrix	thirdparty/Sophus/sophus/se2.hpp	/^  const Matrix<Scalar,2,2> rotationMatrix() const {$/;"	f	class:Sophus::SE2GroupBase
setComplex	thirdparty/Sophus/sophus/se2.hpp	/^  void setComplex(const Matrix<Scalar,2,1> & complex) {$/;"	f	class:Sophus::SE2GroupBase
setRotationMatrix	thirdparty/Sophus/sophus/se2.hpp	/^  void setRotationMatrix(const Matrix<Scalar,2,2> & R) {$/;"	f	class:Sophus::SE2GroupBase
so2	thirdparty/Sophus/sophus/se2.hpp	/^  ConstSO2Reference so2() const {$/;"	f	class:Eigen::Map
so2	thirdparty/Sophus/sophus/se2.hpp	/^  ConstSO2Reference so2() const {$/;"	f	class:Sophus::SE2Group
so2	thirdparty/Sophus/sophus/se2.hpp	/^  ConstSO2Reference so2() const {$/;"	f	class:Sophus::SE2GroupBase
so2	thirdparty/Sophus/sophus/se2.hpp	/^  SO2Reference so2() {$/;"	f	class:Eigen::Map
so2	thirdparty/Sophus/sophus/se2.hpp	/^  SO2Reference so2() {$/;"	f	class:Sophus::SE2Group
so2	thirdparty/Sophus/sophus/se2.hpp	/^  SO2Reference so2() {$/;"	f	class:Sophus::SE2GroupBase
so2_	thirdparty/Sophus/sophus/se2.hpp	/^  Map<Sophus::SO2Group<Scalar>,_Options> so2_;$/;"	m	class:Eigen::Map
so2_	thirdparty/Sophus/sophus/se2.hpp	/^  Sophus::SO2Group<Scalar> so2_;$/;"	m	class:Sophus::SE2Group
so2_	thirdparty/Sophus/sophus/se2.hpp	/^  const Map<const Sophus::SO2Group<Scalar>,_Options> so2_;$/;"	m	class:Eigen::Map
traits	thirdparty/Sophus/sophus/se2.hpp	/^struct traits<Map<Sophus::SE2Group<_Scalar>, _Options> >$/;"	s	namespace:Eigen::internal
traits	thirdparty/Sophus/sophus/se2.hpp	/^struct traits<Map<const Sophus::SE2Group<_Scalar>, _Options> >$/;"	s	namespace:Eigen::internal
traits	thirdparty/Sophus/sophus/se2.hpp	/^struct traits<Sophus::SE2Group<_Scalar,_Options> > {$/;"	s	namespace:Eigen::internal
translation	thirdparty/Sophus/sophus/se2.hpp	/^  ConstTranslationReference translation() const {$/;"	f	class:Eigen::Map
translation	thirdparty/Sophus/sophus/se2.hpp	/^  ConstTranslationReference translation() const {$/;"	f	class:Sophus::SE2Group
translation	thirdparty/Sophus/sophus/se2.hpp	/^  ConstTranslationReference translation() const {$/;"	f	class:Sophus::SE2GroupBase
translation	thirdparty/Sophus/sophus/se2.hpp	/^  TranslationReference translation() {$/;"	f	class:Eigen::Map
translation	thirdparty/Sophus/sophus/se2.hpp	/^  TranslationReference translation() {$/;"	f	class:Sophus::SE2Group
translation	thirdparty/Sophus/sophus/se2.hpp	/^  TranslationReference translation() {$/;"	f	class:Sophus::SE2GroupBase
translation_	thirdparty/Sophus/sophus/se2.hpp	/^  Map<Matrix<Scalar,2,1>,_Options> translation_;$/;"	m	class:Eigen::Map
translation_	thirdparty/Sophus/sophus/se2.hpp	/^  Matrix<Scalar,2,1> translation_;$/;"	m	class:Sophus::SE2Group
translation_	thirdparty/Sophus/sophus/se2.hpp	/^  const Map<const Matrix<Scalar,2,1>,_Options> translation_;$/;"	m	class:Eigen::Map
unit_complex	thirdparty/Sophus/sophus/se2.hpp	/^  unit_complex() const {$/;"	f	class:Sophus::SE2GroupBase
vee	thirdparty/Sophus/sophus/se2.hpp	/^  const Tangent vee(const Transformation & Omega) {$/;"	f	class:Sophus::SE2GroupBase
Adj	thirdparty/Sophus/sophus/se3.hpp	/^  const Adjoint Adj() const {$/;"	f	class:Sophus::SE3GroupBase
Adjoint	thirdparty/Sophus/sophus/se3.hpp	/^  typedef Matrix<Scalar,DoF,DoF> Adjoint;$/;"	t	class:Sophus::SE3GroupBase
Adjoint	thirdparty/Sophus/sophus/se3.hpp	/^  typedef typename Base::Adjoint Adjoint;$/;"	t	class:Eigen::Map
Adjoint	thirdparty/Sophus/sophus/se3.hpp	/^  typedef typename Base::Adjoint Adjoint;$/;"	t	class:Sophus::SE3Group
Base	thirdparty/Sophus/sophus/se3.hpp	/^  Base;$/;"	t	class:Eigen::Map
Base	thirdparty/Sophus/sophus/se3.hpp	/^  typedef SE3GroupBase<SE3Group<_Scalar,_Options> > Base;$/;"	t	class:Sophus::SE3Group
Base	thirdparty/Sophus/sophus/se3.hpp	/^  typedef Sophus::SE3GroupBase<Map<Sophus::SE3Group<_Scalar>, _Options> > Base;$/;"	t	class:Eigen::Map
ConstSO3Reference	thirdparty/Sophus/sophus/se3.hpp	/^  ::SO3Type & ConstSO3Reference;$/;"	t	class:Sophus::SE3Group
ConstSO3Reference	thirdparty/Sophus/sophus/se3.hpp	/^  ConstSO3Reference;$/;"	t	class:Eigen::Map
ConstSO3Reference	thirdparty/Sophus/sophus/se3.hpp	/^  ConstSO3Reference;$/;"	t	class:Sophus::SE3GroupBase
ConstTranslationReference	thirdparty/Sophus/sophus/se3.hpp	/^  ::TranslationType & ConstTranslationReference;$/;"	t	class:Sophus::SE3Group
ConstTranslationReference	thirdparty/Sophus/sophus/se3.hpp	/^  ConstTranslationReference;$/;"	t	class:Eigen::Map
ConstTranslationReference	thirdparty/Sophus/sophus/se3.hpp	/^  ConstTranslationReference;$/;"	t	class:Sophus::SE3GroupBase
DoF	thirdparty/Sophus/sophus/se3.hpp	/^  static const int DoF = 6;$/;"	m	class:Sophus::SE3GroupBase
DoF	thirdparty/Sophus/sophus/se3.hpp	/^  static const int DoF = Base::DoF;$/;"	m	class:Eigen::Map
DoF	thirdparty/Sophus/sophus/se3.hpp	/^  static const int DoF = Base::DoF;$/;"	m	class:Sophus::SE3Group
EIGEN_DEPRECATED	thirdparty/Sophus/sophus/se3.hpp	/^typedef SE3Group<double> SE3 EIGEN_DEPRECATED;$/;"	t	namespace:Sophus
Eigen	thirdparty/Sophus/sophus/se3.hpp	/^namespace Eigen {$/;"	n
M3_marcos_dont_like_commas	thirdparty/Sophus/sophus/se3.hpp	/^  typedef Transformation M3_marcos_dont_like_commas;$/;"	t	class:Sophus::SE3GroupBase
Map	thirdparty/Sophus/sophus/se3.hpp	/^  Map(Scalar* coeffs)$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/se3.hpp	/^  Map(const Scalar* coeffs)$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/se3.hpp	/^  Map(const Scalar* trans_coeffs, const Scalar* rot_coeffs)$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/se3.hpp	/^class Map<Sophus::SE3Group<_Scalar>, _Options>$/;"	c	namespace:Eigen
Map	thirdparty/Sophus/sophus/se3.hpp	/^class Map<const Sophus::SE3Group<_Scalar>, _Options>$/;"	c	namespace:Eigen
Matrix6d	thirdparty/Sophus/sophus/se3.hpp	/^typedef Matrix<double,6,6> Matrix6d;$/;"	t	namespace:Sophus
Matrix6f	thirdparty/Sophus/sophus/se3.hpp	/^typedef Matrix<float,6,6> Matrix6f;$/;"	t	namespace:Sophus
N	thirdparty/Sophus/sophus/se3.hpp	/^  static const int N = 4;$/;"	m	class:Sophus::SE3GroupBase
N	thirdparty/Sophus/sophus/se3.hpp	/^  static const int N = Base::N;$/;"	m	class:Eigen::Map
N	thirdparty/Sophus/sophus/se3.hpp	/^  static const int N = Base::N;$/;"	m	class:Sophus::SE3Group
Point	thirdparty/Sophus/sophus/se3.hpp	/^  typedef Matrix<Scalar,3,1> Point;$/;"	t	class:Sophus::SE3GroupBase
Point	thirdparty/Sophus/sophus/se3.hpp	/^  typedef typename Base::Point Point;$/;"	t	class:Eigen::Map
Point	thirdparty/Sophus/sophus/se3.hpp	/^  typedef typename Base::Point Point;$/;"	t	class:Sophus::SE3Group
SE3Group	thirdparty/Sophus/sophus/se3.hpp	/^  SE3Group()$/;"	f	class:Sophus::SE3Group
SE3Group	thirdparty/Sophus/sophus/se3.hpp	/^  SE3Group(const Eigen::Matrix<Scalar,4,4>& T)$/;"	f	class:Sophus::SE3Group
SE3Group	thirdparty/Sophus/sophus/se3.hpp	/^  SE3Group(const Matrix<Scalar,3,3> & rotation_matrix,$/;"	f	class:Sophus::SE3Group
SE3Group	thirdparty/Sophus/sophus/se3.hpp	/^  SE3Group(const Quaternion<Scalar> & quaternion,$/;"	f	class:Sophus::SE3Group
SE3Group	thirdparty/Sophus/sophus/se3.hpp	/^  SE3Group(const SE3GroupBase<OtherDerived> & other)$/;"	f	class:Sophus::SE3Group
SE3Group	thirdparty/Sophus/sophus/se3.hpp	/^  SE3Group(const SO3GroupBase<OtherDerived> & so3,$/;"	f	class:Sophus::SE3Group
SE3Group	thirdparty/Sophus/sophus/se3.hpp	/^class SE3Group : public SE3GroupBase<SE3Group<_Scalar,_Options> > {$/;"	c	namespace:Sophus
SE3GroupBase	thirdparty/Sophus/sophus/se3.hpp	/^class SE3GroupBase {$/;"	c	namespace:Sophus
SE3d	thirdparty/Sophus/sophus/se3.hpp	/^typedef SE3Group<double> SE3d; \/**< double precision SE3 *\/$/;"	t	namespace:Sophus
SE3f	thirdparty/Sophus/sophus/se3.hpp	/^typedef SE3Group<float> SE3f;  \/**< single precision SE3 *\/$/;"	t	namespace:Sophus
SO3Reference	thirdparty/Sophus/sophus/se3.hpp	/^  ::SO3Type & SO3Reference;$/;"	t	class:Sophus::SE3Group
SO3Reference	thirdparty/Sophus/sophus/se3.hpp	/^  SO3Reference;$/;"	t	class:Eigen::Map
SO3Reference	thirdparty/Sophus/sophus/se3.hpp	/^  SO3Reference;$/;"	t	class:Sophus::SE3GroupBase
SO3Type	thirdparty/Sophus/sophus/se3.hpp	/^  typedef Map<Sophus::SO3Group<Scalar>,_Options> SO3Type;$/;"	t	struct:Eigen::internal::traits
SO3Type	thirdparty/Sophus/sophus/se3.hpp	/^  typedef Map<const Sophus::SO3Group<Scalar>,_Options> SO3Type;$/;"	t	struct:Eigen::internal::traits
SO3Type	thirdparty/Sophus/sophus/se3.hpp	/^  typedef Sophus::SO3Group<Scalar> SO3Type;$/;"	t	struct:Eigen::internal::traits
SOPHUS_SE3_HPP	thirdparty/Sophus/sophus/se3.hpp	25;"	d
Scalar	thirdparty/Sophus/sophus/se3.hpp	/^  ::Scalar Scalar;$/;"	t	class:Sophus::SE3Group
Scalar	thirdparty/Sophus/sophus/se3.hpp	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	thirdparty/Sophus/sophus/se3.hpp	/^  typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Sophus::SE3GroupBase
Scalar	thirdparty/Sophus/sophus/se3.hpp	/^  typedef typename internal::traits<Map>::Scalar Scalar;$/;"	t	class:Eigen::Map
Sophus	thirdparty/Sophus/sophus/se3.hpp	/^namespace Sophus {$/;"	n
Tangent	thirdparty/Sophus/sophus/se3.hpp	/^  typedef Matrix<Scalar,DoF,1> Tangent;$/;"	t	class:Sophus::SE3GroupBase
Tangent	thirdparty/Sophus/sophus/se3.hpp	/^  typedef typename Base::Tangent Tangent;$/;"	t	class:Eigen::Map
Tangent	thirdparty/Sophus/sophus/se3.hpp	/^  typedef typename Base::Tangent Tangent;$/;"	t	class:Sophus::SE3Group
Transformation	thirdparty/Sophus/sophus/se3.hpp	/^  typedef Matrix<Scalar,N,N> Transformation;$/;"	t	class:Sophus::SE3GroupBase
Transformation	thirdparty/Sophus/sophus/se3.hpp	/^  typedef typename Base::Transformation Transformation;$/;"	t	class:Eigen::Map
Transformation	thirdparty/Sophus/sophus/se3.hpp	/^  typedef typename Base::Transformation Transformation;$/;"	t	class:Sophus::SE3Group
TranslationReference	thirdparty/Sophus/sophus/se3.hpp	/^  ::TranslationType & TranslationReference;$/;"	t	class:Sophus::SE3Group
TranslationReference	thirdparty/Sophus/sophus/se3.hpp	/^  TranslationReference;$/;"	t	class:Eigen::Map
TranslationReference	thirdparty/Sophus/sophus/se3.hpp	/^  TranslationReference;$/;"	t	class:Sophus::SE3GroupBase
TranslationType	thirdparty/Sophus/sophus/se3.hpp	/^  typedef Map<Matrix<Scalar,3,1>,_Options> TranslationType;$/;"	t	struct:Eigen::internal::traits
TranslationType	thirdparty/Sophus/sophus/se3.hpp	/^  typedef Map<const Matrix<Scalar,3,1>,_Options> TranslationType;$/;"	t	struct:Eigen::internal::traits
TranslationType	thirdparty/Sophus/sophus/se3.hpp	/^  typedef Matrix<Scalar,3,1> TranslationType;$/;"	t	struct:Eigen::internal::traits
Vector6d	thirdparty/Sophus/sophus/se3.hpp	/^typedef Matrix<double,6,1> Vector6d;$/;"	t	namespace:Sophus
Vector6f	thirdparty/Sophus/sophus/se3.hpp	/^typedef Matrix<float,6,1> Vector6f;$/;"	t	namespace:Sophus
cast	thirdparty/Sophus/sophus/se3.hpp	/^  inline SE3Group<NewScalarType> cast() const {$/;"	f	class:Sophus::SE3GroupBase
d_lieBracketab_by_d_a	thirdparty/Sophus/sophus/se3.hpp	/^  const Adjoint d_lieBracketab_by_d_a(const Tangent & b) {$/;"	f	class:Sophus::SE3GroupBase
data	thirdparty/Sophus/sophus/se3.hpp	/^  Scalar* data() {$/;"	f	class:Sophus::SE3Group
data	thirdparty/Sophus/sophus/se3.hpp	/^  const Scalar* data() const {$/;"	f	class:Sophus::SE3Group
exp	thirdparty/Sophus/sophus/se3.hpp	/^  const SE3Group<Scalar> exp(const Tangent & a) {$/;"	f	class:Sophus::SE3GroupBase
fastMultiply	thirdparty/Sophus/sophus/se3.hpp	/^  void fastMultiply(const SE3Group<Scalar>& other) {$/;"	f	class:Sophus::SE3GroupBase
generator	thirdparty/Sophus/sophus/se3.hpp	/^  const Transformation generator(int i) {$/;"	f	class:Sophus::SE3GroupBase
hat	thirdparty/Sophus/sophus/se3.hpp	/^  const Transformation hat(const Tangent & v) {$/;"	f	class:Sophus::SE3GroupBase
internal	thirdparty/Sophus/sophus/se3.hpp	/^namespace internal {$/;"	n	namespace:Eigen
inverse	thirdparty/Sophus/sophus/se3.hpp	/^  const SE3Group<Scalar> inverse() const {$/;"	f	class:Sophus::SE3GroupBase
lieBracket	thirdparty/Sophus/sophus/se3.hpp	/^  const Tangent lieBracket(const Tangent & a,$/;"	f	class:Sophus::SE3GroupBase
log	thirdparty/Sophus/sophus/se3.hpp	/^  const Tangent log() const {$/;"	f	class:Sophus::SE3GroupBase
log	thirdparty/Sophus/sophus/se3.hpp	/^  const Tangent log(const SE3Group<Scalar> & se3) {$/;"	f	class:Sophus::SE3GroupBase
matrix	thirdparty/Sophus/sophus/se3.hpp	/^  const Transformation matrix() const {$/;"	f	class:Sophus::SE3GroupBase
matrix3x4	thirdparty/Sophus/sophus/se3.hpp	/^  const Matrix<Scalar,3,4> matrix3x4() const {$/;"	f	class:Sophus::SE3GroupBase
normalize	thirdparty/Sophus/sophus/se3.hpp	/^  void normalize() {$/;"	f	class:Sophus::SE3GroupBase
num_parameters	thirdparty/Sophus/sophus/se3.hpp	/^  static const int num_parameters = 7;$/;"	m	class:Sophus::SE3GroupBase
num_parameters	thirdparty/Sophus/sophus/se3.hpp	/^  static const int num_parameters = Base::num_parameters;$/;"	m	class:Eigen::Map
num_parameters	thirdparty/Sophus/sophus/se3.hpp	/^  static const int num_parameters = Base::num_parameters;$/;"	m	class:Sophus::SE3Group
operator *	thirdparty/Sophus/sophus/se3.hpp	/^  const Point operator*(const Point & p) const {$/;"	f	class:Sophus::SE3GroupBase
operator *	thirdparty/Sophus/sophus/se3.hpp	/^  const SE3Group<Scalar> operator*(const SE3Group<Scalar>& other) const {$/;"	f	class:Sophus::SE3GroupBase
operator *=	thirdparty/Sophus/sophus/se3.hpp	/^  void operator*=(const SE3Group<Scalar>& other) {$/;"	f	class:Sophus::SE3GroupBase
operator =	thirdparty/Sophus/sophus/se3.hpp	/^  SE3GroupBase<Derived>& operator= (const SE3GroupBase<OtherDerived> & other) {$/;"	f	class:Sophus::SE3GroupBase
rotationMatrix	thirdparty/Sophus/sophus/se3.hpp	/^  const Matrix<Scalar,3,3> rotationMatrix() const {$/;"	f	class:Sophus::SE3GroupBase
rotation_matrix	thirdparty/Sophus/sophus/se3.hpp	/^  EIGEN_DEPRECATED const M3_marcos_dont_like_commas rotation_matrix() const {$/;"	f	class:Sophus::SE3GroupBase
setQuaternion	thirdparty/Sophus/sophus/se3.hpp	/^  void setQuaternion(const Quaternion<Scalar> & quat) {$/;"	f	class:Sophus::SE3GroupBase
setRotationMatrix	thirdparty/Sophus/sophus/se3.hpp	/^  void setRotationMatrix$/;"	f	class:Sophus::SE3GroupBase
so3	thirdparty/Sophus/sophus/se3.hpp	/^  ConstSO3Reference so3() const {$/;"	f	class:Eigen::Map
so3	thirdparty/Sophus/sophus/se3.hpp	/^  ConstSO3Reference so3() const {$/;"	f	class:Sophus::SE3Group
so3	thirdparty/Sophus/sophus/se3.hpp	/^  ConstSO3Reference so3() const {$/;"	f	class:Sophus::SE3GroupBase
so3	thirdparty/Sophus/sophus/se3.hpp	/^  SO3Reference so3() {$/;"	f	class:Eigen::Map
so3	thirdparty/Sophus/sophus/se3.hpp	/^  SO3Reference so3() {$/;"	f	class:Sophus::SE3Group
so3	thirdparty/Sophus/sophus/se3.hpp	/^  SO3Reference so3() {$/;"	f	class:Sophus::SE3GroupBase
so3_	thirdparty/Sophus/sophus/se3.hpp	/^  Map<Sophus::SO3Group<Scalar>,_Options> so3_;$/;"	m	class:Eigen::Map
so3_	thirdparty/Sophus/sophus/se3.hpp	/^  Sophus::SO3Group<Scalar> so3_;$/;"	m	class:Sophus::SE3Group
so3_	thirdparty/Sophus/sophus/se3.hpp	/^  const Map<const Sophus::SO3Group<Scalar>,_Options> so3_;$/;"	m	class:Eigen::Map
traits	thirdparty/Sophus/sophus/se3.hpp	/^struct traits<Map<Sophus::SE3Group<_Scalar>, _Options> >$/;"	s	namespace:Eigen::internal
traits	thirdparty/Sophus/sophus/se3.hpp	/^struct traits<Map<const Sophus::SE3Group<_Scalar>, _Options> >$/;"	s	namespace:Eigen::internal
traits	thirdparty/Sophus/sophus/se3.hpp	/^struct traits<Sophus::SE3Group<_Scalar,_Options> > {$/;"	s	namespace:Eigen::internal
translation	thirdparty/Sophus/sophus/se3.hpp	/^  ConstTranslationReference translation() const {$/;"	f	class:Eigen::Map
translation	thirdparty/Sophus/sophus/se3.hpp	/^  ConstTranslationReference translation() const {$/;"	f	class:Sophus::SE3Group
translation	thirdparty/Sophus/sophus/se3.hpp	/^  ConstTranslationReference translation() const {$/;"	f	class:Sophus::SE3GroupBase
translation	thirdparty/Sophus/sophus/se3.hpp	/^  TranslationReference translation() {$/;"	f	class:Eigen::Map
translation	thirdparty/Sophus/sophus/se3.hpp	/^  TranslationReference translation() {$/;"	f	class:Sophus::SE3Group
translation	thirdparty/Sophus/sophus/se3.hpp	/^  TranslationReference translation() {$/;"	f	class:Sophus::SE3GroupBase
translation_	thirdparty/Sophus/sophus/se3.hpp	/^  Map<Matrix<Scalar,3,1>,_Options> translation_;$/;"	m	class:Eigen::Map
translation_	thirdparty/Sophus/sophus/se3.hpp	/^  Matrix<Scalar,3,1> translation_;$/;"	m	class:Sophus::SE3Group
translation_	thirdparty/Sophus/sophus/se3.hpp	/^  const Map<const Matrix<Scalar,3,1>,_Options> translation_;$/;"	m	class:Eigen::Map
unit_quaternion	thirdparty/Sophus/sophus/se3.hpp	/^  unit_quaternion() const {$/;"	f	class:Sophus::SE3GroupBase
vee	thirdparty/Sophus/sophus/se3.hpp	/^  const Tangent vee(const Transformation & Omega) {$/;"	f	class:Sophus::SE3GroupBase
Adj	thirdparty/Sophus/sophus/sim3.hpp	/^  const Adjoint Adj() const {$/;"	f	class:Sophus::Sim3GroupBase
Adjoint	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef Matrix<Scalar,DoF,DoF> Adjoint;$/;"	t	class:Sophus::Sim3GroupBase
Adjoint	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef typename Base::Adjoint Adjoint;$/;"	t	class:Eigen::Map
Adjoint	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef typename Base::Adjoint Adjoint;$/;"	t	class:Sophus::Sim3Group
Base	thirdparty/Sophus/sophus/sim3.hpp	/^  Base;$/;"	t	class:Eigen::Map
Base	thirdparty/Sophus/sophus/sim3.hpp	/^  Map<const Sophus::Sim3Group<_Scalar>, _Options> > Base;$/;"	t	class:Eigen::Map
Base	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef Sim3GroupBase<Sim3Group<_Scalar,_Options> > Base;$/;"	t	class:Sophus::Sim3Group
ConstRxSO3Reference	thirdparty/Sophus/sophus/sim3.hpp	/^  ::RxSO3Type & ConstRxSO3Reference;$/;"	t	class:Sophus::Sim3Group
ConstRxSO3Reference	thirdparty/Sophus/sophus/sim3.hpp	/^  ConstRxSO3Reference;$/;"	t	class:Eigen::Map
ConstRxSO3Reference	thirdparty/Sophus/sophus/sim3.hpp	/^  ConstRxSO3Reference;$/;"	t	class:Sophus::Sim3GroupBase
ConstTranslationReference	thirdparty/Sophus/sophus/sim3.hpp	/^  ::TranslationType & ConstTranslationReference;$/;"	t	class:Sophus::Sim3Group
ConstTranslationReference	thirdparty/Sophus/sophus/sim3.hpp	/^  ConstTranslationReference;$/;"	t	class:Eigen::Map
ConstTranslationReference	thirdparty/Sophus/sophus/sim3.hpp	/^  ConstTranslationReference;$/;"	t	class:Sophus::Sim3GroupBase
DoF	thirdparty/Sophus/sophus/sim3.hpp	/^  static const int DoF = 7;$/;"	m	class:Sophus::Sim3GroupBase
DoF	thirdparty/Sophus/sophus/sim3.hpp	/^  static const int DoF = Base::DoF;$/;"	m	class:Eigen::Map
DoF	thirdparty/Sophus/sophus/sim3.hpp	/^  static const int DoF = Base::DoF;$/;"	m	class:Sophus::Sim3Group
EIGEN_DEPRECATED	thirdparty/Sophus/sophus/sim3.hpp	/^typedef Sim3Group<double> Sim3 EIGEN_DEPRECATED;$/;"	t	namespace:Sophus
Eigen	thirdparty/Sophus/sophus/sim3.hpp	/^namespace Eigen {$/;"	n
Map	thirdparty/Sophus/sophus/sim3.hpp	/^  Map(Scalar* coeffs)$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/sim3.hpp	/^  Map(const Scalar* coeffs)$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/sim3.hpp	/^  Map(const Scalar* trans_coeffs, const Scalar* rot_coeffs)$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/sim3.hpp	/^class Map<Sophus::Sim3Group<_Scalar>, _Options>$/;"	c	namespace:Eigen
Map	thirdparty/Sophus/sophus/sim3.hpp	/^class Map<const Sophus::Sim3Group<_Scalar>, _Options>$/;"	c	namespace:Eigen
Matrix7d	thirdparty/Sophus/sophus/sim3.hpp	/^typedef Matrix<double,7,7> Matrix7d;$/;"	t	namespace:Sophus
Matrix7f	thirdparty/Sophus/sophus/sim3.hpp	/^typedef Matrix<float,7,7> Matrix7f;$/;"	t	namespace:Sophus
N	thirdparty/Sophus/sophus/sim3.hpp	/^  static const int N = 4;$/;"	m	class:Sophus::Sim3GroupBase
N	thirdparty/Sophus/sophus/sim3.hpp	/^  static const int N = Base::N;$/;"	m	class:Eigen::Map
N	thirdparty/Sophus/sophus/sim3.hpp	/^  static const int N = Base::N;$/;"	m	class:Sophus::Sim3Group
Point	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef Matrix<Scalar,3,1> Point;$/;"	t	class:Sophus::Sim3GroupBase
Point	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef typename Base::Point Point;$/;"	t	class:Eigen::Map
Point	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef typename Base::Point Point;$/;"	t	class:Sophus::Sim3Group
RxSO3Reference	thirdparty/Sophus/sophus/sim3.hpp	/^  ::RxSO3Type & RxSO3Reference;$/;"	t	class:Sophus::Sim3Group
RxSO3Reference	thirdparty/Sophus/sophus/sim3.hpp	/^  RxSO3Reference;$/;"	t	class:Eigen::Map
RxSO3Reference	thirdparty/Sophus/sophus/sim3.hpp	/^  RxSO3Reference;$/;"	t	class:Sophus::Sim3GroupBase
RxSO3Type	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef Map<Sophus::RxSO3Group<Scalar>,_Options> RxSO3Type;$/;"	t	struct:Eigen::internal::traits
RxSO3Type	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef Map<const Sophus::RxSO3Group<Scalar>,_Options> RxSO3Type;$/;"	t	struct:Eigen::internal::traits
RxSO3Type	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef Sophus::RxSO3Group<Scalar> RxSO3Type;$/;"	t	struct:Eigen::internal::traits
SOPHUS_SIM3_HPP	thirdparty/Sophus/sophus/sim3.hpp	24;"	d
Scalar	thirdparty/Sophus/sophus/sim3.hpp	/^  ::Scalar Scalar;$/;"	t	class:Sophus::Sim3Group
Scalar	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Sophus::Sim3GroupBase
Scalar	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef typename internal::traits<Map>::Scalar Scalar;$/;"	t	class:Eigen::Map
Sim3Group	thirdparty/Sophus/sophus/sim3.hpp	/^  Sim3Group()$/;"	f	class:Sophus::Sim3Group
Sim3Group	thirdparty/Sophus/sophus/sim3.hpp	/^  Sim3Group(const Eigen::Matrix<Scalar,4,4>& T)$/;"	f	class:Sophus::Sim3Group
Sim3Group	thirdparty/Sophus/sophus/sim3.hpp	/^  Sim3Group(const Quaternion<Scalar> & quaternion,$/;"	f	class:Sophus::Sim3Group
Sim3Group	thirdparty/Sophus/sophus/sim3.hpp	/^  Sim3Group(const RxSO3GroupBase<OtherDerived> & rxso3,$/;"	f	class:Sophus::Sim3Group
Sim3Group	thirdparty/Sophus/sophus/sim3.hpp	/^  Sim3Group(const Sim3GroupBase<OtherDerived> & other)$/;"	f	class:Sophus::Sim3Group
Sim3Group	thirdparty/Sophus/sophus/sim3.hpp	/^class Sim3Group : public Sim3GroupBase<Sim3Group<_Scalar,_Options> > {$/;"	c	namespace:Sophus
Sim3GroupBase	thirdparty/Sophus/sophus/sim3.hpp	/^class Sim3GroupBase {$/;"	c	namespace:Sophus
Sim3d	thirdparty/Sophus/sophus/sim3.hpp	/^typedef Sim3Group<double> Sim3d; \/**< double precision Sim3 *\/$/;"	t	namespace:Sophus
Sim3f	thirdparty/Sophus/sophus/sim3.hpp	/^typedef Sim3Group<float> Sim3f;  \/**< single precision Sim3 *\/$/;"	t	namespace:Sophus
Sophus	thirdparty/Sophus/sophus/sim3.hpp	/^namespace Sophus {$/;"	n
Tangent	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef Matrix<Scalar,DoF,1> Tangent;$/;"	t	class:Sophus::Sim3GroupBase
Tangent	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef typename Base::Tangent Tangent;$/;"	t	class:Eigen::Map
Tangent	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef typename Base::Tangent Tangent;$/;"	t	class:Sophus::Sim3Group
Transformation	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef Matrix<Scalar,N,N> Transformation;$/;"	t	class:Sophus::Sim3GroupBase
Transformation	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef typename Base::Transformation Transformation;$/;"	t	class:Eigen::Map
Transformation	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef typename Base::Transformation Transformation;$/;"	t	class:Sophus::Sim3Group
TranslationReference	thirdparty/Sophus/sophus/sim3.hpp	/^  ::TranslationType & TranslationReference;$/;"	t	class:Sophus::Sim3Group
TranslationReference	thirdparty/Sophus/sophus/sim3.hpp	/^  TranslationReference;$/;"	t	class:Eigen::Map
TranslationReference	thirdparty/Sophus/sophus/sim3.hpp	/^  TranslationReference;$/;"	t	class:Sophus::Sim3GroupBase
TranslationType	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef Map<Matrix<Scalar,3,1>,_Options> TranslationType;$/;"	t	struct:Eigen::internal::traits
TranslationType	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef Map<const Matrix<Scalar,3,1>,_Options> TranslationType;$/;"	t	struct:Eigen::internal::traits
TranslationType	thirdparty/Sophus/sophus/sim3.hpp	/^  typedef Matrix<Scalar,3,1> TranslationType;$/;"	t	struct:Eigen::internal::traits
Vector7d	thirdparty/Sophus/sophus/sim3.hpp	/^typedef Matrix<double,7,1> Vector7d;$/;"	t	namespace:Sophus
Vector7f	thirdparty/Sophus/sophus/sim3.hpp	/^typedef Matrix<float,7,1> Vector7f;$/;"	t	namespace:Sophus
calcW	thirdparty/Sophus/sophus/sim3.hpp	/^  Matrix<Scalar,3,3> calcW(const Scalar & theta,$/;"	f	class:Sophus::Sim3GroupBase
cast	thirdparty/Sophus/sophus/sim3.hpp	/^  inline Sim3Group<NewScalarType> cast() const {$/;"	f	class:Sophus::Sim3GroupBase
d_lieBracketab_by_d_a	thirdparty/Sophus/sophus/sim3.hpp	/^  const Adjoint d_lieBracketab_by_d_a(const Tangent & b) {$/;"	f	class:Sophus::Sim3GroupBase
data	thirdparty/Sophus/sophus/sim3.hpp	/^  Scalar* data() {$/;"	f	class:Sophus::Sim3Group
data	thirdparty/Sophus/sophus/sim3.hpp	/^  const Scalar* data() const {$/;"	f	class:Sophus::Sim3Group
exp	thirdparty/Sophus/sophus/sim3.hpp	/^  const Sim3Group<Scalar> exp(const Tangent & a) {$/;"	f	class:Sophus::Sim3GroupBase
fastMultiply	thirdparty/Sophus/sophus/sim3.hpp	/^  void fastMultiply(const Sim3Group<Scalar>& other) {$/;"	f	class:Sophus::Sim3GroupBase
generator	thirdparty/Sophus/sophus/sim3.hpp	/^  const Transformation generator(int i) {$/;"	f	class:Sophus::Sim3GroupBase
hat	thirdparty/Sophus/sophus/sim3.hpp	/^  const Transformation hat(const Tangent & v) {$/;"	f	class:Sophus::Sim3GroupBase
internal	thirdparty/Sophus/sophus/sim3.hpp	/^namespace internal {$/;"	n	namespace:Eigen
inverse	thirdparty/Sophus/sophus/sim3.hpp	/^  const Sim3Group<Scalar> inverse() const {$/;"	f	class:Sophus::Sim3GroupBase
lieBracket	thirdparty/Sophus/sophus/sim3.hpp	/^  const Tangent lieBracket(const Tangent & a,$/;"	f	class:Sophus::Sim3GroupBase
log	thirdparty/Sophus/sophus/sim3.hpp	/^  const Tangent log() const {$/;"	f	class:Sophus::Sim3GroupBase
log	thirdparty/Sophus/sophus/sim3.hpp	/^  const Tangent log(const Sim3Group<Scalar> & other) {$/;"	f	class:Sophus::Sim3GroupBase
matrix	thirdparty/Sophus/sophus/sim3.hpp	/^  const Transformation matrix() const {$/;"	f	class:Sophus::Sim3GroupBase
matrix3x4	thirdparty/Sophus/sophus/sim3.hpp	/^  const Matrix<Scalar,3,4> matrix3x4() const {$/;"	f	class:Sophus::Sim3GroupBase
num_parameters	thirdparty/Sophus/sophus/sim3.hpp	/^  static const int num_parameters = 7;$/;"	m	class:Sophus::Sim3GroupBase
num_parameters	thirdparty/Sophus/sophus/sim3.hpp	/^  static const int num_parameters = Base::num_parameters;$/;"	m	class:Eigen::Map
num_parameters	thirdparty/Sophus/sophus/sim3.hpp	/^  static const int num_parameters = Base::num_parameters;$/;"	m	class:Sophus::Sim3Group
operator *	thirdparty/Sophus/sophus/sim3.hpp	/^  const Point operator*(const Point & p) const {$/;"	f	class:Sophus::Sim3GroupBase
operator *	thirdparty/Sophus/sophus/sim3.hpp	/^  const Sim3Group<Scalar> operator*(const Sim3Group<Scalar>& other) const {$/;"	f	class:Sophus::Sim3GroupBase
operator *=	thirdparty/Sophus/sophus/sim3.hpp	/^  void operator*=(const Sim3Group<Scalar>& other) {$/;"	f	class:Sophus::Sim3GroupBase
operator =	thirdparty/Sophus/sophus/sim3.hpp	/^  Sim3GroupBase<Derived>& operator=$/;"	f	class:Sophus::Sim3GroupBase
quaternion	thirdparty/Sophus/sophus/sim3.hpp	/^  quaternion() const {$/;"	f	class:Sophus::Sim3GroupBase
quaternion	thirdparty/Sophus/sophus/sim3.hpp	/^  quaternion() {$/;"	f	class:Sophus::Sim3GroupBase
rotationMatrix	thirdparty/Sophus/sophus/sim3.hpp	/^  const Matrix<Scalar,3,3> rotationMatrix() const {$/;"	f	class:Sophus::Sim3GroupBase
rotation_matrix	thirdparty/Sophus/sophus/sim3.hpp	/^  EIGEN_DEPRECATED const Transformation rotation_matrix() const {$/;"	f	class:Sophus::Sim3GroupBase
rxso3	thirdparty/Sophus/sophus/sim3.hpp	/^  ConstRxSO3Reference rxso3() const {$/;"	f	class:Eigen::Map
rxso3	thirdparty/Sophus/sophus/sim3.hpp	/^  ConstRxSO3Reference rxso3() const {$/;"	f	class:Sophus::Sim3Group
rxso3	thirdparty/Sophus/sophus/sim3.hpp	/^  ConstRxSO3Reference rxso3() const {$/;"	f	class:Sophus::Sim3GroupBase
rxso3	thirdparty/Sophus/sophus/sim3.hpp	/^  RxSO3Reference rxso3() {$/;"	f	class:Eigen::Map
rxso3	thirdparty/Sophus/sophus/sim3.hpp	/^  RxSO3Reference rxso3() {$/;"	f	class:Sophus::Sim3Group
rxso3	thirdparty/Sophus/sophus/sim3.hpp	/^  RxSO3Reference rxso3() {$/;"	f	class:Sophus::Sim3GroupBase
rxso3_	thirdparty/Sophus/sophus/sim3.hpp	/^  Map<Sophus::RxSO3Group<Scalar>,_Options> rxso3_;$/;"	m	class:Eigen::Map
rxso3_	thirdparty/Sophus/sophus/sim3.hpp	/^  Sophus::RxSO3Group<Scalar> rxso3_;$/;"	m	class:Sophus::Sim3Group
rxso3_	thirdparty/Sophus/sophus/sim3.hpp	/^  const Map<const Sophus::RxSO3Group<Scalar>,_Options> rxso3_;$/;"	m	class:Eigen::Map
scale	thirdparty/Sophus/sophus/sim3.hpp	/^  const Scalar scale() const {$/;"	f	class:Sophus::Sim3GroupBase
setRotationMatrix	thirdparty/Sophus/sophus/sim3.hpp	/^  void setRotationMatrix$/;"	f	class:Sophus::Sim3GroupBase
setScale	thirdparty/Sophus/sophus/sim3.hpp	/^  void setScale(const Scalar & scale) {$/;"	f	class:Sophus::Sim3GroupBase
setScaledRotationMatrix	thirdparty/Sophus/sophus/sim3.hpp	/^  void setScaledRotationMatrix$/;"	f	class:Sophus::Sim3GroupBase
traits	thirdparty/Sophus/sophus/sim3.hpp	/^struct traits<Map<Sophus::Sim3Group<_Scalar>, _Options> >$/;"	s	namespace:Eigen::internal
traits	thirdparty/Sophus/sophus/sim3.hpp	/^struct traits<Map<const Sophus::Sim3Group<_Scalar>, _Options> >$/;"	s	namespace:Eigen::internal
traits	thirdparty/Sophus/sophus/sim3.hpp	/^struct traits<Sophus::Sim3Group<_Scalar,_Options> > {$/;"	s	namespace:Eigen::internal
translation	thirdparty/Sophus/sophus/sim3.hpp	/^  ConstTranslationReference translation() const {$/;"	f	class:Eigen::Map
translation	thirdparty/Sophus/sophus/sim3.hpp	/^  ConstTranslationReference translation() const {$/;"	f	class:Sophus::Sim3Group
translation	thirdparty/Sophus/sophus/sim3.hpp	/^  ConstTranslationReference translation() const {$/;"	f	class:Sophus::Sim3GroupBase
translation	thirdparty/Sophus/sophus/sim3.hpp	/^  TranslationReference translation() {$/;"	f	class:Eigen::Map
translation	thirdparty/Sophus/sophus/sim3.hpp	/^  TranslationReference translation() {$/;"	f	class:Sophus::Sim3Group
translation	thirdparty/Sophus/sophus/sim3.hpp	/^  TranslationReference translation() {$/;"	f	class:Sophus::Sim3GroupBase
translation_	thirdparty/Sophus/sophus/sim3.hpp	/^  Map<Matrix<Scalar,3,1>,_Options> translation_;$/;"	m	class:Eigen::Map
translation_	thirdparty/Sophus/sophus/sim3.hpp	/^  Matrix<Scalar,3,1> translation_;$/;"	m	class:Sophus::Sim3Group
translation_	thirdparty/Sophus/sophus/sim3.hpp	/^  const Map<const Matrix<Scalar,3,1>,_Options> translation_;$/;"	m	class:Eigen::Map
vee	thirdparty/Sophus/sophus/sim3.hpp	/^  const Tangent vee(const Transformation & Omega) {$/;"	f	class:Sophus::Sim3GroupBase
Adj	thirdparty/Sophus/sophus/so2.hpp	/^  const Adjoint Adj() const {$/;"	f	class:Sophus::SO2GroupBase
Adjoint	thirdparty/Sophus/sophus/so2.hpp	/^  typedef Scalar Adjoint;$/;"	t	class:Sophus::SO2GroupBase
Adjoint	thirdparty/Sophus/sophus/so2.hpp	/^  typedef typename Base::Adjoint Adjoint;$/;"	t	class:Eigen::Map
Adjoint	thirdparty/Sophus/sophus/so2.hpp	/^  typedef typename Base::Adjoint Adjoint;$/;"	t	class:Sophus::SO2Group
Base	thirdparty/Sophus/sophus/so2.hpp	/^  Base;$/;"	t	class:Eigen::Map
Base	thirdparty/Sophus/sophus/so2.hpp	/^  typedef SO2GroupBase<SO2Group<_Scalar,_Options> > Base;$/;"	t	class:Sophus::SO2Group
Base	thirdparty/Sophus/sophus/so2.hpp	/^  typedef Sophus::SO2GroupBase<Map<Sophus::SO2Group<_Scalar>, _Options> > Base;$/;"	t	class:Eigen::Map
ComplexReference	thirdparty/Sophus/sophus/so2.hpp	/^  ::ComplexType & ComplexReference;$/;"	t	class:Sophus::SO2Group
ComplexReference	thirdparty/Sophus/sophus/so2.hpp	/^  ComplexReference;$/;"	t	class:Sophus::SO2GroupBase
ComplexReference	thirdparty/Sophus/sophus/so2.hpp	/^  typedef typename internal::traits<Map>::ComplexType & ComplexReference;$/;"	t	class:Eigen::Map
ComplexType	thirdparty/Sophus/sophus/so2.hpp	/^  typedef Map<Matrix<Scalar,2,1>,_Options> ComplexType;$/;"	t	struct:Eigen::internal::traits
ComplexType	thirdparty/Sophus/sophus/so2.hpp	/^  typedef Map<const Matrix<Scalar,2,1>,_Options> ComplexType;$/;"	t	struct:Eigen::internal::traits
ComplexType	thirdparty/Sophus/sophus/so2.hpp	/^  typedef Matrix<Scalar,2,1> ComplexType;$/;"	t	struct:Eigen::internal::traits
ConstComplexReference	thirdparty/Sophus/sophus/so2.hpp	/^  ::ComplexType & ConstComplexReference;$/;"	t	class:Sophus::SO2Group
ConstComplexReference	thirdparty/Sophus/sophus/so2.hpp	/^  ConstComplexReference;$/;"	t	class:Eigen::Map
ConstComplexReference	thirdparty/Sophus/sophus/so2.hpp	/^  ConstComplexReference;$/;"	t	class:Sophus::SO2GroupBase
DoF	thirdparty/Sophus/sophus/so2.hpp	/^  static const int DoF = 1;$/;"	m	class:Sophus::SO2GroupBase
DoF	thirdparty/Sophus/sophus/so2.hpp	/^  static const int DoF = Base::DoF;$/;"	m	class:Eigen::Map
DoF	thirdparty/Sophus/sophus/so2.hpp	/^  static const int DoF = Base::DoF;$/;"	m	class:Sophus::SO2Group
EIGEN_DEPRECATED	thirdparty/Sophus/sophus/so2.hpp	/^typedef SO2Group<double> SO2 EIGEN_DEPRECATED;$/;"	t	namespace:Sophus
Eigen	thirdparty/Sophus/sophus/so2.hpp	/^namespace Eigen {$/;"	n
Map	thirdparty/Sophus/sophus/so2.hpp	/^  Map(Scalar* coeffs) : unit_complex_(coeffs) {$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/so2.hpp	/^  Map(const Scalar* coeffs) : unit_complex_(coeffs) {$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/so2.hpp	/^class Map<Sophus::SO2Group<_Scalar>, _Options>$/;"	c	namespace:Eigen
Map	thirdparty/Sophus/sophus/so2.hpp	/^class Map<const Sophus::SO2Group<_Scalar>, _Options>$/;"	c	namespace:Eigen
N	thirdparty/Sophus/sophus/so2.hpp	/^  static const int N = 2;$/;"	m	class:Sophus::SO2GroupBase
N	thirdparty/Sophus/sophus/so2.hpp	/^  static const int N = Base::N;$/;"	m	class:Eigen::Map
N	thirdparty/Sophus/sophus/so2.hpp	/^  static const int N = Base::N;$/;"	m	class:Sophus::SO2Group
Point	thirdparty/Sophus/sophus/so2.hpp	/^  typedef Matrix<Scalar,2,1> Point;$/;"	t	class:Sophus::SO2GroupBase
Point	thirdparty/Sophus/sophus/so2.hpp	/^  typedef typename Base::Point Point;$/;"	t	class:Eigen::Map
Point	thirdparty/Sophus/sophus/so2.hpp	/^  typedef typename Base::Point Point;$/;"	t	class:Sophus::SO2Group
SO2Group	thirdparty/Sophus/sophus/so2.hpp	/^  SO2Group(Scalar theta) {$/;"	f	class:Sophus::SO2Group
SO2Group	thirdparty/Sophus/sophus/so2.hpp	/^  SO2Group(const Matrix<Scalar,2,1> & complex)$/;"	f	class:Sophus::SO2Group
SO2Group	thirdparty/Sophus/sophus/so2.hpp	/^  SO2Group(const SO2GroupBase<OtherDerived> & other)$/;"	f	class:Sophus::SO2Group
SO2Group	thirdparty/Sophus/sophus/so2.hpp	/^  SO2Group(const Transformation & R)$/;"	f	class:Sophus::SO2Group
SO2Group	thirdparty/Sophus/sophus/so2.hpp	/^  SO2Group(const std::complex<Scalar> & complex)$/;"	f	class:Sophus::SO2Group
SO2Group	thirdparty/Sophus/sophus/so2.hpp	/^  inline SO2Group()$/;"	f	class:Sophus::SO2Group
SO2Group	thirdparty/Sophus/sophus/so2.hpp	/^  inline SO2Group(const Scalar & real, const Scalar & imag)$/;"	f	class:Sophus::SO2Group
SO2Group	thirdparty/Sophus/sophus/so2.hpp	/^class SO2Group : public SO2GroupBase<SO2Group<_Scalar,_Options> > {$/;"	c	namespace:Sophus
SO2GroupBase	thirdparty/Sophus/sophus/so2.hpp	/^class SO2GroupBase {$/;"	c	namespace:Sophus
SO2d	thirdparty/Sophus/sophus/so2.hpp	/^typedef SO2Group<double> SO2d; \/**< double precision SO2 *\/$/;"	t	namespace:Sophus
SO2f	thirdparty/Sophus/sophus/so2.hpp	/^typedef SO2Group<float> SO2f;  \/**< single precision SO2 *\/$/;"	t	namespace:Sophus
SOPHUS_SO2_HPP	thirdparty/Sophus/sophus/so2.hpp	24;"	d
Scalar	thirdparty/Sophus/sophus/so2.hpp	/^  ::Scalar Scalar;$/;"	t	class:Sophus::SO2Group
Scalar	thirdparty/Sophus/sophus/so2.hpp	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	thirdparty/Sophus/sophus/so2.hpp	/^  typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Sophus::SO2GroupBase
Scalar	thirdparty/Sophus/sophus/so2.hpp	/^  typedef typename internal::traits<Map>::Scalar Scalar;$/;"	t	class:Eigen::Map
Sophus	thirdparty/Sophus/sophus/so2.hpp	/^namespace Sophus {$/;"	n
Tangent	thirdparty/Sophus/sophus/so2.hpp	/^  typedef Scalar Tangent;$/;"	t	class:Sophus::SO2GroupBase
Tangent	thirdparty/Sophus/sophus/so2.hpp	/^  typedef typename Base::Tangent Tangent;$/;"	t	class:Eigen::Map
Tangent	thirdparty/Sophus/sophus/so2.hpp	/^  typedef typename Base::Tangent Tangent;$/;"	t	class:Sophus::SO2Group
Transformation	thirdparty/Sophus/sophus/so2.hpp	/^  typedef Matrix<Scalar,N,N> Transformation;$/;"	t	class:Sophus::SO2GroupBase
Transformation	thirdparty/Sophus/sophus/so2.hpp	/^  typedef typename Base::Transformation Transformation;$/;"	t	class:Eigen::Map
Transformation	thirdparty/Sophus/sophus/so2.hpp	/^  typedef typename Base::Transformation Transformation;$/;"	t	class:Sophus::SO2Group
cast	thirdparty/Sophus/sophus/so2.hpp	/^  inline SO2Group<NewScalarType> cast() const {$/;"	f	class:Sophus::SO2GroupBase
data	thirdparty/Sophus/sophus/so2.hpp	/^  inline Scalar* data() {$/;"	f	class:Sophus::SO2GroupBase
data	thirdparty/Sophus/sophus/so2.hpp	/^  inline const Scalar* data() const {$/;"	f	class:Sophus::SO2GroupBase
exp	thirdparty/Sophus/sophus/so2.hpp	/^  const SO2Group<Scalar> exp(const Tangent & theta) {$/;"	f	class:Sophus::SO2GroupBase
fastMultiply	thirdparty/Sophus/sophus/so2.hpp	/^  void fastMultiply(const SO2Group<Scalar>& other) {$/;"	f	class:Sophus::SO2GroupBase
generator	thirdparty/Sophus/sophus/so2.hpp	/^  const Transformation generator() {$/;"	f	class:Sophus::SO2GroupBase
hat	thirdparty/Sophus/sophus/so2.hpp	/^  const Transformation hat(const Tangent & theta) {$/;"	f	class:Sophus::SO2GroupBase
internal	thirdparty/Sophus/sophus/so2.hpp	/^namespace internal {$/;"	n	namespace:Eigen
inverse	thirdparty/Sophus/sophus/so2.hpp	/^  const SO2Group<Scalar> inverse() const {$/;"	f	class:Sophus::SO2GroupBase
isNearZero	thirdparty/Sophus/sophus/so2.hpp	/^  static bool isNearZero(const Scalar & real, const Scalar & imag) {$/;"	f	class:Sophus::SO2Group
lieBracket	thirdparty/Sophus/sophus/so2.hpp	/^  const Tangent lieBracket(const Tangent & theta1,$/;"	f	class:Sophus::SO2GroupBase
log	thirdparty/Sophus/sophus/so2.hpp	/^  const Scalar log() const {$/;"	f	class:Sophus::SO2GroupBase
log	thirdparty/Sophus/sophus/so2.hpp	/^  const Tangent log(const SO2Group<Scalar> & other) {$/;"	f	class:Sophus::SO2GroupBase
matrix	thirdparty/Sophus/sophus/so2.hpp	/^  const Transformation matrix() const {$/;"	f	class:Sophus::SO2GroupBase
normalize	thirdparty/Sophus/sophus/so2.hpp	/^  void normalize() {$/;"	f	class:Sophus::SO2GroupBase
num_parameters	thirdparty/Sophus/sophus/so2.hpp	/^  static const int num_parameters = 2;$/;"	m	class:Sophus::SO2GroupBase
num_parameters	thirdparty/Sophus/sophus/so2.hpp	/^  static const int num_parameters = Base::num_parameters;$/;"	m	class:Eigen::Map
num_parameters	thirdparty/Sophus/sophus/so2.hpp	/^  static const int num_parameters = Base::num_parameters;$/;"	m	class:Sophus::SO2Group
operator *	thirdparty/Sophus/sophus/so2.hpp	/^  const Point operator*(const Point & p) const {$/;"	f	class:Sophus::SO2GroupBase
operator *	thirdparty/Sophus/sophus/so2.hpp	/^  const SO2Group<Scalar> operator*(const SO2Group<Scalar>& other) const {$/;"	f	class:Sophus::SO2GroupBase
operator *=	thirdparty/Sophus/sophus/so2.hpp	/^  void operator*=(const SO2Group<Scalar>& other) {$/;"	f	class:Sophus::SO2GroupBase
operator =	thirdparty/Sophus/sophus/so2.hpp	/^  SO2GroupBase<Derived>& operator=(const SO2GroupBase<OtherDerived> & other) {$/;"	f	class:Sophus::SO2GroupBase
setComplex	thirdparty/Sophus/sophus/so2.hpp	/^  void setComplex(const Point & complex) {$/;"	f	class:Sophus::SO2GroupBase
traits	thirdparty/Sophus/sophus/so2.hpp	/^struct traits<Map<Sophus::SO2Group<_Scalar>, _Options> >$/;"	s	namespace:Eigen::internal
traits	thirdparty/Sophus/sophus/so2.hpp	/^struct traits<Map<const Sophus::SO2Group<_Scalar>, _Options> >$/;"	s	namespace:Eigen::internal
traits	thirdparty/Sophus/sophus/so2.hpp	/^struct traits<Sophus::SO2Group<_Scalar,_Options> > {$/;"	s	namespace:Eigen::internal
unit_complex	thirdparty/Sophus/sophus/so2.hpp	/^  ConstComplexReference unit_complex() const {$/;"	f	class:Eigen::Map
unit_complex	thirdparty/Sophus/sophus/so2.hpp	/^  ConstComplexReference unit_complex() const {$/;"	f	class:Sophus::SO2Group
unit_complex	thirdparty/Sophus/sophus/so2.hpp	/^  ConstComplexReference unit_complex() const {$/;"	f	class:Sophus::SO2GroupBase
unit_complex_	thirdparty/Sophus/sophus/so2.hpp	/^  Map<Matrix<Scalar,2,1>,_Options> unit_complex_;$/;"	m	class:Eigen::Map
unit_complex_	thirdparty/Sophus/sophus/so2.hpp	/^  Matrix<Scalar,2,1> unit_complex_;$/;"	m	class:Sophus::SO2Group
unit_complex_	thirdparty/Sophus/sophus/so2.hpp	/^  const Map<const Matrix<Scalar,2,1>,_Options> unit_complex_;$/;"	m	class:Eigen::Map
unit_complex_nonconst	thirdparty/Sophus/sophus/so2.hpp	/^  ComplexReference unit_complex_nonconst() {$/;"	f	class:Eigen::Map
unit_complex_nonconst	thirdparty/Sophus/sophus/so2.hpp	/^  ComplexReference unit_complex_nonconst() {$/;"	f	class:Sophus::SO2Group
unit_complex_nonconst	thirdparty/Sophus/sophus/so2.hpp	/^  ComplexReference unit_complex_nonconst() {$/;"	f	class:Sophus::SO2GroupBase
vee	thirdparty/Sophus/sophus/so2.hpp	/^  const Tangent vee(const Transformation & Omega) {$/;"	f	class:Sophus::SO2GroupBase
Adj	thirdparty/Sophus/sophus/so3.hpp	/^  const Adjoint Adj() const {$/;"	f	class:Sophus::SO3GroupBase
Adjoint	thirdparty/Sophus/sophus/so3.hpp	/^  typedef Matrix<Scalar,DoF,DoF> Adjoint;$/;"	t	class:Sophus::SO3GroupBase
Adjoint	thirdparty/Sophus/sophus/so3.hpp	/^  typedef typename Base::Adjoint Adjoint;$/;"	t	class:Eigen::Map
Adjoint	thirdparty/Sophus/sophus/so3.hpp	/^  typedef typename Base::Adjoint Adjoint;$/;"	t	class:Sophus::SO3Group
Base	thirdparty/Sophus/sophus/so3.hpp	/^  Base;$/;"	t	class:Eigen::Map
Base	thirdparty/Sophus/sophus/so3.hpp	/^  typedef SO3GroupBase<SO3Group<_Scalar,_Options> > Base;$/;"	t	class:Sophus::SO3Group
Base	thirdparty/Sophus/sophus/so3.hpp	/^  typedef Sophus::SO3GroupBase<Map<Sophus::SO3Group<_Scalar>, _Options> > Base;$/;"	t	class:Eigen::Map
ConstQuaternionReference	thirdparty/Sophus/sophus/so3.hpp	/^  ::QuaternionType & ConstQuaternionReference;$/;"	t	class:Sophus::SO3Group
ConstQuaternionReference	thirdparty/Sophus/sophus/so3.hpp	/^  ConstQuaternionReference;$/;"	t	class:Eigen::Map
ConstQuaternionReference	thirdparty/Sophus/sophus/so3.hpp	/^  ConstQuaternionReference;$/;"	t	class:Sophus::SO3GroupBase
DoF	thirdparty/Sophus/sophus/so3.hpp	/^  static const int DoF = 3;$/;"	m	class:Sophus::SO3GroupBase
DoF	thirdparty/Sophus/sophus/so3.hpp	/^  static const int DoF = Base::DoF;$/;"	m	class:Eigen::Map
DoF	thirdparty/Sophus/sophus/so3.hpp	/^  static const int DoF = Base::DoF;$/;"	m	class:Sophus::SO3Group
Eigen	thirdparty/Sophus/sophus/so3.hpp	/^namespace Eigen {$/;"	n
Map	thirdparty/Sophus/sophus/so3.hpp	/^  Map(Scalar* coeffs) : unit_quaternion_(coeffs) {$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/so3.hpp	/^  Map(const Scalar* coeffs) : unit_quaternion_(coeffs) {$/;"	f	class:Eigen::Map
Map	thirdparty/Sophus/sophus/so3.hpp	/^class Map<Sophus::SO3Group<_Scalar>, _Options>$/;"	c	namespace:Eigen
Map	thirdparty/Sophus/sophus/so3.hpp	/^class Map<const Sophus::SO3Group<_Scalar>, _Options>$/;"	c	namespace:Eigen
N	thirdparty/Sophus/sophus/so3.hpp	/^  static const int N = 3;$/;"	m	class:Sophus::SO3GroupBase
N	thirdparty/Sophus/sophus/so3.hpp	/^  static const int N = Base::N;$/;"	m	class:Eigen::Map
N	thirdparty/Sophus/sophus/so3.hpp	/^  static const int N = Base::N;$/;"	m	class:Sophus::SO3Group
Point	thirdparty/Sophus/sophus/so3.hpp	/^  typedef Matrix<Scalar,3,1> Point;$/;"	t	class:Sophus::SO3GroupBase
Point	thirdparty/Sophus/sophus/so3.hpp	/^  typedef typename Base::Point Point;$/;"	t	class:Eigen::Map
Point	thirdparty/Sophus/sophus/so3.hpp	/^  typedef typename Base::Point Point;$/;"	t	class:Sophus::SO3Group
QuaternionReference	thirdparty/Sophus/sophus/so3.hpp	/^  ::QuaternionType & QuaternionReference;$/;"	t	class:Sophus::SO3Group
QuaternionReference	thirdparty/Sophus/sophus/so3.hpp	/^  QuaternionReference;$/;"	t	class:Eigen::Map
QuaternionReference	thirdparty/Sophus/sophus/so3.hpp	/^  QuaternionReference;$/;"	t	class:Sophus::SO3GroupBase
QuaternionType	thirdparty/Sophus/sophus/so3.hpp	/^  typedef Map<Quaternion<Scalar>,_Options> QuaternionType;$/;"	t	struct:Eigen::internal::traits
QuaternionType	thirdparty/Sophus/sophus/so3.hpp	/^  typedef Map<const Quaternion<Scalar>,_Options> QuaternionType;$/;"	t	struct:Eigen::internal::traits
QuaternionType	thirdparty/Sophus/sophus/so3.hpp	/^  typedef Quaternion<Scalar> QuaternionType;$/;"	t	struct:Eigen::internal::traits
SO3	thirdparty/Sophus/sophus/so3.hpp	/^typedef EIGEN_DEPRECATED SO3Group<double> SO3;$/;"	t	namespace:Sophus
SO3Group	thirdparty/Sophus/sophus/so3.hpp	/^  SO3Group()$/;"	f	class:Sophus::SO3Group
SO3Group	thirdparty/Sophus/sophus/so3.hpp	/^  SO3Group(Scalar alpha1, Scalar alpha2, Scalar alpha3) {$/;"	f	class:Sophus::SO3Group
SO3Group	thirdparty/Sophus/sophus/so3.hpp	/^  SO3Group(const Quaternion<Scalar> & quat) : unit_quaternion_(quat) {$/;"	f	class:Sophus::SO3Group
SO3Group	thirdparty/Sophus/sophus/so3.hpp	/^  SO3Group(const SO3GroupBase<OtherDerived> & other)$/;"	f	class:Sophus::SO3Group
SO3Group	thirdparty/Sophus/sophus/so3.hpp	/^  inline SO3Group(const Transformation & R)$/;"	f	class:Sophus::SO3Group
SO3Group	thirdparty/Sophus/sophus/so3.hpp	/^class SO3Group : public SO3GroupBase<SO3Group<_Scalar,_Options> > {$/;"	c	namespace:Sophus
SO3GroupBase	thirdparty/Sophus/sophus/so3.hpp	/^class SO3GroupBase {$/;"	c	namespace:Sophus
SO3d	thirdparty/Sophus/sophus/so3.hpp	/^typedef SO3Group<double> SO3d; \/**< double precision SO3 *\/$/;"	t	namespace:Sophus
SO3f	thirdparty/Sophus/sophus/so3.hpp	/^typedef SO3Group<float> SO3f;  \/**< single precision SO3 *\/$/;"	t	namespace:Sophus
SOPHUS_SO3_HPP	thirdparty/Sophus/sophus/so3.hpp	25;"	d
Scalar	thirdparty/Sophus/sophus/so3.hpp	/^  ::Scalar Scalar;$/;"	t	class:Sophus::SO3Group
Scalar	thirdparty/Sophus/sophus/so3.hpp	/^  typedef _Scalar Scalar;$/;"	t	struct:Eigen::internal::traits
Scalar	thirdparty/Sophus/sophus/so3.hpp	/^  typedef typename internal::traits<Derived>::Scalar Scalar;$/;"	t	class:Sophus::SO3GroupBase
Scalar	thirdparty/Sophus/sophus/so3.hpp	/^  typedef typename internal::traits<Map>::Scalar Scalar;$/;"	t	class:Eigen::Map
Sophus	thirdparty/Sophus/sophus/so3.hpp	/^namespace Sophus {$/;"	n
Tangent	thirdparty/Sophus/sophus/so3.hpp	/^  typedef Matrix<Scalar,DoF,1> Tangent;$/;"	t	class:Sophus::SO3GroupBase
Tangent	thirdparty/Sophus/sophus/so3.hpp	/^  typedef typename Base::Tangent Tangent;$/;"	t	class:Eigen::Map
Tangent	thirdparty/Sophus/sophus/so3.hpp	/^  typedef typename Base::Tangent Tangent;$/;"	t	class:Sophus::SO3Group
Transformation	thirdparty/Sophus/sophus/so3.hpp	/^  typedef Matrix<Scalar,N,N> Transformation;$/;"	t	class:Sophus::SO3GroupBase
Transformation	thirdparty/Sophus/sophus/so3.hpp	/^  typedef typename Base::Transformation Transformation;$/;"	t	class:Eigen::Map
Transformation	thirdparty/Sophus/sophus/so3.hpp	/^  typedef typename Base::Transformation Transformation;$/;"	t	class:Sophus::SO3Group
cast	thirdparty/Sophus/sophus/so3.hpp	/^  inline SO3Group<NewScalarType> cast() const {$/;"	f	class:Sophus::SO3GroupBase
d_lieBracketab_by_d_a	thirdparty/Sophus/sophus/so3.hpp	/^  const Adjoint d_lieBracketab_by_d_a(const Tangent & b) {$/;"	f	class:Sophus::SO3GroupBase
data	thirdparty/Sophus/sophus/so3.hpp	/^  inline Scalar* data() {$/;"	f	class:Sophus::SO3GroupBase
data	thirdparty/Sophus/sophus/so3.hpp	/^  inline const Scalar* data() const {$/;"	f	class:Sophus::SO3GroupBase
exp	thirdparty/Sophus/sophus/so3.hpp	/^  const SO3Group<Scalar> exp(const Tangent & omega) {$/;"	f	class:Sophus::SO3GroupBase
expAndTheta	thirdparty/Sophus/sophus/so3.hpp	/^  const SO3Group<Scalar> expAndTheta(const Tangent & omega,$/;"	f	class:Sophus::SO3GroupBase
fastMultiply	thirdparty/Sophus/sophus/so3.hpp	/^  void fastMultiply(const SO3Group<Scalar>& other) {$/;"	f	class:Sophus::SO3GroupBase
generator	thirdparty/Sophus/sophus/so3.hpp	/^  const Transformation generator(int i) {$/;"	f	class:Sophus::SO3GroupBase
hat	thirdparty/Sophus/sophus/so3.hpp	/^  const Transformation hat(const Tangent & omega) {$/;"	f	class:Sophus::SO3GroupBase
internal	thirdparty/Sophus/sophus/so3.hpp	/^namespace internal {$/;"	n	namespace:Eigen
inverse	thirdparty/Sophus/sophus/so3.hpp	/^  const SO3Group<Scalar> inverse() const {$/;"	f	class:Sophus::SO3GroupBase
lieBracket	thirdparty/Sophus/sophus/so3.hpp	/^  const Tangent lieBracket(const Tangent & omega1,$/;"	f	class:Sophus::SO3GroupBase
log	thirdparty/Sophus/sophus/so3.hpp	/^  const Tangent log() const {$/;"	f	class:Sophus::SO3GroupBase
log	thirdparty/Sophus/sophus/so3.hpp	/^  const Tangent log(const SO3Group<Scalar> & other) {$/;"	f	class:Sophus::SO3GroupBase
logAndTheta	thirdparty/Sophus/sophus/so3.hpp	/^  const Tangent logAndTheta(const SO3Group<Scalar> & other,$/;"	f	class:Sophus::SO3GroupBase
matrix	thirdparty/Sophus/sophus/so3.hpp	/^  const Transformation matrix() const {$/;"	f	class:Sophus::SO3GroupBase
normalize	thirdparty/Sophus/sophus/so3.hpp	/^  void normalize() {$/;"	f	class:Sophus::SO3GroupBase
num_parameters	thirdparty/Sophus/sophus/so3.hpp	/^  static const int num_parameters = 4;$/;"	m	class:Sophus::SO3GroupBase
num_parameters	thirdparty/Sophus/sophus/so3.hpp	/^  static const int num_parameters = Base::num_parameters;$/;"	m	class:Eigen::Map
num_parameters	thirdparty/Sophus/sophus/so3.hpp	/^  static const int num_parameters = Base::num_parameters;$/;"	m	class:Sophus::SO3Group
operator *	thirdparty/Sophus/sophus/so3.hpp	/^  const Point operator*(const Point & p) const {$/;"	f	class:Sophus::SO3GroupBase
operator *	thirdparty/Sophus/sophus/so3.hpp	/^  const SO3Group<Scalar> operator*(const SO3Group<Scalar>& other) const {$/;"	f	class:Sophus::SO3GroupBase
operator *=	thirdparty/Sophus/sophus/so3.hpp	/^  void operator*=(const SO3Group<Scalar>& other) {$/;"	f	class:Sophus::SO3GroupBase
operator =	thirdparty/Sophus/sophus/so3.hpp	/^  SO3GroupBase<Derived>& operator=(const SO3GroupBase<OtherDerived> & other) {$/;"	f	class:Sophus::SO3GroupBase
setQuaternion	thirdparty/Sophus/sophus/so3.hpp	/^  void setQuaternion(const Quaternion<Scalar>& quaternion) {$/;"	f	class:Sophus::SO3GroupBase
traits	thirdparty/Sophus/sophus/so3.hpp	/^struct traits<Map<Sophus::SO3Group<_Scalar>, _Options> >$/;"	s	namespace:Eigen::internal
traits	thirdparty/Sophus/sophus/so3.hpp	/^struct traits<Map<const Sophus::SO3Group<_Scalar>, _Options> >$/;"	s	namespace:Eigen::internal
traits	thirdparty/Sophus/sophus/so3.hpp	/^struct traits<Sophus::SO3Group<_Scalar,_Options> > {$/;"	s	namespace:Eigen::internal
unit_quaternion	thirdparty/Sophus/sophus/so3.hpp	/^  ConstQuaternionReference unit_quaternion() const {$/;"	f	class:Eigen::Map
unit_quaternion	thirdparty/Sophus/sophus/so3.hpp	/^  ConstQuaternionReference unit_quaternion() const {$/;"	f	class:Sophus::SO3Group
unit_quaternion	thirdparty/Sophus/sophus/so3.hpp	/^  ConstQuaternionReference unit_quaternion() const {$/;"	f	class:Sophus::SO3GroupBase
unit_quaternion	thirdparty/Sophus/sophus/so3.hpp	/^  const ConstQuaternionReference unit_quaternion() const {$/;"	f	class:Eigen::Map
unit_quaternion_	thirdparty/Sophus/sophus/so3.hpp	/^  Map<Quaternion<Scalar>,_Options> unit_quaternion_;$/;"	m	class:Eigen::Map
unit_quaternion_	thirdparty/Sophus/sophus/so3.hpp	/^  Quaternion<Scalar> unit_quaternion_;$/;"	m	class:Sophus::SO3Group
unit_quaternion_	thirdparty/Sophus/sophus/so3.hpp	/^  const Map<const Quaternion<Scalar>,_Options> unit_quaternion_;$/;"	m	class:Eigen::Map
unit_quaternion_nonconst	thirdparty/Sophus/sophus/so3.hpp	/^  QuaternionReference unit_quaternion_nonconst() {$/;"	f	class:Eigen::Map
unit_quaternion_nonconst	thirdparty/Sophus/sophus/so3.hpp	/^  QuaternionReference unit_quaternion_nonconst() {$/;"	f	class:Sophus::SO3Group
unit_quaternion_nonconst	thirdparty/Sophus/sophus/so3.hpp	/^  QuaternionReference unit_quaternion_nonconst() {$/;"	f	class:Sophus::SO3GroupBase
vee	thirdparty/Sophus/sophus/so3.hpp	/^  const Tangent vee(const Transformation & Omega) {$/;"	f	class:Sophus::SO3GroupBase
SOPHUS_HPP	thirdparty/Sophus/sophus/sophus.hpp	24;"	d
Sophus	thirdparty/Sophus/sophus/sophus.hpp	/^namespace Sophus {$/;"	n
SophusConstants	thirdparty/Sophus/sophus/sophus.hpp	/^struct SophusConstants {$/;"	s	namespace:Sophus
SophusConstants	thirdparty/Sophus/sophus/sophus.hpp	/^struct SophusConstants<float> {$/;"	s	namespace:Sophus
SophusException	thirdparty/Sophus/sophus/sophus.hpp	/^  SophusException (const std::string& str)$/;"	f	class:Sophus::SophusException
SophusException	thirdparty/Sophus/sophus/sophus.hpp	/^class SophusException : public std::runtime_error {$/;"	c	namespace:Sophus
epsilon	thirdparty/Sophus/sophus/sophus.hpp	/^  const Scalar epsilon() {$/;"	f	struct:Sophus::SophusConstants
epsilon	thirdparty/Sophus/sophus/sophus.hpp	/^  float epsilon() {$/;"	f	struct:Sophus::SophusConstants
pi	thirdparty/Sophus/sophus/sophus.hpp	/^  const Scalar pi() {$/;"	f	struct:Sophus::SophusConstants
pi	thirdparty/Sophus/sophus/sophus.hpp	/^  float pi() {$/;"	f	struct:Sophus::SophusConstants
std	thirdparty/Sophus/sophus/sophus.hpp	/^namespace std {$/;"	n
main	thirdparty/Sophus/sophus/test_rxso3.cpp	/^int main() {$/;"	f
tests	thirdparty/Sophus/sophus/test_rxso3.cpp	/^void tests() {$/;"	f
main	thirdparty/Sophus/sophus/test_se2.cpp	/^int main() {$/;"	f
tests	thirdparty/Sophus/sophus/test_se2.cpp	/^void tests() {$/;"	f
main	thirdparty/Sophus/sophus/test_se3.cpp	/^int main() {$/;"	f
tests	thirdparty/Sophus/sophus/test_se3.cpp	/^void tests() {$/;"	f
main	thirdparty/Sophus/sophus/test_sim3.cpp	/^int main() {$/;"	f
tests	thirdparty/Sophus/sophus/test_sim3.cpp	/^void tests() {$/;"	f
main	thirdparty/Sophus/sophus/test_so2.cpp	/^int main() {$/;"	f
tests	thirdparty/Sophus/sophus/test_so2.cpp	/^void tests() {$/;"	f
main	thirdparty/Sophus/sophus/test_so3.cpp	/^int main() {$/;"	f
tests	thirdparty/Sophus/sophus/test_so3.cpp	/^void tests() {$/;"	f
Adjoint	thirdparty/Sophus/sophus/tests.hpp	/^  typedef typename LieGroup::Adjoint Adjoint;$/;"	t	class:Sophus::Tests
DoF	thirdparty/Sophus/sophus/tests.hpp	/^  static const int DoF = LieGroup::DoF;$/;"	m	class:Sophus::Tests
N	thirdparty/Sophus/sophus/tests.hpp	/^  static const int N = LieGroup::N;$/;"	m	class:Sophus::Tests
Point	thirdparty/Sophus/sophus/tests.hpp	/^  typedef typename LieGroup::Point Point;$/;"	t	class:Sophus::Tests
SMALL_EPS	thirdparty/Sophus/sophus/tests.hpp	/^  const Scalar SMALL_EPS;$/;"	m	class:Sophus::Tests
SOPUHS_TESTS_HPP	thirdparty/Sophus/sophus/tests.hpp	2;"	d
Scalar	thirdparty/Sophus/sophus/tests.hpp	/^  typedef typename LieGroup::Scalar Scalar;$/;"	t	class:Sophus::Tests
Sophus	thirdparty/Sophus/sophus/tests.hpp	/^namespace Sophus {$/;"	n
Tangent	thirdparty/Sophus/sophus/tests.hpp	/^  typedef typename LieGroup::Tangent Tangent;$/;"	t	class:Sophus::Tests
Tests	thirdparty/Sophus/sophus/tests.hpp	/^  Tests() : SMALL_EPS(SophusConstants<Scalar>::epsilon()) {$/;"	f	class:Sophus::Tests
Tests	thirdparty/Sophus/sophus/tests.hpp	/^class Tests {$/;"	c	namespace:Sophus
Transformation	thirdparty/Sophus/sophus/tests.hpp	/^  typedef typename LieGroup::Transformation Transformation;$/;"	t	class:Sophus::Tests
adjointTest	thirdparty/Sophus/sophus/tests.hpp	/^  bool adjointTest() {$/;"	f	class:Sophus::Tests
expLogTest	thirdparty/Sophus/sophus/tests.hpp	/^  bool expLogTest() {$/;"	f	class:Sophus::Tests
expMapTest	thirdparty/Sophus/sophus/tests.hpp	/^  bool expMapTest() {$/;"	f	class:Sophus::Tests
groupActionTest	thirdparty/Sophus/sophus/tests.hpp	/^  bool groupActionTest() {$/;"	f	class:Sophus::Tests
group_vec_	thirdparty/Sophus/sophus/tests.hpp	/^  std::vector<LieGroup> group_vec_;$/;"	m	class:Sophus::Tests
lieBracketTest	thirdparty/Sophus/sophus/tests.hpp	/^  bool lieBracketTest() {$/;"	f	class:Sophus::Tests
map	thirdparty/Sophus/sophus/tests.hpp	/^  Matrix<Scalar,N,1> map(const Matrix<Scalar,N,N> & T,$/;"	f	class:Sophus::Tests
map	thirdparty/Sophus/sophus/tests.hpp	/^  Matrix<Scalar,N-1,1> map(const Matrix<Scalar,N,N> & T,$/;"	f	class:Sophus::Tests
mapAndMultTest	thirdparty/Sophus/sophus/tests.hpp	/^  bool mapAndMultTest() {$/;"	f	class:Sophus::Tests
norm	thirdparty/Sophus/sophus/tests.hpp	/^  Scalar norm(const Matrix<Scalar,DoF,1> & T) {$/;"	f	class:Sophus::Tests
norm	thirdparty/Sophus/sophus/tests.hpp	/^  Scalar norm(const Scalar & v) {$/;"	f	class:Sophus::Tests
point_vec_	thirdparty/Sophus/sophus/tests.hpp	/^  std::vector<Point> point_vec_;$/;"	m	class:Sophus::Tests
runAllTests	thirdparty/Sophus/sophus/tests.hpp	/^  void runAllTests() {$/;"	f	class:Sophus::Tests
setGroupElements	thirdparty/Sophus/sophus/tests.hpp	/^  void setGroupElements(const vector<LieGroup> & group_vec) {$/;"	f	class:Sophus::Tests
setPoints	thirdparty/Sophus/sophus/tests.hpp	/^  void setPoints(const vector<Point> & point_vec) {$/;"	f	class:Sophus::Tests
setTangentVectors	thirdparty/Sophus/sophus/tests.hpp	/^  void setTangentVectors(const vector<Tangent> & tangent_vec) {$/;"	f	class:Sophus::Tests
tangent_vec_	thirdparty/Sophus/sophus/tests.hpp	/^  std::vector<Tangent> tangent_vec_;$/;"	m	class:Sophus::Tests
veeHatTest	thirdparty/Sophus/sophus/tests.hpp	/^  bool veeHatTest() {$/;"	f	class:Sophus::Tests
BriefLoopDetector	thirdparty/loop-closure/DLoopDetector.h	/^  <FBrief::TDescriptor, FBrief> BriefLoopDetector;$/;"	t
DLoopDetector	thirdparty/loop-closure/DLoopDetector.h	/^namespace DLoopDetector$/;"	n
__D_T_LOOP_DETECTOR__	thirdparty/loop-closure/DLoopDetector.h	57;"	d
CLOSE_MATCHES_ONLY	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  CLOSE_MATCHES_ONLY,$/;"	e	enum:DLoopDetector::DetectionStatus
DLoopDetector	thirdparty/loop-closure/TemplatedLoopDetector.h	/^namespace DLoopDetector {$/;"	n
DetectionResult	thirdparty/loop-closure/TemplatedLoopDetector.h	/^struct DetectionResult$/;"	s	namespace:DLoopDetector
DetectionStatus	thirdparty/loop-closure/TemplatedLoopDetector.h	/^enum DetectionStatus$/;"	g	namespace:DLoopDetector
GEOM_DI	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  GEOM_DI,$/;"	e	enum:DLoopDetector::GeometricalCheck
GEOM_EXHAUSTIVE	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  GEOM_EXHAUSTIVE,$/;"	e	enum:DLoopDetector::GeometricalCheck
GEOM_FLANN	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  GEOM_FLANN,$/;"	e	enum:DLoopDetector::GeometricalCheck
GEOM_NONE	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  GEOM_NONE$/;"	e	enum:DLoopDetector::GeometricalCheck
GeometricalCheck	thirdparty/loop-closure/TemplatedLoopDetector.h	/^enum GeometricalCheck$/;"	g	namespace:DLoopDetector
LOOP_DETECTED	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  LOOP_DETECTED,$/;"	e	enum:DLoopDetector::DetectionStatus
LOW_NSS_FACTOR	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  LOW_NSS_FACTOR,$/;"	e	enum:DLoopDetector::DetectionStatus
LOW_SCORES	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  LOW_SCORES,$/;"	e	enum:DLoopDetector::DetectionStatus
NO_DB_RESULTS	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  NO_DB_RESULTS,$/;"	e	enum:DLoopDetector::DetectionStatus
NO_GEOMETRICAL_CONSISTENCY	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  NO_GEOMETRICAL_CONSISTENCY$/;"	e	enum:DLoopDetector::DetectionStatus
NO_GROUPS	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  NO_GROUPS,$/;"	e	enum:DLoopDetector::DetectionStatus
NO_TEMPORAL_CONSISTENCY	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  NO_TEMPORAL_CONSISTENCY,$/;"	e	enum:DLoopDetector::DetectionStatus
Parameters	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  struct Parameters$/;"	s	class:DLoopDetector::TemplatedLoopDetector
Parameters	thirdparty/loop-closure/TemplatedLoopDetector.h	/^TemplatedLoopDetector<TDescriptor,F>::Parameters::Parameters$/;"	f	class:DLoopDetector::TemplatedLoopDetector::Parameters
Parameters	thirdparty/loop-closure/TemplatedLoopDetector.h	/^TemplatedLoopDetector<TDescriptor,F>::Parameters::Parameters():$/;"	f	class:DLoopDetector::TemplatedLoopDetector::Parameters
TemplatedLoopDetector	thirdparty/loop-closure/TemplatedLoopDetector.h	/^TemplatedLoopDetector<TDescriptor, F>::TemplatedLoopDetector$/;"	f	class:DLoopDetector::TemplatedLoopDetector
TemplatedLoopDetector	thirdparty/loop-closure/TemplatedLoopDetector.h	/^TemplatedLoopDetector<TDescriptor,F>::TemplatedLoopDetector$/;"	f	class:DLoopDetector::TemplatedLoopDetector
TemplatedLoopDetector	thirdparty/loop-closure/TemplatedLoopDetector.h	/^class TemplatedLoopDetector$/;"	c	namespace:DLoopDetector
__D_T_TEMPLATED_LOOP_DETECTOR__	thirdparty/loop-closure/TemplatedLoopDetector.h	11;"	d
allocate	thirdparty/loop-closure/TemplatedLoopDetector.h	/^void TemplatedLoopDetector<TDescriptor,F>::allocate$/;"	f	class:DLoopDetector::TemplatedLoopDetector
alpha	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    float alpha;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
best_entry	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    EntryId best_entry; \/\/ id and score of the entry with the highest score$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::tIsland
best_score	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    double best_score;  \/\/ in the island$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::tIsland
calculateIslandScore	thirdparty/loop-closure/TemplatedLoopDetector.h	/^double TemplatedLoopDetector<TDescriptor, F>::calculateIslandScore($/;"	f	class:DLoopDetector::TemplatedLoopDetector
checkFoundamental	thirdparty/loop-closure/TemplatedLoopDetector.h	/^bool TemplatedLoopDetector<TDescriptor, F>::checkFoundamental(vector<cv::Point2f> cur_input_pts,$/;"	f	class:DLoopDetector::TemplatedLoopDetector
clear	thirdparty/loop-closure/TemplatedLoopDetector.h	/^inline void TemplatedLoopDetector<TDescriptor, F>::clear()$/;"	f	class:DLoopDetector::TemplatedLoopDetector
computeIslands	thirdparty/loop-closure/TemplatedLoopDetector.h	/^void TemplatedLoopDetector<TDescriptor, F>::computeIslands$/;"	f	class:DLoopDetector::TemplatedLoopDetector
detectLoop	thirdparty/loop-closure/TemplatedLoopDetector.h	/^bool TemplatedLoopDetector<TDescriptor, F>::detectLoop($/;"	f	class:DLoopDetector::TemplatedLoopDetector
detection	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  inline bool detection() const$/;"	f	struct:DLoopDetector::DetectionResult
di_levels	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int di_levels;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
dislocal	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int dislocal;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
eraseIndex	thirdparty/loop-closure/TemplatedLoopDetector.h	/^void TemplatedLoopDetector<TDescriptor, F>::eraseIndex$/;"	f	class:DLoopDetector::TemplatedLoopDetector
first	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    EntryId first;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::tIsland
geom_check	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    GeometricalCheck geom_check;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
getConsistentEntries	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  inline int getConsistentEntries() const$/;"	f	class:DLoopDetector::TemplatedLoopDetector
getDatabase	thirdparty/loop-closure/TemplatedLoopDetector.h	/^TemplatedLoopDetector<TDescriptor, F>::getDatabase() const$/;"	f	class:DLoopDetector::TemplatedLoopDetector
getFlannStructure	thirdparty/loop-closure/TemplatedLoopDetector.h	/^void TemplatedLoopDetector<TDescriptor, F>::getFlannStructure($/;"	f	class:DLoopDetector::TemplatedLoopDetector
getMatches_neighratio	thirdparty/loop-closure/TemplatedLoopDetector.h	/^void TemplatedLoopDetector<TDescriptor, F>::getMatches_neighratio($/;"	f	class:DLoopDetector::TemplatedLoopDetector
getVocabulary	thirdparty/loop-closure/TemplatedLoopDetector.h	/^TemplatedLoopDetector<TDescriptor, F>::getVocabulary() const$/;"	f	class:DLoopDetector::TemplatedLoopDetector
gt	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    static inline bool gt(const tIsland &a, const tIsland &b)$/;"	f	struct:DLoopDetector::TemplatedLoopDetector::tIsland
image_cols	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int image_cols;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
image_rows	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int image_rows;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
initCameraModel	thirdparty/loop-closure/TemplatedLoopDetector.h	/^void TemplatedLoopDetector<TDescriptor, F>::initCameraModel(const std::string &calib_file)$/;"	f	class:DLoopDetector::TemplatedLoopDetector
isGeometricallyConsistent_DI	thirdparty/loop-closure/TemplatedLoopDetector.h	/^bool TemplatedLoopDetector<TDescriptor, F>::isGeometricallyConsistent_DI($/;"	f	class:DLoopDetector::TemplatedLoopDetector
k	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int k;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
last	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    EntryId last;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::tIsland
last_matched_island	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    tIsland last_matched_island;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::tTemporalWindow
last_query_id	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    EntryId last_query_id;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::tTemporalWindow
length	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    inline int length() const { return last - first + 1; }$/;"	f	struct:DLoopDetector::TemplatedLoopDetector::tIsland
ltId	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    static inline bool ltId(const tIsland &a, const tIsland &b)$/;"	f	struct:DLoopDetector::TemplatedLoopDetector::tIsland
m_camera	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  camodocal::CameraPtr m_camera;$/;"	m	class:DLoopDetector::TemplatedLoopDetector
m_database	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  TemplatedDatabase<TDescriptor,F> *m_database;$/;"	m	class:DLoopDetector::TemplatedLoopDetector
m_image_descriptors	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  vector<vector<TDescriptor> > m_image_descriptors;$/;"	m	class:DLoopDetector::TemplatedLoopDetector
m_image_keys	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  vector<vector<cv::KeyPoint> > m_image_keys;$/;"	m	class:DLoopDetector::TemplatedLoopDetector
m_last_bowvec	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  BowVector m_last_bowvec;$/;"	m	class:DLoopDetector::TemplatedLoopDetector
m_params	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  Parameters m_params;$/;"	m	class:DLoopDetector::TemplatedLoopDetector
m_window	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  tTemporalWindow m_window;$/;"	m	class:DLoopDetector::TemplatedLoopDetector
match	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  EntryId match;$/;"	m	struct:DLoopDetector::DetectionResult
max_db_results	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int max_db_results;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
max_distance_between_groups	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int max_distance_between_groups;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
max_distance_between_queries	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int max_distance_between_queries; $/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
max_intragroup_gap	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int max_intragroup_gap; $/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
max_neighbor_ratio	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    double max_neighbor_ratio;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
max_ransac_iterations	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int max_ransac_iterations;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
max_reprojection_error	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    double max_reprojection_error;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
min_Fpoints	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int min_Fpoints;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
min_matches_per_group	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int min_matches_per_group; $/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
min_nss_factor	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    float min_nss_factor;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
nentries	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    int nentries;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::tTemporalWindow
operator <	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    inline bool operator < (const tIsland &b) const$/;"	f	struct:DLoopDetector::TemplatedLoopDetector::tIsland
operator >	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    inline bool operator > (const tIsland &b) const$/;"	f	struct:DLoopDetector::TemplatedLoopDetector::tIsland
query	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  EntryId query;$/;"	m	struct:DLoopDetector::DetectionResult
ransac_probability	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    double ransac_probability;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
reduceInputToOutput	thirdparty/loop-closure/TemplatedLoopDetector.h	/^void TemplatedLoopDetector<TDescriptor, F>::reduceInputToOutput(vector<cv::Point2f> v_in, vector<cv::Point2f> &v_out, vector<uchar> status)$/;"	f	class:DLoopDetector::TemplatedLoopDetector
removeLowScores	thirdparty/loop-closure/TemplatedLoopDetector.h	/^void TemplatedLoopDetector<TDescriptor, F>::removeLowScores(QueryResults &q,$/;"	f	class:DLoopDetector::TemplatedLoopDetector
score	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    double score; \/\/ score of island$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::tIsland
set	thirdparty/loop-closure/TemplatedLoopDetector.h	/^void TemplatedLoopDetector<TDescriptor,F>::Parameters::set(float f)$/;"	f	class:DLoopDetector::TemplatedLoopDetector::Parameters
setDatabase	thirdparty/loop-closure/TemplatedLoopDetector.h	/^void TemplatedLoopDetector<TDescriptor, F>::setDatabase(const T &db)$/;"	f	class:DLoopDetector::TemplatedLoopDetector
setVocabulary	thirdparty/loop-closure/TemplatedLoopDetector.h	/^void TemplatedLoopDetector<TDescriptor,F>::setVocabulary$/;"	f	class:DLoopDetector::TemplatedLoopDetector
status	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  DetectionStatus status;$/;"	m	struct:DLoopDetector::DetectionResult
tIsland	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    tIsland(){}$/;"	f	struct:DLoopDetector::TemplatedLoopDetector::tIsland
tIsland	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    tIsland(EntryId f, EntryId l): first(f), last(l){}$/;"	f	struct:DLoopDetector::TemplatedLoopDetector::tIsland
tIsland	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    tIsland(EntryId f, EntryId l, double s): first(f), last(l), score(s){}$/;"	f	struct:DLoopDetector::TemplatedLoopDetector::tIsland
tIsland	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  struct tIsland$/;"	s	class:DLoopDetector::TemplatedLoopDetector
tTemporalWindow	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    tTemporalWindow(): nentries(0) {}$/;"	f	struct:DLoopDetector::TemplatedLoopDetector::tTemporalWindow
tTemporalWindow	thirdparty/loop-closure/TemplatedLoopDetector.h	/^  struct tTemporalWindow$/;"	s	class:DLoopDetector::TemplatedLoopDetector
toString	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    std::string toString() const$/;"	f	struct:DLoopDetector::TemplatedLoopDetector::tIsland
updateTemporalWindow	thirdparty/loop-closure/TemplatedLoopDetector.h	/^void TemplatedLoopDetector<TDescriptor, F>::updateTemporalWindow$/;"	f	class:DLoopDetector::TemplatedLoopDetector
use_nss	thirdparty/loop-closure/TemplatedLoopDetector.h	/^    bool use_nss;$/;"	m	struct:DLoopDetector::TemplatedLoopDetector::Parameters
~TemplatedLoopDetector	thirdparty/loop-closure/TemplatedLoopDetector.h	/^TemplatedLoopDetector<TDescriptor, F>::~TemplatedLoopDetector(void)$/;"	f	class:DLoopDetector::TemplatedLoopDetector
BowVector	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.cpp	/^BowVector::BowVector(void)$/;"	f	class:DBoW2::BowVector
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.cpp	/^namespace DBoW2 {$/;"	n	file:
addIfNotExist	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.cpp	/^void BowVector::addIfNotExist(WordId id, WordValue v)$/;"	f	class:DBoW2::BowVector
addWeight	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.cpp	/^void BowVector::addWeight(WordId id, WordValue v)$/;"	f	class:DBoW2::BowVector
normalize	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.cpp	/^void BowVector::normalize(LNorm norm_type)$/;"	f	class:DBoW2::BowVector
operator <<	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.cpp	/^std::ostream& operator<< (std::ostream &out, const BowVector &v)$/;"	f	namespace:DBoW2
saveM	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.cpp	/^void BowVector::saveM(const std::string &filename, size_t W) const$/;"	f	class:DBoW2::BowVector
~BowVector	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.cpp	/^BowVector::~BowVector(void)$/;"	f	class:DBoW2::BowVector
BHATTACHARYYA	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^  BHATTACHARYYA,$/;"	e	enum:DBoW2::ScoringType
BINARY	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^  BINARY$/;"	e	enum:DBoW2::WeightingType
BowVector	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^class BowVector: $/;"	c	namespace:DBoW2
CHI_SQUARE	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^  CHI_SQUARE,$/;"	e	enum:DBoW2::ScoringType
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^namespace DBoW2 {$/;"	n
DOT_PRODUCT	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^  DOT_PRODUCT$/;"	e	enum:DBoW2::ScoringType
IDF	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^  IDF,$/;"	e	enum:DBoW2::WeightingType
KL	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^  KL,$/;"	e	enum:DBoW2::ScoringType
L1	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^  L1,$/;"	e	enum:DBoW2::LNorm
L1_NORM	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^  L1_NORM,$/;"	e	enum:DBoW2::ScoringType
L2	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^  L2$/;"	e	enum:DBoW2::LNorm
L2_NORM	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^  L2_NORM,$/;"	e	enum:DBoW2::ScoringType
LNorm	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^enum LNorm$/;"	g	namespace:DBoW2
NodeId	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^typedef unsigned int NodeId;$/;"	t	namespace:DBoW2
ScoringType	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^enum ScoringType$/;"	g	namespace:DBoW2
TF	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^  TF,$/;"	e	enum:DBoW2::WeightingType
TF_IDF	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^  TF_IDF,$/;"	e	enum:DBoW2::WeightingType
WeightingType	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^enum WeightingType$/;"	g	namespace:DBoW2
WordId	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^typedef unsigned int WordId;$/;"	t	namespace:DBoW2
WordValue	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	/^typedef double WordValue;$/;"	t	namespace:DBoW2
__D_T_BOW_VECTOR__	thirdparty/loop-closure/ThirdParty/DBoW/BowVector.h	11;"	d
BriefDatabase	thirdparty/loop-closure/ThirdParty/DBoW/DBoW2.h	/^  BriefDatabase;$/;"	t
BriefVocabulary	thirdparty/loop-closure/ThirdParty/DBoW/DBoW2.h	/^  BriefVocabulary;$/;"	t
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/DBoW2.h	/^namespace DBoW2$/;"	n
__D_T_DBOW2__	thirdparty/loop-closure/ThirdParty/DBoW/DBoW2.h	56;"	d
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/FBrief.cpp	/^namespace DBoW2 {$/;"	n	file:
distance	thirdparty/loop-closure/ThirdParty/DBoW/FBrief.cpp	/^double FBrief::distance(const FBrief::TDescriptor &a, $/;"	f	class:DBoW2::FBrief
fromString	thirdparty/loop-closure/ThirdParty/DBoW/FBrief.cpp	/^void FBrief::fromString(FBrief::TDescriptor &a, const std::string &s)$/;"	f	class:DBoW2::FBrief
meanValue	thirdparty/loop-closure/ThirdParty/DBoW/FBrief.cpp	/^void FBrief::meanValue(const std::vector<FBrief::pDescriptor> &descriptors, $/;"	f	class:DBoW2::FBrief
toMat32F	thirdparty/loop-closure/ThirdParty/DBoW/FBrief.cpp	/^void FBrief::toMat32F(const std::vector<TDescriptor> &descriptors, $/;"	f	class:DBoW2::FBrief
toString	thirdparty/loop-closure/ThirdParty/DBoW/FBrief.cpp	/^std::string FBrief::toString(const FBrief::TDescriptor &a)$/;"	f	class:DBoW2::FBrief
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/FBrief.h	/^namespace DBoW2 {$/;"	n
FBrief	thirdparty/loop-closure/ThirdParty/DBoW/FBrief.h	/^class FBrief: protected FClass$/;"	c	namespace:DBoW2
TDescriptor	thirdparty/loop-closure/ThirdParty/DBoW/FBrief.h	/^  typedef DVision::BRIEF::bitset TDescriptor;$/;"	t	class:DBoW2::FBrief
__D_T_F_BRIEF__	thirdparty/loop-closure/ThirdParty/DBoW/FBrief.h	11;"	d
pDescriptor	thirdparty/loop-closure/ThirdParty/DBoW/FBrief.h	/^  typedef const TDescriptor *pDescriptor;$/;"	t	class:DBoW2::FBrief
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/FClass.h	/^namespace DBoW2 {$/;"	n
FClass	thirdparty/loop-closure/ThirdParty/DBoW/FClass.h	/^class FClass$/;"	c	namespace:DBoW2
__D_T_FCLASS__	thirdparty/loop-closure/ThirdParty/DBoW/FClass.h	11;"	d
pDescriptor	thirdparty/loop-closure/ThirdParty/DBoW/FClass.h	/^  typedef const TDescriptor *pDescriptor;$/;"	t	class:DBoW2::FClass
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/FeatureVector.cpp	/^namespace DBoW2 {$/;"	n	file:
FeatureVector	thirdparty/loop-closure/ThirdParty/DBoW/FeatureVector.cpp	/^FeatureVector::FeatureVector(void)$/;"	f	class:DBoW2::FeatureVector
addFeature	thirdparty/loop-closure/ThirdParty/DBoW/FeatureVector.cpp	/^void FeatureVector::addFeature(NodeId id, unsigned int i_feature)$/;"	f	class:DBoW2::FeatureVector
operator <<	thirdparty/loop-closure/ThirdParty/DBoW/FeatureVector.cpp	/^std::ostream& operator<<(std::ostream &out, $/;"	f	namespace:DBoW2
~FeatureVector	thirdparty/loop-closure/ThirdParty/DBoW/FeatureVector.cpp	/^FeatureVector::~FeatureVector(void)$/;"	f	class:DBoW2::FeatureVector
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/FeatureVector.h	/^namespace DBoW2 {$/;"	n
FeatureVector	thirdparty/loop-closure/ThirdParty/DBoW/FeatureVector.h	/^class FeatureVector: $/;"	c	namespace:DBoW2
__D_T_FEATURE_VECTOR__	thirdparty/loop-closure/ThirdParty/DBoW/FeatureVector.h	11;"	d
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.cpp	/^namespace DBoW2$/;"	n	file:
operator <<	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.cpp	/^ostream & operator<<(ostream& os, const QueryResults& ret )$/;"	f	namespace:DBoW2
operator <<	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.cpp	/^ostream & operator<<(ostream& os, const Result& ret )$/;"	f	namespace:DBoW2
saveM	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.cpp	/^void QueryResults::saveM(const std::string &filename) const$/;"	f	class:DBoW2::QueryResults
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^namespace DBoW2 {$/;"	n
EntryId	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^typedef unsigned int EntryId;$/;"	t	namespace:DBoW2
Id	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  EntryId Id;$/;"	m	class:DBoW2::Result
QueryResults	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^class QueryResults: public std::vector<Result>$/;"	c	namespace:DBoW2
Result	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  inline Result(){}$/;"	f	class:DBoW2::Result
Result	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  inline Result(EntryId _id, double _score): Id(_id), Score(_score){}$/;"	f	class:DBoW2::Result
Result	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^class Result$/;"	c	namespace:DBoW2
Score	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  double Score;$/;"	m	class:DBoW2::Result
__D_T_QUERY_RESULTS__	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	11;"	d
bhatScore	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  double bhatScore, chiScore;$/;"	m	class:DBoW2::Result
chiScore	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  double bhatScore, chiScore;$/;"	m	class:DBoW2::Result
expectedChiScore	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  double expectedChiScore;$/;"	m	class:DBoW2::Result
ge	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  inline static bool ge(const Result &a, const Result &b)$/;"	f	class:DBoW2::Result
geq	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  static inline bool geq(const Result &a, const Result &b)$/;"	f	class:DBoW2::Result
geqv	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  static inline bool geqv(const Result &a, double s)$/;"	f	class:DBoW2::Result
gt	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  static inline bool gt(const Result &a, const Result &b)$/;"	f	class:DBoW2::Result
ltId	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  static inline bool ltId(const Result &a, const Result &b)$/;"	f	class:DBoW2::Result
nWords	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  int nWords; \/\/ words in common$/;"	m	class:DBoW2::Result
operator <	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  inline bool operator<(const Result &r) const$/;"	f	class:DBoW2::Result
operator <	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  inline bool operator<(double s) const$/;"	f	class:DBoW2::Result
operator ==	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  inline bool operator==(EntryId id) const$/;"	f	class:DBoW2::Result
operator >	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  inline bool operator>(const Result &r) const$/;"	f	class:DBoW2::Result
operator >	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  inline bool operator>(double s) const$/;"	f	class:DBoW2::Result
scaleScores	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^inline void QueryResults::scaleScores(double factor)$/;"	f	class:DBoW2::QueryResults
sumCommonVi	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  double sumCommonVi;$/;"	m	class:DBoW2::Result
sumCommonWi	thirdparty/loop-closure/ThirdParty/DBoW/QueryResults.h	/^  double sumCommonWi;$/;"	m	class:DBoW2::Result
LOG_EPS	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.cpp	/^const double GeneralScoring::LOG_EPS = log(DBL_EPSILON); \/\/ FLT_EPSILON$/;"	m	class:GeneralScoring	file:
score	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.cpp	/^double BhattacharyyaScoring::score(const BowVector &v1, $/;"	f	class:BhattacharyyaScoring
score	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.cpp	/^double ChiSquareScoring::score(const BowVector &v1, const BowVector &v2) $/;"	f	class:ChiSquareScoring
score	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.cpp	/^double DotProductScoring::score(const BowVector &v1, $/;"	f	class:DotProductScoring
score	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.cpp	/^double KLScoring::score(const BowVector &v1, const BowVector &v2) const$/;"	f	class:KLScoring
score	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.cpp	/^double L1Scoring::score(const BowVector &v1, const BowVector &v2) const$/;"	f	class:L1Scoring
score	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.cpp	/^double L2Scoring::score(const BowVector &v1, const BowVector &v2) const$/;"	f	class:L2Scoring
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.h	/^namespace DBoW2 {$/;"	n
GeneralScoring	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.h	/^class GeneralScoring$/;"	c	namespace:DBoW2
LOG_EPS	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.h	/^	static const double LOG_EPS; $/;"	m	class:DBoW2::GeneralScoring
__D_T_SCORING_OBJECT__	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.h	11;"	d
__SCORING_CLASS	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.h	52;"	d
__SCORING_CLASS	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.h	90;"	d
~GeneralScoring	thirdparty/loop-closure/ThirdParty/DBoW/ScoringObject.h	/^  virtual ~GeneralScoring() {} \/\/!< Required for virtual base classes	$/;"	f	class:DBoW2::GeneralScoring
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^namespace DBoW2 {$/;"	n
DirectFile	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^  typedef std::vector<FeatureVector> DirectFile;$/;"	t	class:DBoW2::TemplatedDatabase
IFPair	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^    IFPair(){}$/;"	f	struct:DBoW2::TemplatedDatabase::IFPair
IFPair	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^    IFPair(EntryId eid, WordValue wv): entry_id(eid), word_weight(wv) {}$/;"	f	struct:DBoW2::TemplatedDatabase::IFPair
IFPair	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^  struct IFPair$/;"	s	class:DBoW2::TemplatedDatabase
IFRow	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^  typedef std::list<IFPair> IFRow;$/;"	t	class:DBoW2::TemplatedDatabase
InvertedFile	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^  typedef std::vector<IFRow> InvertedFile; $/;"	t	class:DBoW2::TemplatedDatabase
MIN_COMMON_WORDS	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^static int MIN_COMMON_WORDS = 5;$/;"	m	namespace:DBoW2
TemplatedDatabase	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^TemplatedDatabase<TDescriptor, F>::TemplatedDatabase$/;"	f	class:DBoW2::TemplatedDatabase
TemplatedDatabase	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^TemplatedDatabase<TDescriptor,F>::TemplatedDatabase$/;"	f	class:DBoW2::TemplatedDatabase
TemplatedDatabase	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^class TemplatedDatabase$/;"	c	namespace:DBoW2
__D_T_TEMPLATED_DATABASE__	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	11;"	d
add	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^EntryId TemplatedDatabase<TDescriptor, F>::add($/;"	f	class:DBoW2::TemplatedDatabase
add	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^EntryId TemplatedDatabase<TDescriptor, F>::add(const BowVector &v,$/;"	f	class:DBoW2::TemplatedDatabase
allocate	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::allocate(int nd, int ni)$/;"	f	class:DBoW2::TemplatedDatabase
clear	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^inline void TemplatedDatabase<TDescriptor, F>::clear()$/;"	f	class:DBoW2::TemplatedDatabase
delete_entry	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::delete_entry(const EntryId entry_id)$/;"	f	class:DBoW2::TemplatedDatabase
entry_id	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^    EntryId entry_id;$/;"	m	struct:DBoW2::TemplatedDatabase::IFPair
getDirectIndexLevels	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^inline int TemplatedDatabase<TDescriptor, F>::getDirectIndexLevels() const$/;"	f	class:DBoW2::TemplatedDatabase
getVocabulary	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^TemplatedDatabase<TDescriptor, F>::getVocabulary() const$/;"	f	class:DBoW2::TemplatedDatabase
load	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::load(const cv::FileStorage &fs,$/;"	f	class:DBoW2::TemplatedDatabase
load	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::load(const std::string &filename)$/;"	f	class:DBoW2::TemplatedDatabase
m_dBowfile	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^  std::vector<BowVector> m_dBowfile;$/;"	m	class:DBoW2::TemplatedDatabase
m_dfile	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^  DirectFile m_dfile;$/;"	m	class:DBoW2::TemplatedDatabase
m_dilevels	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^  int m_dilevels;$/;"	m	class:DBoW2::TemplatedDatabase
m_ifile	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^  InvertedFile m_ifile;$/;"	m	class:DBoW2::TemplatedDatabase
m_nentries	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^  int m_nentries;$/;"	m	class:DBoW2::TemplatedDatabase
m_use_di	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^  bool m_use_di;$/;"	m	class:DBoW2::TemplatedDatabase
m_voc	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^  TemplatedVocabulary<TDescriptor, F> *m_voc;$/;"	m	class:DBoW2::TemplatedDatabase
operator <<	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^std::ostream& operator<<(std::ostream &os, $/;"	f	namespace:DBoW2
operator =	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^TemplatedDatabase<TDescriptor,F>& TemplatedDatabase<TDescriptor,F>::operator=$/;"	f	class:DBoW2::TemplatedDatabase
operator ==	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^    inline bool operator==(EntryId eid) const { return entry_id == eid; }$/;"	f	struct:DBoW2::TemplatedDatabase::IFPair
query	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::query($/;"	f	class:DBoW2::TemplatedDatabase
queryBhattacharyya	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::queryBhattacharyya($/;"	f	class:DBoW2::TemplatedDatabase
queryChiSquare	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::queryChiSquare(const BowVector &vec, $/;"	f	class:DBoW2::TemplatedDatabase
queryDotProduct	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::queryDotProduct($/;"	f	class:DBoW2::TemplatedDatabase
queryKL	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::queryKL(const BowVector &vec, $/;"	f	class:DBoW2::TemplatedDatabase
queryL1	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::queryL1(const BowVector &vec, $/;"	f	class:DBoW2::TemplatedDatabase
queryL2	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::queryL2(const BowVector &vec, $/;"	f	class:DBoW2::TemplatedDatabase
retrieveFeatures	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^const FeatureVector& TemplatedDatabase<TDescriptor, F>::retrieveFeatures$/;"	f	class:DBoW2::TemplatedDatabase
save	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::save(const std::string &filename) const$/;"	f	class:DBoW2::TemplatedDatabase
save	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^void TemplatedDatabase<TDescriptor, F>::save(cv::FileStorage &fs,$/;"	f	class:DBoW2::TemplatedDatabase
setVocabulary	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^inline void TemplatedDatabase<TDescriptor, F>::setVocabulary$/;"	f	class:DBoW2::TemplatedDatabase
size	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^inline unsigned int TemplatedDatabase<TDescriptor, F>::size() const$/;"	f	class:DBoW2::TemplatedDatabase
usingDirectIndex	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^inline bool TemplatedDatabase<TDescriptor, F>::usingDirectIndex() const$/;"	f	class:DBoW2::TemplatedDatabase
word_weight	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^    WordValue word_weight;$/;"	m	struct:DBoW2::TemplatedDatabase::IFPair
~TemplatedDatabase	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedDatabase.h	/^TemplatedDatabase<TDescriptor, F>::~TemplatedDatabase(void)$/;"	f	class:DBoW2::TemplatedDatabase
DBoW2	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^namespace DBoW2 {$/;"	n
HKmeansStep	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::HKmeansStep(NodeId parent_id, $/;"	f	class:DBoW2::TemplatedVocabulary
Node	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^    Node(): id(0), weight(0), parent(0), word_id(0){}$/;"	f	struct:DBoW2::TemplatedVocabulary::Node
Node	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^    Node(NodeId _id): id(_id), weight(0), parent(0), word_id(0){}$/;"	f	struct:DBoW2::TemplatedVocabulary::Node
Node	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  struct Node $/;"	s	class:DBoW2::TemplatedVocabulary
TemplatedVocabulary	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^TemplatedVocabulary<TDescriptor,F>::TemplatedVocabulary$/;"	f	class:DBoW2::TemplatedVocabulary
TemplatedVocabulary	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^TemplatedVocabulary<TDescriptor,F>::TemplatedVocabulary($/;"	f	class:DBoW2::TemplatedVocabulary
TemplatedVocabulary	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^class TemplatedVocabulary$/;"	c	namespace:DBoW2
__D_T_TEMPLATED_VOCABULARY__	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	11;"	d
children	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^    std::vector<NodeId> children;$/;"	m	struct:DBoW2::TemplatedVocabulary::Node
create	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::create($/;"	f	class:DBoW2::TemplatedVocabulary
createScoringObject	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::createScoringObject()$/;"	f	class:DBoW2::TemplatedVocabulary
createWords	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::createWords()$/;"	f	class:DBoW2::TemplatedVocabulary
descriptor	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^    TDescriptor descriptor;$/;"	m	struct:DBoW2::TemplatedVocabulary::Node
empty	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^inline bool TemplatedVocabulary<TDescriptor,F>::empty() const$/;"	f	class:DBoW2::TemplatedVocabulary
getBranchingFactor	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  inline int getBranchingFactor() const { return m_k; }$/;"	f	class:DBoW2::TemplatedVocabulary
getDepthLevels	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  inline int getDepthLevels() const { return m_L; }$/;"	f	class:DBoW2::TemplatedVocabulary
getEffectiveLevels	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^float TemplatedVocabulary<TDescriptor,F>::getEffectiveLevels() const$/;"	f	class:DBoW2::TemplatedVocabulary
getFeatures	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::getFeatures($/;"	f	class:DBoW2::TemplatedVocabulary
getParentNode	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^NodeId TemplatedVocabulary<TDescriptor,F>::getParentNode$/;"	f	class:DBoW2::TemplatedVocabulary
getScoringType	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  inline ScoringType getScoringType() const { return m_scoring; }$/;"	f	class:DBoW2::TemplatedVocabulary
getWeightingType	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  inline WeightingType getWeightingType() const { return m_weighting; }$/;"	f	class:DBoW2::TemplatedVocabulary
getWord	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^TDescriptor TemplatedVocabulary<TDescriptor,F>::getWord(WordId wid) const$/;"	f	class:DBoW2::TemplatedVocabulary
getWordWeight	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^WordValue TemplatedVocabulary<TDescriptor, F>::getWordWeight(WordId wid) const$/;"	f	class:DBoW2::TemplatedVocabulary
getWordsFromNode	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::getWordsFromNode$/;"	f	class:DBoW2::TemplatedVocabulary
id	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^    NodeId id;$/;"	m	struct:DBoW2::TemplatedVocabulary::Node
initiateClusters	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor, F>::initiateClusters$/;"	f	class:DBoW2::TemplatedVocabulary
initiateClustersKMpp	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::initiateClustersKMpp($/;"	f	class:DBoW2::TemplatedVocabulary
isLeaf	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^    inline bool isLeaf() const { return children.empty(); }$/;"	f	struct:DBoW2::TemplatedVocabulary::Node
load	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::load(const cv::FileStorage &fs,$/;"	f	class:DBoW2::TemplatedVocabulary
load	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::load(const std::string &filename)$/;"	f	class:DBoW2::TemplatedVocabulary
loadBin	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::loadBin(const std::string &filename) {$/;"	f	class:DBoW2::TemplatedVocabulary
m_L	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  int m_L;$/;"	m	class:DBoW2::TemplatedVocabulary
m_k	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  int m_k;$/;"	m	class:DBoW2::TemplatedVocabulary
m_nodes	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  std::vector<Node> m_nodes;$/;"	m	class:DBoW2::TemplatedVocabulary
m_scoring	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  ScoringType m_scoring;$/;"	m	class:DBoW2::TemplatedVocabulary
m_scoring_object	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  GeneralScoring* m_scoring_object;$/;"	m	class:DBoW2::TemplatedVocabulary
m_weighting	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  WeightingType m_weighting;$/;"	m	class:DBoW2::TemplatedVocabulary
m_words	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  std::vector<Node*> m_words;$/;"	m	class:DBoW2::TemplatedVocabulary
operator <<	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^std::ostream& operator<<(std::ostream &os, $/;"	f	namespace:DBoW2
operator =	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^TemplatedVocabulary<TDescriptor,F>::operator=$/;"	f	class:DBoW2::TemplatedVocabulary
pDescriptor	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^  typedef const TDescriptor *pDescriptor;$/;"	t	class:DBoW2::TemplatedVocabulary
parent	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^    NodeId parent;$/;"	m	struct:DBoW2::TemplatedVocabulary::Node
save	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::save(const std::string &filename) const$/;"	f	class:DBoW2::TemplatedVocabulary
save	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::save(cv::FileStorage &f,$/;"	f	class:DBoW2::TemplatedVocabulary
score	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^inline double TemplatedVocabulary<TDescriptor,F>::score$/;"	f	class:DBoW2::TemplatedVocabulary
setNodeWeights	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::setNodeWeights$/;"	f	class:DBoW2::TemplatedVocabulary
setScoringType	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::setScoringType(ScoringType type)$/;"	f	class:DBoW2::TemplatedVocabulary
setWeightingType	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::setWeightingType(WeightingType type)$/;"	f	class:DBoW2::TemplatedVocabulary
size	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^inline unsigned int TemplatedVocabulary<TDescriptor,F>::size() const$/;"	f	class:DBoW2::TemplatedVocabulary
stopWords	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^int TemplatedVocabulary<TDescriptor,F>::stopWords(double minWeight)$/;"	f	class:DBoW2::TemplatedVocabulary
transform	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^WordId TemplatedVocabulary<TDescriptor, F>::transform$/;"	f	class:DBoW2::TemplatedVocabulary
transform	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::transform$/;"	f	class:DBoW2::TemplatedVocabulary
transform	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::transform($/;"	f	class:DBoW2::TemplatedVocabulary
transform	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^void TemplatedVocabulary<TDescriptor,F>::transform(const TDescriptor &feature, $/;"	f	class:DBoW2::TemplatedVocabulary
weight	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^    WordValue weight;$/;"	m	struct:DBoW2::TemplatedVocabulary::Node
word_id	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^    WordId word_id;$/;"	m	struct:DBoW2::TemplatedVocabulary::Node
~TemplatedVocabulary	thirdparty/loop-closure/ThirdParty/DBoW/TemplatedVocabulary.h	/^TemplatedVocabulary<TDescriptor,F>::~TemplatedVocabulary()$/;"	f	class:DBoW2::TemplatedVocabulary
DException	thirdparty/loop-closure/ThirdParty/DUtils/DException.h	/^	DException(const char *msg) throw(): m_message(msg){}$/;"	f	class:DUtils::DException
DException	thirdparty/loop-closure/ThirdParty/DUtils/DException.h	/^	DException(const string &msg) throw(): m_message(msg){}$/;"	f	class:DUtils::DException
DException	thirdparty/loop-closure/ThirdParty/DUtils/DException.h	/^	DException(void) throw(): m_message("DUtils exception"){}$/;"	f	class:DUtils::DException
DException	thirdparty/loop-closure/ThirdParty/DUtils/DException.h	/^class DException :$/;"	c	namespace:DUtils
DUtils	thirdparty/loop-closure/ThirdParty/DUtils/DException.h	/^namespace DUtils {$/;"	n
__D_EXCEPTION__	thirdparty/loop-closure/ThirdParty/DUtils/DException.h	14;"	d
m_message	thirdparty/loop-closure/ThirdParty/DUtils/DException.h	/^	string m_message;$/;"	m	class:DUtils::DException
what	thirdparty/loop-closure/ThirdParty/DUtils/DException.h	/^	virtual const char* what() const throw()$/;"	f	class:DUtils::DException
~DException	thirdparty/loop-closure/ThirdParty/DUtils/DException.h	/^	virtual ~DException(void) throw(){}$/;"	f	class:DUtils::DException
DUtils	thirdparty/loop-closure/ThirdParty/DUtils/DUtils.h	/^namespace DUtils$/;"	n
__D_UTILS__	thirdparty/loop-closure/ThirdParty/DUtils/DUtils.h	33;"	d
RandomInt	thirdparty/loop-closure/ThirdParty/DUtils/Random.cpp	/^int DUtils::Random::RandomInt(int min, int max){$/;"	f	class:DUtils::Random
SeedRand	thirdparty/loop-closure/ThirdParty/DUtils/Random.cpp	/^void DUtils::Random::SeedRand(){$/;"	f	class:DUtils::Random
SeedRand	thirdparty/loop-closure/ThirdParty/DUtils/Random.cpp	/^void DUtils::Random::SeedRand(int seed)$/;"	f	class:DUtils::Random
SeedRandOnce	thirdparty/loop-closure/ThirdParty/DUtils/Random.cpp	/^void DUtils::Random::SeedRandOnce()$/;"	f	class:DUtils::Random
SeedRandOnce	thirdparty/loop-closure/ThirdParty/DUtils/Random.cpp	/^void DUtils::Random::SeedRandOnce(int seed)$/;"	f	class:DUtils::Random
UnrepeatedRandomizer	thirdparty/loop-closure/ThirdParty/DUtils/Random.cpp	/^DUtils::Random::UnrepeatedRandomizer::UnrepeatedRandomizer$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
UnrepeatedRandomizer	thirdparty/loop-closure/ThirdParty/DUtils/Random.cpp	/^DUtils::Random::UnrepeatedRandomizer::UnrepeatedRandomizer(int min, int max)$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
createValues	thirdparty/loop-closure/ThirdParty/DUtils/Random.cpp	/^void DUtils::Random::UnrepeatedRandomizer::createValues()$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
get	thirdparty/loop-closure/ThirdParty/DUtils/Random.cpp	/^int DUtils::Random::UnrepeatedRandomizer::get()$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
operator =	thirdparty/loop-closure/ThirdParty/DUtils/Random.cpp	/^DUtils::Random::UnrepeatedRandomizer::operator=$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
reset	thirdparty/loop-closure/ThirdParty/DUtils/Random.cpp	/^void DUtils::Random::UnrepeatedRandomizer::reset()$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
DUtils	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^namespace DUtils {$/;"	n
Random	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^class Random$/;"	c	namespace:DUtils
RandomGaussianValue	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^	static T RandomGaussianValue(T mean, T sigma)$/;"	f	class:DUtils::Random
RandomValue	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^	static T RandomValue(){$/;"	f	class:DUtils::Random
RandomValue	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^	static T RandomValue(T min, T max){$/;"	f	class:DUtils::Random
UnrepeatedRandomizer	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^class Random::UnrepeatedRandomizer$/;"	c	class:DUtils::Random
__D_RANDOM__	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	13;"	d
empty	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^  inline bool empty() const { return m_values.empty(); }$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
left	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^  inline unsigned int left() const { return m_values.size(); }$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
m_already_seeded	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^  static bool m_already_seeded;$/;"	m	class:DUtils::Random
m_max	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^  int m_max;$/;"	m	class:DUtils::Random::UnrepeatedRandomizer
m_min	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^  int m_min;$/;"	m	class:DUtils::Random::UnrepeatedRandomizer
m_values	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^  std::vector<int> m_values;$/;"	m	class:DUtils::Random::UnrepeatedRandomizer
~UnrepeatedRandomizer	thirdparty/loop-closure/ThirdParty/DUtils/Random.h	/^  ~UnrepeatedRandomizer(){}$/;"	f	class:DUtils::Random::UnrepeatedRandomizer
Format	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^string Timestamp::Format(bool machine_friendly) const $/;"	f	class:Timestamp
Format	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^string Timestamp::Format(double s) {$/;"	f	class:Timestamp
Timestamp	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^Timestamp::Timestamp(Timestamp::tOptions option)$/;"	f	class:Timestamp
WIN32	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	22;"	d	file:
empty	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^bool Timestamp::empty() const$/;"	f	class:Timestamp
getFloatTime	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^double Timestamp::getFloatTime() const {$/;"	f	class:Timestamp
getStringTime	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^string Timestamp::getStringTime() const {$/;"	f	class:Timestamp
minus	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^Timestamp Timestamp::minus(unsigned long secs, unsigned long usecs) const$/;"	f	class:Timestamp
operator +	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^Timestamp Timestamp::operator+ (double s) const$/;"	f	class:Timestamp
operator +=	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^Timestamp& Timestamp::operator+= (double s)$/;"	f	class:Timestamp
operator -	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^Timestamp Timestamp::operator- (double s) const$/;"	f	class:Timestamp
operator -	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^double Timestamp::operator- (const Timestamp &t) const {$/;"	f	class:Timestamp
operator -=	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^Timestamp& Timestamp::operator-= (double s)$/;"	f	class:Timestamp
operator <	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^bool Timestamp::operator< (const Timestamp &t) const$/;"	f	class:Timestamp
operator <=	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^bool Timestamp::operator<= (const Timestamp &t) const$/;"	f	class:Timestamp
operator ==	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^bool Timestamp::operator== (const Timestamp &t) const$/;"	f	class:Timestamp
operator >	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^bool Timestamp::operator> (const Timestamp &t) const$/;"	f	class:Timestamp
operator >=	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^bool Timestamp::operator>= (const Timestamp &t) const$/;"	f	class:Timestamp
plus	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^Timestamp Timestamp::plus(unsigned long secs, unsigned long usecs) const$/;"	f	class:Timestamp
setTime	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^void Timestamp::setTime(const string &stime){$/;"	f	class:Timestamp
setTime	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^void Timestamp::setTime(double s)$/;"	f	class:Timestamp
setToCurrentTime	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^void Timestamp::setToCurrentTime(){$/;"	f	class:Timestamp
sprintf	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	28;"	d	file:
~Timestamp	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.cpp	/^Timestamp::~Timestamp(void)$/;"	f	class:Timestamp
CURRENT_TIME	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.h	/^    CURRENT_TIME = 0x1,$/;"	e	enum:DUtils::Timestamp::tOptions
DUtils	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.h	/^namespace DUtils {$/;"	n
NONE	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.h	/^    NONE = 0,$/;"	e	enum:DUtils::Timestamp::tOptions
Timestamp	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.h	/^class Timestamp$/;"	c	namespace:DUtils
ZERO	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.h	/^    ZERO = 0x2$/;"	e	enum:DUtils::Timestamp::tOptions
__D_TIMESTAMP__	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.h	11;"	d
getTime	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.h	/^	inline void getTime(unsigned long &secs, unsigned long &usecs) const$/;"	f	class:DUtils::Timestamp
m_secs	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.h	/^	unsigned long m_secs;	\/\/ seconds$/;"	m	class:DUtils::Timestamp
m_usecs	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.h	/^	unsigned long m_usecs;	\/\/ microseconds$/;"	m	class:DUtils::Timestamp
setTime	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.h	/^	inline void setTime(unsigned long secs, unsigned long usecs){$/;"	f	class:DUtils::Timestamp
tOptions	thirdparty/loop-closure/ThirdParty/DUtils/Timestamp.h	/^  enum tOptions$/;"	g	class:DUtils::Timestamp
BRIEF	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.cpp	/^BRIEF::BRIEF(int nbits, int patch_size, Type type):$/;"	f	class:BRIEF
compute	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.cpp	/^void BRIEF::compute(const cv::Mat &image, $/;"	f	class:BRIEF
generateTestPoints	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.cpp	/^void BRIEF::generateTestPoints()$/;"	f	class:BRIEF
~BRIEF	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.cpp	/^BRIEF::~BRIEF()$/;"	f	class:BRIEF
BRIEF	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^class BRIEF$/;"	c	namespace:DVision
DVision	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^namespace DVision {$/;"	n
RANDOM	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^    RANDOM, \/\/ random pairs (Calonder's original version)$/;"	e	enum:DVision::BRIEF::Type
RANDOM_CLOSE	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^    RANDOM_CLOSE, \/\/ random but close pairs (used in GalvezIROS11)$/;"	e	enum:DVision::BRIEF::Type
Type	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  enum Type$/;"	g	class:DVision::BRIEF
__D_BRIEF__	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	30;"	d
bitset	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  typedef boost::dynamic_bitset<> bitset;$/;"	t	class:DVision::BRIEF
distance	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  inline static int distance(const bitset &a, const bitset &b)$/;"	f	class:DVision::BRIEF
exportPairs	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  inline void exportPairs(std::vector<int> &x1, std::vector<int> &y1,$/;"	f	class:DVision::BRIEF
getDescriptorLengthInBits	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  inline int getDescriptorLengthInBits() const$/;"	f	class:DVision::BRIEF
getPatchSize	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  inline int getPatchSize() const$/;"	f	class:DVision::BRIEF
getType	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  inline Type getType() const$/;"	f	class:DVision::BRIEF
importPairs	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  inline void importPairs(const std::vector<int> &x1, $/;"	f	class:DVision::BRIEF
m_bit_length	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  int m_bit_length;$/;"	m	class:DVision::BRIEF
m_patch_size	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  int m_patch_size;$/;"	m	class:DVision::BRIEF
m_type	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  Type m_type;$/;"	m	class:DVision::BRIEF
m_x1	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  std::vector<int> m_x1, m_x2;$/;"	m	class:DVision::BRIEF
m_x2	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  std::vector<int> m_x1, m_x2;$/;"	m	class:DVision::BRIEF
m_y1	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  std::vector<int> m_y1, m_y2;$/;"	m	class:DVision::BRIEF
m_y2	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  std::vector<int> m_y1, m_y2;$/;"	m	class:DVision::BRIEF
operator ()	thirdparty/loop-closure/ThirdParty/DVision/BRIEF.h	/^  inline void operator() (const cv::Mat &image, $/;"	f	class:DVision::BRIEF
DVision	thirdparty/loop-closure/ThirdParty/DVision/DVision.h	/^namespace DVision$/;"	n
__D_VISION__	thirdparty/loop-closure/ThirdParty/DVision/DVision.h	33;"	d
Vocabulary	thirdparty/loop-closure/ThirdParty/VocabularyBinary.cpp	/^VINSLoop::Vocabulary::Vocabulary()$/;"	f	class:VINSLoop::Vocabulary
deserialize	thirdparty/loop-closure/ThirdParty/VocabularyBinary.cpp	/^void VINSLoop::Vocabulary::deserialize(ifstream& stream) {$/;"	f	class:VINSLoop::Vocabulary
serialize	thirdparty/loop-closure/ThirdParty/VocabularyBinary.cpp	/^void VINSLoop::Vocabulary::serialize(ofstream& stream) {$/;"	f	class:VINSLoop::Vocabulary
~Vocabulary	thirdparty/loop-closure/ThirdParty/VocabularyBinary.cpp	/^VINSLoop::Vocabulary::~Vocabulary() {$/;"	f	class:VINSLoop::Vocabulary
L	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    int32_t L;$/;"	m	struct:VINSLoop::Vocabulary
Node	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^struct Node {$/;"	s	namespace:VINSLoop
VINSLoop	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^namespace VINSLoop {$/;"	n
Vocabulary	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^struct Vocabulary {$/;"	s	namespace:VINSLoop
VocabularyBinary_hpp	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	10;"	d
Word	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^struct Word {$/;"	s	namespace:VINSLoop
descriptor	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    uint64_t descriptor[4];$/;"	m	struct:VINSLoop::Node
k	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    int32_t k;$/;"	m	struct:VINSLoop::Vocabulary
nNodes	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    int32_t nNodes;$/;"	m	struct:VINSLoop::Vocabulary
nWords	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    int32_t nWords;$/;"	m	struct:VINSLoop::Vocabulary
nodeId	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    int32_t nodeId;$/;"	m	struct:VINSLoop::Node
nodeId	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    int32_t nodeId;$/;"	m	struct:VINSLoop::Word
nodes	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    Node* nodes;$/;"	m	struct:VINSLoop::Vocabulary
parentId	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    int32_t parentId;$/;"	m	struct:VINSLoop::Node
scoringType	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    int32_t scoringType;$/;"	m	struct:VINSLoop::Vocabulary
staticDataSize	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    inline static size_t staticDataSize() {$/;"	f	struct:VINSLoop::Vocabulary
weight	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    double weight;$/;"	m	struct:VINSLoop::Node
weightingType	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    int32_t weightingType;$/;"	m	struct:VINSLoop::Vocabulary
wordId	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    int32_t wordId;$/;"	m	struct:VINSLoop::Word
words	thirdparty/loop-closure/ThirdParty/VocabularyBinary.hpp	/^    Word* words;$/;"	m	struct:VINSLoop::Vocabulary
FeatureExtractor	thirdparty/loop-closure/demoDetector.h	/^class FeatureExtractor$/;"	c
__DEMO_DETECTOR__	thirdparty/loop-closure/demoDetector.h	10;"	d
demoDetector	thirdparty/loop-closure/demoDetector.h	/^class demoDetector$/;"	c
demoDetector	thirdparty/loop-closure/demoDetector.h	/^demoDetector<TVocabulary, TDetector, TDescriptor>::demoDetector$/;"	f	class:demoDetector
detector	thirdparty/loop-closure/demoDetector.h	/^  TDetector detector;$/;"	m	class:demoDetector
eraseIndex	thirdparty/loop-closure/demoDetector.h	/^void demoDetector<TVocabulary, TDetector, TDescriptor>::eraseIndex$/;"	f	class:demoDetector
initCameraModel	thirdparty/loop-closure/demoDetector.h	/^void demoDetector<TVocabulary, TDetector, TDescriptor>::initCameraModel$/;"	f	class:demoDetector
m_height	thirdparty/loop-closure/demoDetector.h	/^  int m_height;$/;"	m	class:demoDetector
m_vocfile	thirdparty/loop-closure/demoDetector.h	/^  std::string m_vocfile;$/;"	m	class:demoDetector
m_width	thirdparty/loop-closure/demoDetector.h	/^  int m_width;$/;"	m	class:demoDetector
params	thirdparty/loop-closure/demoDetector.h	/^  typename TDetector::Parameters params;$/;"	m	class:demoDetector
readPoseFile	thirdparty/loop-closure/demoDetector.h	/^void demoDetector<TVocabulary, TDetector, TDescriptor>::readPoseFile$/;"	f	class:demoDetector
run	thirdparty/loop-closure/demoDetector.h	/^bool demoDetector<TVocabulary, TDetector, TDescriptor>::run$/;"	f	class:demoDetector
voc	thirdparty/loop-closure/demoDetector.h	/^  TVocabulary voc;$/;"	m	class:demoDetector
~demoDetector	thirdparty/loop-closure/demoDetector.h	/^  ~demoDetector(){}$/;"	f	class:demoDetector
LoopClosure	thirdparty/loop-closure/loop_closure.cpp	/^LoopClosure::LoopClosure(const char *_voc_file, int _image_w, int _image_h, float _alpha)$/;"	f	class:LoopClosure
eraseIndex	thirdparty/loop-closure/loop_closure.cpp	/^void LoopClosure::eraseIndex(std::vector<int> &erase_index)$/;"	f	class:LoopClosure
initCameraModel	thirdparty/loop-closure/loop_closure.cpp	/^void LoopClosure::initCameraModel(const std::string &calib_file)$/;"	f	class:LoopClosure
startLoopClosure	thirdparty/loop-closure/loop_closure.cpp	/^bool LoopClosure::startLoopClosure(std::vector<cv::KeyPoint> &keys, std::vector<BRIEF::bitset> &descriptors,$/;"	f	class:LoopClosure
IMAGE_H	thirdparty/loop-closure/loop_closure.h	/^	int IMAGE_H;$/;"	m	class:LoopClosure
IMAGE_W	thirdparty/loop-closure/loop_closure.h	/^	int IMAGE_W;$/;"	m	class:LoopClosure
LoopClosure	thirdparty/loop-closure/loop_closure.h	/^class LoopClosure$/;"	c
__LOOP_CLOSURE__	thirdparty/loop-closure/loop_closure.h	2;"	d
demo	thirdparty/loop-closure/loop_closure.h	/^	demoDetector<BriefVocabulary, BriefLoopDetector, FBrief::TDescriptor> demo;$/;"	m	class:LoopClosure
